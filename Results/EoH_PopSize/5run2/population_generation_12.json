[
     {
          "algorithm": "\nThe new algorithm assigns scores to bins based on the sum of the square root of the remaining capacity divided by the item size and the square root of the logarithm of the item size, giving higher scores to bins with larger remaining capacity and smaller item sizes.\n",
          "code": "import numpy as np\nimport math\n\ndef score(item, bins):\n    scores = np.empty_like(bins)\n\n    remaining_bins = np.where(bins > item)[0]\n    remaining_capacity = bins[remaining_bins] - item\n    sqrt_remaining_capacity = np.sqrt(remaining_capacity)\n    sqrt_log_item_size = np.sqrt(np.log(item))\n\n    scores[remaining_bins] = sqrt_remaining_capacity / item + sqrt_log_item_size\n\n    return scores",
          "objective": 0.01519,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm assigns scores to bins based on a combination of the logarithm of the remaining capacity divided by the item size and the reciprocal of the logarithm of the item size, giving higher scores to bins with larger remaining capacity and smaller item sizes:\n\n```",
          "code": "import numpy as np\nimport math\n\ndef score(item, bins):\n    scores = np.empty_like(bins)\n\n    remaining_bins = np.where(bins > item)[0]\n    remaining_capacity = bins[remaining_bins] - item\n    reciprocal_log_item_size = np.reciprocal(np.log(item))\n\n    scores[remaining_bins] = np.log(remaining_capacity) * reciprocal_log_item_size\n\n    return scores",
          "objective": 0.03089,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm assigns scores to bins based on the ratio of the square root of the remaining capacity to the item size, multiplied by the logarithm of the bin size, giving higher scores to bins with larger remaining capacity and smaller item sizes:\n\n",
          "code": "import numpy as np\nimport math\n\ndef score(item, bins):\n    scores = np.empty_like(bins)\n\n    remaining_bins = np.where(bins > item)[0]\n    remaining_capacity = bins[remaining_bins] - item\n    sqrt_remaining_capacity = np.sqrt(remaining_capacity)\n    logarithm_bin_size = np.log(bins[remaining_bins])\n\n    scores[remaining_bins] = sqrt_remaining_capacity / item * logarithm_bin_size\n\n    return scores",
          "objective": 0.0321,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm description: The new algorithm assigns scores to bins based on a combination of the logarithm of the remaining capacity divided by the item size and the reciprocal of the logarithm of the item size, giving higher scores to bins with larger remaining capacity and smaller item sizes.\n\nImplementation in Python:\n\n```\n",
          "code": "import numpy as np\nimport math\n\ndef score(item, bins):\n    scores = np.empty_like(bins)\n\n    remaining_bins = np.where(bins > item)[0]\n    remaining_capacity = bins[remaining_bins] - item\n    reciprocal_item_size = np.reciprocal(np.log(item))\n\n    scores[remaining_bins] = np.log(remaining_capacity) * reciprocal_item_size\n\n    return scores",
          "objective": 0.0333,
          "other_inf": null
     },
     {
          "algorithm": "Algorithm: The new algorithm assigns scores to bins based on the product of the remaining capacity divided by the item size plus the square root of the item size, giving higher scores to bins with larger remaining capacity and smaller item sizes.\n\nCode:\n\n```",
          "code": "import numpy as np\nimport math\n\ndef score(item, bins):\n    scores = np.empty_like(bins)\n\n    remaining_bins = np.where(bins > item)[0]\n    remaining_capacity = bins[remaining_bins] - item\n    remaining_divided_item = remaining_capacity / item\n    sqrt_item_size = np.sqrt(item)\n\n    scores[remaining_bins] = remaining_divided_item + sqrt_item_size\n\n    return scores",
          "objective": 0.03723,
          "other_inf": null
     }
]