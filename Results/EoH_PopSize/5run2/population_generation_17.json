[
     {
          "algorithm": "\nThe new algorithm assigns scores to bins based on the sum of the square root of the remaining capacity divided by the item size and the square root of the logarithm of the item size, giving higher scores to bins with larger remaining capacity and smaller item sizes.\n",
          "code": "import numpy as np\nimport math\n\ndef score(item, bins):\n    scores = np.empty_like(bins)\n\n    remaining_bins = np.where(bins > item)[0]\n    remaining_capacity = bins[remaining_bins] - item\n    log_item_size = np.log(item)\n\n    scores[remaining_bins] = np.sqrt(remaining_capacity) / item + np.sqrt(log_item_size)\n\n    return scores",
          "objective": 0.01449,
          "other_inf": null
     },
     {
          "algorithm": "\nThe new algorithm assigns scores to bins based on the sum of the square root of the remaining capacity divided by the item size and the square root of the logarithm of the item size, giving higher scores to bins with larger remaining capacity and smaller item sizes.\n",
          "code": "import numpy as np\nimport math\n\ndef score(item, bins):\n    scores = np.empty_like(bins)\n\n    remaining_bins = np.where(bins > item)[0]\n    remaining_capacity = bins[remaining_bins] - item\n    sqrt_remaining_capacity = np.sqrt(remaining_capacity)\n    sqrt_log_item_size = np.sqrt(np.log(item))\n\n    scores[remaining_bins] = sqrt_remaining_capacity / item + sqrt_log_item_size\n\n    return scores",
          "objective": 0.01519,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm assigns scores to bins based on the sum of the logarithm of the remaining capacity divided by the item size and the logarithm of the bin size, giving higher scores to bins with larger remaining capacity and smaller item sizes.",
          "code": "import numpy as np\nimport math\n\ndef score(item, bins):\n    scores = np.empty_like(bins)\n\n    remaining_bins = np.where(bins > item)[0]\n    remaining_capacity = bins[remaining_bins] - item\n    log_remaining_capacity = np.log(remaining_capacity)\n    log_bin_size = np.log(bins[remaining_bins])\n\n    scores[remaining_bins] = np.log(remaining_capacity) / item + np.log(bins[remaining_bins])\n\n    return scores",
          "objective": 0.0164,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm assigns scores to bins based on the sum of the logarithm of the remaining capacity divided by the item size and the logarithm of the bin size, giving higher scores to bins with larger remaining capacity and smaller item sizes.",
          "code": "import numpy as np\nimport math\n\ndef score(item, bins):\n    scores = np.empty_like(bins)\n\n    remaining_bins = np.where(bins > item)[0]\n    log_bin_size = np.log(bins[remaining_bins])\n\n    scores[remaining_bins] = np.log(bins[remaining_bins]) / item + np.log(bins[remaining_bins])\n\n    return scores",
          "objective": 0.02586,
          "other_inf": null
     },
     {
          "algorithm": "The common backbone idea in the provided algorithms is to calculate scores for bins based on their remaining capacity and the size of the item.\n\nThe new algorithm assigns scores to bins based on the difference between the logarithm of the remaining capacity divided by the item size and the square root of the logarithm of the item size, giving higher scores to bins with larger remaining capacity and smaller item sizes:\n\n```",
          "code": "import numpy as np\nimport math\n\ndef score(item, bins):\n    scores = np.empty_like(bins)\n\n    remaining_bins = np.where(bins > item)[0]\n    remaining_capacity = bins[remaining_bins] - item\n    log_remaining_capacity = np.log(remaining_capacity)\n    sqrt_log_item_size = np.sqrt(np.log(item))\n\n    scores[remaining_bins] = log_remaining_capacity / sqrt_log_item_size\n\n    return scores",
          "objective": 0.02948,
          "other_inf": null
     }
]