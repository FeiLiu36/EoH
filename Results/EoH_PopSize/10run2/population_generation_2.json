[
     {
          "algorithm": "The new algorithm assigns items to bins based on a score function that combines the residual capacity of the bin, the index of the bin, and the square root of the absolute difference between the residual capacity and the item size, while minimizing the number of used bins.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    residual_capacity = bins - item\n    weights = (residual_capacity / np.arange(1, len(bins)+1)) * (1 / np.sqrt(np.abs(residual_capacity)))\n    scores = residual_capacity * weights\n    return scores",
          "objective": 0.01127,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm assigns items to bins based on a score function that combines the residual capacity of the bin, the logarithm of the index of the bin, and the cube root of the absolute difference between the residual capacity and the item size, while minimizing the number of used bins.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    residual_capacity = bins - item\n    weights = (residual_capacity / np.arange(1, len(bins)+1)) * (1 / np.cbrt(np.abs(residual_capacity)))\n    scores = residual_capacity * np.log(np.arange(1, len(bins)+1)) * weights\n    return scores",
          "objective": 0.02254,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm assigns items to bins based on a score function that combines the residual capacity of the bin, the index of the bin, and the absolute difference between the residual capacity and the item size, while minimizing the number of used bins.\n\n```",
          "code": "import numpy as np\n\ndef score(item, bins):\n    residual_capacity = bins - item\n    weights = (residual_capacity / np.arange(1, len(bins)+1)) * (1 / np.abs(residual_capacity))\n    scores = residual_capacity * weights\n    return scores",
          "objective": 0.02636,
          "other_inf": null
     },
     {
          "algorithm": "\nNew algorithm: The new algorithm assigns items to bins based on a score function that combines the square root of the bin index, the inverse of the residual capacity, and the square of the inverse of the absolute difference between the residual capacity and the item size, while minimizing the number of used bins.\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    residual_capacity = bins - item\n    scores = np.sqrt(np.arange(1, len(bins)+1)) * (1 / residual_capacity) * (1 / np.square(np.abs(residual_capacity - item)))\n    return scores",
          "objective": 0.02878,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm assigns items to bins based on a score function that combines the logarithm of the bin index, the inverse of the square root of the residual capacity, and the inverse of the absolute difference between the residual capacity and the item size, while minimizing the number of used bins.\n\nPython implementation:\n\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    residual_capacity = bins - item\n    scores = np.log(np.arange(1, len(bins)+1)) * (1 / np.sqrt(np.abs(residual_capacity))) * (1 / np.abs(residual_capacity - item))\n    return scores",
          "objective": 0.02928,
          "other_inf": null
     },
     {
          "algorithm": "Common backbone idea: Calculating a score for each bin based on its characteristics (e.g., residual capacity, index) and using this score to determine the assignment of an item to a bin.\n\nNew algorithm description: The new algorithm assigns items to bins based on a score function that combines the logarithm of the bin index, the square of the inverse of the residual capacity, and the square of the inverse of the absolute difference between the residual capacity and the item size, while minimizing the number of used bins.\n\nPython implementation:\n\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.arange(1, len(bins)+1) * (1 / np.abs(bins - item + 1e-8)) * (1 / np.abs(bins - item - item + 1e-8))\n    return scores",
          "objective": 0.03089,
          "other_inf": null
     },
     {
          "algorithm": "Common backbone idea: Calculating a score for each bin based on its characteristics (e.g., residual capacity, index) and using this score to determine the assignment of an item to a bin.\n\nNew algorithm description: The new algorithm assigns items to bins based on a score function that combines the exponential of the bin index, the cube of the inverse of the residual capacity, and the square root of the inverse of the absolute difference between the residual capacity and the item size, while minimizing the number of used bins.\n\nPython implementation:\n\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    residual_capacity = bins - item\n    scores = np.exp(np.arange(1, len(bins)+1)) * (1 / np.power(np.abs(residual_capacity), 3)) * np.sqrt(1 / np.abs(residual_capacity - item))\n    return scores",
          "objective": 0.03159,
          "other_inf": null
     },
     {
          "algorithm": "Common backbone idea: Calculating a score for each bin based on its characteristics (e.g., residual capacity, index) and using this score to determine the assignment of an item to a bin.\n\nNew algorithm description: The new algorithm assigns items to bins based on a score function that combines the sum of the logarithm of the bin index, the square of the inverse of the residual capacity, and the square of the inverse of the absolute difference between the residual capacity and the item size, while minimizing the number of used bins.\n\nPython implementation:\n\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    residual_capacity = bins - item\n    scores = np.log(np.arange(1, len(bins)+1)) + (1 / np.abs(residual_capacity + 1e-8))**2 + (1 / np.abs(residual_capacity - item + 1e-8))**2\n    return scores",
          "objective": 0.0324,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm description: The new algorithm assigns items to bins based on a score function that combines the square root of the bin index, the reciprocal of the residual capacity, and the reciprocal of the absolute difference between the residual capacity and the item size, while minimizing the number of used bins.\n\nPython implementation:\n\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    residual_capacity = bins - item\n    scores = np.sqrt(np.arange(1, len(bins)+1)) * (1 / residual_capacity) * (1 / np.abs(residual_capacity - item))\n    return scores",
          "objective": 0.0334,
          "other_inf": null
     },
     {
          "algorithm": "My new algorithm assigns items to bins based on a score function that combines the logarithm of the bin index, the reciprocal of the residual capacity, and the reciprocal of the absolute difference between the residual capacity and the item size, while minimizing the number of used bins.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    residual_capacity = bins - item\n    scores = np.log(np.arange(1, len(bins)+1)) * (1 / residual_capacity) * (1 / np.abs(residual_capacity - item))\n    return scores",
          "objective": 0.0336,
          "other_inf": null
     }
]