[
     {
          "algorithm": "The new algorithm assigns an item to the bin with the maximum score, which is calculated as the bin's current capacity divided by the cube root of the difference between the bin's capacity and the item size, plus the number of times the bin has been used, multiplied by a constant factor of 1.5.\n\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = bins / np.cbrt(bins - item) + np.arange(len(bins)) * 1.5\n    return scores",
          "objective": 0.03511,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm assigns an item to the bin with the maximum score and updates the rest capacity of the bin accordingly, until all items are assigned. The score for each bin is calculated as the bin's current capacity divided by the logarithm of the difference between the bin's capacity and the item size, plus the square root of the number of times the bin has been used.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = bins / (np.log1p(bins - item) + np.sqrt(np.arange(len(bins))))\n    return scores",
          "objective": 0.03602,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm assigns an item to the bin with the maximum score, which is calculated as the bin's current capacity divided by the cube root of the difference between the bin's capacity and the item size, plus the number of times the bin has been used, multiplied by a constant factor of 1.2.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = bins / np.cbrt(bins - item) + np.arange(len(bins)) * 1.2\n    return scores",
          "objective": 0.03612,
          "other_inf": null
     },
     {
          "algorithm": "Algorithm Description: The new algorithm assigns an item to the bin with the maximum score, which is calculated as the bin's current capacity divided by the cube root of the difference between the bin's capacity and the item size, plus the number of times the bin has been used, multiplied by a constant factor of 0.8.\n\nNew Algorithm Implementation in Python:\n\n```",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = bins / np.cbrt(bins - item) + np.arange(len(bins)) * 0.8\n    return scores",
          "objective": 0.03642,
          "other_inf": null
     },
     {
          "algorithm": "New Algorithm:\nAssign an item to the bin with the maximum score, which is calculated as the product of the bin's current capacity divided by the difference between the bin's capacity and the item size, raised to the power of 1.2, plus the number of times the bin has been used, multiplied by a constant factor of 2.0.\n\nNew code:\n```",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = (bins / (bins - item)) ** 1.2 + np.arange(len(bins)) * 2.0\n    return scores",
          "objective": 0.03793,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Assign an item to the bin with the maximum score, which is calculated as the sum of the bin's current capacity divided by the difference between the bin's capacity and the item size, plus the square root of the bin's current capacity, plus the number of times the bin has been used, multiplied by a constant factor. The constant factor is set to 3.\n\nNew code:\n\n",
          "code": "import numpy as np\nimport math\n\ndef score(item, bins):\n    scores = (bins / (bins - item)) + np.sqrt(bins) + np.arange(len(bins)) * 3\n    return scores",
          "objective": 0.03813,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Assign an item to the bin with the maximum score, which is calculated as the sum of the bin's current capacity divided by the difference between the bin's capacity and the item size, plus the number of times the bin has been used, multiplied by a constant factor. The constant factor is set to 1.5.\n\nNew code:\n\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = (bins / (bins - item)) + np.arange(len(bins)) * 1.5\n    return scores",
          "objective": 0.03833,
          "other_inf": null
     },
     {
          "algorithm": "\nThe algorithm assigns an item to the bin with the maximum score and updates the rest capacity of the bin accordingly, until all items are assigned. The score for each bin is calculated as the bin's current capacity divided by the difference between the bin's capacity and the item size, plus the number of times the bin has been used.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = bins / (bins - item) + np.arange(len(bins))\n    return scores",
          "objective": 0.03843,
          "other_inf": null
     },
     {
          "algorithm": "",
          "code": "def score(item, bins):\n    scores = bins / (bins - item) + np.arange(len(bins)) + item / bins\n    return scores",
          "objective": 0.03854,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm assigns an item to the bin with the maximum score, which is calculated as the bin's current capacity divided by the difference between the bin's capacity and the item size, plus the number of times the bin has been used, multiplied by a constant factor.\nCode:\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = bins / (bins - item) + np.arange(len(bins)) * 0.5\n    return scores",
          "objective": 0.03884,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm description: The new algorithm assigns an item to the bin with the maximum score, which is calculated as the bin's current capacity divided by the logarithm base 2 of the difference between the bin's capacity and the item size, plus the number of times the bin has been used, multiplied by a constant factor of 0.5.\n\nNew Algorithm Implementation in Python:\n\n```",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = bins / (np.log2(bins - item) + 1) + np.arange(len(bins)) * 0.5\n    return scores",
          "objective": 0.03894,
          "other_inf": null
     },
     {
          "algorithm": "\nThe algorithm assigns an item to the bin with the maximum score, considering the rest capacity of each bin, in order to minimize the number of used bins. \n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.zeros_like(bins)\n    scores[bins != bins.max()] = item / (bins[bins != bins.max()] - item + 1)\n    return scores",
          "objective": 0.03914,
          "other_inf": null
     },
     {
          "algorithm": "New Algorithm Description: The new algorithm assigns an item to the bin with the maximum score, which is calculated as the bin's current capacity divided by the square root of the difference between the bin's capacity and the item size, plus the number of times the bin has been used, multiplied by a constant factor of 0.7.\n\nNew Algorithm Implementation in Python:\n\n```",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = bins / np.sqrt(bins - item) + np.arange(len(bins)) * 0.7\n    return scores",
          "objective": 0.03934,
          "other_inf": null
     },
     {
          "algorithm": "New Algorithm description: The new algorithm assigns an item to the bin with the maximum score, which is calculated as the bin's current capacity divided by the square root of the difference between the bin's capacity and the item size, plus the number of times the bin has been used, multiplied by a constant factor.\n\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = bins / np.sqrt(bins - item) + np.arange(len(bins)) * 0.5\n    return scores",
          "objective": 0.03944,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Assign an item to the bin with the maximum score, which is calculated as the sum of the bin's current capacity divided by the difference between the bin's capacity and the item size, plus the square root of the bin's current capacity, plus the number of times the bin has been used, multiplied by a constant factor. The constant factor is set to 2.\n\nNew code:\n\n",
          "code": "import numpy as np\nimport math\n\ndef score(item, bins):\n    scores = (bins / (bins - item)) + np.sqrt(bins) + np.arange(len(bins)) * 2\n    return scores",
          "objective": 0.03954,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm (with different parameter settings):\n\nThe new algorithm assigns an item to the bin with the maximum score, which is calculated as the logarithm of the bin's current capacity divided by the difference between the bin's capacity and the item size, plus the square root of the number of times the bin has been used, multiplied by 3.\n\nNew code:\n\n```\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.log(bins / (bins - item)) + np.sqrt(np.arange(len(bins))) * 3\n    return scores",
          "objective": 0.03964,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm assigns scores to each bin based on the remaining capacity of the bin, where bins with the maximum capacity have a score of zero, and bins with smaller capacities have higher scores. The score is calculated using a formula that takes into account the difference in capacity between each bin and the maximum capacity, as well as the size of the item. The formula is as follows: scores = (bins.max() - bins) - item.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = (bins.max() - bins) - item\n    return scores",
          "objective": 0.03984,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm assigns items to bins based on a score function, where each bin is assigned the item with the maximum score calculated using a different parameter setting, and empty bins with maximum capacity are not used; the goal is to minimize the number of used bins.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.zeros_like(bins)\n    max_capacity = np.max(bins)\n    \n    # New parameter setting\n    scores[bins != max_capacity] = (item**2) / bins[bins != max_capacity]\n    \n    return scores",
          "objective": 0.04004,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Assign an item to the bin with the maximum score, which is calculated as the logarithm of the bin's current capacity divided by the difference between the bin's capacity and the item size, plus the number of times the bin has been used, multiplied by a constant factor of 2.\n\nNew code:\n\n```",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.log(bins / (bins - item)) + np.arange(len(bins)) * 2\n    return scores",
          "objective": 0.04035,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm assigns items to bins based on a score function, where each bin is assigned the item with the maximum score, and empty bins with maximum capacity are not used; the goal is to minimize the number of used bins.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.zeros_like(bins)\n    max_capacity = np.max(bins)\n    scores[bins != max_capacity] = item / bins[bins != max_capacity]\n    return scores",
          "objective": 0.04095,
          "other_inf": null
     }
]