[
     {
          "algorithm": "Modified algorithm: The score function will calculate the scores for each bin based on the remaining capacity, penalizing bins with maximum capacity and also considering the number of items already assigned to each bin, to further reduce the number of used bins.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the remaining capacity of each bin\n    remaining_capacity = bins - item\n    \n    # Calculate the number of items already assigned to each bin\n    assigned_items = np.ceil(remaining_capacity/item)\n    \n    # Calculate the score for each bin\n    scores = remaining_capacity - (assigned_items - 1) * item\n    \n    return scores",
          "objective": 0.01298,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm assigns scores to each bin based on the exponential function of the item size multiplied by the bin index, divided by the remainder capacity raised to the power of the bin index multiplied by a constant factor, in order to balance the size of the item, the remaining capacity, and the index of the bin while favoring bins with higher index, higher rest capacity, and a lower rate of decrease in capacity with increasing index.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    index = np.arange(len(bins))\n    remaining_capacity = bins - item\n    scores = np.exp(item * index / (remaining_capacity**index * 0.5))\n    return scores",
          "objective": 0.03079,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm assigns scores to each bin based on the logarithm of the item size multiplied by the bin index, divided by the remainder capacity raised to the power of the bin index, in order to balance the size of the item, the remaining capacity, and the index of the bin while favoring bins with higher index, higher rest capacity, and a higher rate of decrease in capacity with increasing index.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    index = np.arange(len(bins))\n    remainder_capacity = bins - item\n    scores = (np.log(item) * index) / (remainder_capacity ** index)\n    return scores",
          "objective": 0.0327,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: The score function will calculate the scores for each bin by dividing the product of the item size and the bin index by the rest capacity raised to the power of the bin index multiplied by a constant value k, aiming to balance the size of the item, the remaining capacity, and the index of the bin while favoring bins with higher rest capacity, higher index, and a higher value of k.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    k = 2  # Constant value\n    bin_index = np.arange(len(bins))\n    rest_capacity_indexed = bins - item\n    scores = (item * bin_index) / (rest_capacity_indexed**bin_index * k)\n    return scores",
          "objective": 0.0329,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm uses the bin index cubed as a factor in the score function to give higher priority to bins with higher indices and lower remaining capacities, in order to minimize the number of used bins.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = (bins ** 3) / (bins - item)\n    scores[bins == bins.max()] = 0\n    return scores",
          "objective": 0.03431,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm assigns scores to each bin based on the sum of the bin index and the remaining capacity multiplied by the square root of the quotient between the bin index and the remaining capacity, aiming to balance the index of the bin, the remaining capacity, and the rate of decrease in capacity with increasing index while favoring bins with higher indices and lower rest capacity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    bin_count = len(bins)\n    \n    # Calculate the remaining capacity for each bin\n    remaining_capacity = bins - item\n    \n    # Calculate the bin indices\n    bin_indices = np.arange(bin_count) + 1\n    \n    # Calculate the score for each bin\n    scores = (bin_indices + remaining_capacity) * np.sqrt(bin_indices / remaining_capacity)\n    \n    # Set scores of bins with maximum capacity to -inf to exclude them from being used\n    scores[remaining_capacity == np.max(remaining_capacity)] = -np.inf\n    \n    return scores",
          "objective": 0.03612,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm assigns scores to each bin based on the exponential function of the item size multiplied by the bin index, divided by the remainder capacity raised to the power of the square root of the bin index, in order to balance the size of the item, the remaining capacity, and the index of the bin while favoring bins with higher index, higher rest capacity, and a higher rate of decrease in capacity with increasing index.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    bin_indices = np.arange(len(bins)) + 1  # bin index starts from 1\n    remainder_capacity = bins - item\n\n    scores = (item * np.exp(bin_indices))/(remainder_capacity**np.sqrt(bin_indices))\n    scores[remainder_capacity == bins] = 0  # Ignore bins with full capacity\n\n    return scores",
          "objective": 0.03783,
          "other_inf": null
     },
     {
          "algorithm": "\nThe new algorithm assigns scores to each bin based on the product of the item size and the bin index, divided by the square root of the remainder capacity raised to the power of the exponential function of the bin index, aiming to balance the size of the item, the remaining capacity, and the index of the bin while favoring bins with higher index, lower rest capacity, and a higher rate of decrease in capacity with increasing index.\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    index = np.arange(len(bins))\n    remainder_capacity = bins - item\n    scores = (item * index) / (np.sqrt(remainder_capacity) ** index)\n    max_score = np.max(scores)\n    scores[remainder_capacity == np.max(bins)] = -np.inf\n    scores[np.isnan(scores)] = -np.inf\n    return scores",
          "objective": 0.03803,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm assigns scores to each bin based on the bin index squared plus the inverse of the remaining capacity, aiming to prioritize both bins with higher indices and lower remaining capacities while minimizing the number of used bins.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    indices = np.arange(len(bins))\n    remaining_capacities = bins - item\n    \n    scores = indices ** 2 + (1 / remaining_capacities)\n    \n    max_capacity = np.max(bins)\n    scores[bins == max_capacity] = -np.inf\n    \n    return scores",
          "objective": 0.03813,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm will calculate the score for each bin based on the ratio of the item size to the rest capacity of the bin minus the bin index, aiming to balance the size of the item, the remaining capacity, and the index of the bin while favoring bins with higher remaining capacity and lower index.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = (item / (bins - item)) - np.arange(len(bins))\n    return scores",
          "objective": 0.03854,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: The score function will calculate the scores for each bin based on the product of the item size and the bin index divided by the exponential function of the rest capacity raised to the power of the square root of the bin index, aiming to balance the size of the item, the remaining capacity, and the index of the bin while favoring bins with higher remaining capacity and higher index.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    bin_index = np.arange(1, len(bins) + 1)\n    remaining_capacity = bins - item\n    scores = (item * bin_index) / (np.exp(remaining_capacity) ** np.sqrt(bin_index))\n    scores[remaining_capacity == max(bins)] = -np.inf\n    return scores",
          "objective": 0.03874,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm will calculate the score for each bin based on the ratio of the item size to the rest capacity of the bin plus the square root of the bin index, aiming to balance the size of the item, the remaining capacity, and the index of the bin while favoring bins with higher remaining capacity and higher index.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.zeros_like(bins, dtype=float)\n    max_capacity = np.max(bins)\n    \n    for i, rest_capacity in enumerate(bins):\n        if rest_capacity == max_capacity:\n            scores[i] = float('-inf')\n        else:\n            scores[i] = item / (rest_capacity - item) + np.sqrt(i)\n    \n    return scores",
          "objective": 0.03884,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: The score function will calculate the scores for each bin based on the difference between the item size and the rest capacity, divided by the sum of the bin index and a constant value, aiming to prioritize bins with lower remaining capacity and lower index while addressing the size of the item and providing a constant factor to balance the scores.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = (item - bins) / (np.arange(len(bins)) + 1)\n    scores[bins == bins.max()] = -np.inf\n    return scores",
          "objective": 0.03894,
          "other_inf": null
     },
     {
          "algorithm": "The score function assigns scores to each bin by dividing the square of the bin index by the difference between the item size and the remainder capacity, aiming to prioritize bins with higher index values and a larger difference between item size and remaining capacity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    bin_index = np.arange(len(bins))\n    remainder_capacity = bins - item\n    \n    scores = bin_index / remainder_capacity**2\n    scores[remainder_capacity == item] = 0\n    \n    return scores",
          "objective": 0.03904,
          "other_inf": null
     },
     {
          "algorithm": "In the new algorithm, the score function calculates the scores for each bin based on the logarithm of the ratio of the item size to the rest capacity of the bin, multiplied by the bin index, aiming to balance the size of the item, the remaining capacity, and the index of the bin while favoring bins with lower remaining capacity and higher index.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.log(item / bins) * (np.arange(len(bins)) + 1)\n    return scores",
          "objective": 0.03914,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm assigns scores to each bin based on the logarithm of the ratio between the item size and the remaining capacity, multiplied by the square root of the bin index, aiming to balance the size of the item, the remaining capacity, and the index of the bin while favoring bins with higher index, larger remaining capacity, and a greater difference between the item size and remaining capacity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.log(item/bins) * np.sqrt(np.arange(1, len(bins)+1))\n    scores[bins == np.max(bins)] = -np.inf\n    return scores",
          "objective": 0.03924,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm assigns scores to each bin based on the logarithm of the item size multiplied by the bin index, divided by the remainder capacity raised to the power of the square root of the bin index, in order to balance the size of the item, the remaining capacity, and the index of the bin while favoring bins with higher index, higher rest capacity, and a higher rate of decrease in capacity with increasing index.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    bin_indices = np.arange(len(bins))\n    capacities = bins - item\n    scores = (np.log(item) * bin_indices) / (capacities ** np.sqrt(bin_indices))\n    scores[capacities == max(bins)] = -np.inf\n    return scores",
          "objective": 0.03934,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm assigns scores to each bin based on the inverse of the bin index plus the product of the inverse of the remaining capacity and the square root of the bin index, aiming to prioritize both bins with lower indices and lower remaining capacities while minimizing the number of used bins.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    bin_indices = np.arange(bins.size) + 1\n    remaining_capacities = bins - item\n    remaining_capacities[remaining_capacities < 0] = 0\n    scores = 1 / bin_indices + (1 / remaining_capacities) * np.sqrt(bin_indices)\n    scores[bins == bins.max()] = 0\n    return scores",
          "objective": 0.03944,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm assigns scores to each bin based on the inverse of the bin index plus the product of the inverse of the remaining capacity and the logarithm of the bin index, aiming to prioritize both bins with lower indices and lower remaining capacities while minimizing the number of used bins.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    bin_indices = np.arange(len(bins))\n    remaining_capacities = bins - item\n    inverse_bin_indices = 1 / (bin_indices + 1)\n    inverse_remaining_capacities = 1 / remaining_capacities\n\n    scores = inverse_bin_indices + inverse_remaining_capacities * np.log(bin_indices + 1)\n    scores[remaining_capacities == bins] = -np.inf\n\n    return scores",
          "objective": 0.03954,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm assigns scores to each bin based on the product of the bin index squared and the inverse of the remaining capacity, aiming to prioritize bins with higher indices and lower remaining capacities while minimizing the number of used bins.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    indices = np.arange(len(bins))\n    scores = indices ** 2 / (bins - item)\n    scores[bins == bins.max()] = 0\n    return scores",
          "objective": 0.03974,
          "other_inf": null
     }
]