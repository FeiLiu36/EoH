[
     {
          "algorithm": "The new algorithm assigns scores to bins based on the inverse of the remaining capacity of each bin plus the square root of the bin number, then returns the scores for the bins for assignment as a Numpy array.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    remaining_capacity = bins - item\n    scores = 1 / remaining_capacity + np.sqrt(np.arange(len(bins)))\n    scores[bins == bins.max()] = 0\n    return scores",
          "objective": 0.03723,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: The score function will calculate the scores for each bin based on the ratio of the item size to the remaining capacity, prioritizing bins with lower ratios and lower index, and returning a Numpy array of scores for assignment.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    ratios = item / (bins - item)\n    indices = np.arange(len(bins))\n    scores = ratios + indices\n    return scores",
          "objective": 0.03843,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: The score function will calculate the scores for each bin based on the inverse of the bin's remaining capacity, the square of the bin's index, and the item size divided by the maximum capacity, to optimize bin usage while assigning the item to bins with higher score and minimum number of used bins.\nCode:\nimport numpy as np\n\ndef score(item, bins):\n    scores = np.zeros(bins.shape)\n    remaining_capacity = bins - item\n    max_capacity = np.max(bins)\n    \n    # Calculate scores for each bin\n    scores = (1 / remaining_capacity) * (np.square(np.arange(len(bins))) * (item / max_capacity))\n    \n    # Set score of bins with maximum capacity as 0\n    scores[bins == max_capacity] = 0\n    \n    return scores",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.zeros_like(bins)\n    remaining_capacity = bins - item\n    max_capacity = np.max(bins)\n    \n    # Calculate scores for each bin\n    scores = (1 / remaining_capacity) * (np.square(np.arange(len(bins))) * (item / max_capacity))\n    \n    # Set score of bins with maximum capacity as 0\n    scores[bins == max_capacity] = 0\n    \n    return scores",
          "objective": 0.03964,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm will assign scores to each bin based on the ratio of the square of the item size to the remaining capacity of each bin, then subtract the index of the bin from the maximum capacity to prioritize bins with higher remaining capacity while minimizing the number of used bins.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.zeros_like(bins)\n    remaining_capacity = bins - item\n    \n    # Calculate the scores based on the formula\n    scores = (item**2) / remaining_capacity\n    \n    # Subtract the index of the bin from the maximum capacity\n    scores -= (bins.max() - np.arange(len(bins)))\n    \n    return scores",
          "objective": 0.03974,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm will assign scores to each bin based on the ratio of item size to the square of each bin's rest capacity, then return the scores for the bins for assignment as a Numpy array.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = item / (bins**2)\n    return scores",
          "objective": 0.03984,
          "other_inf": null
     },
     {
          "algorithm": "The common backbone idea in the provided algorithms is to assign scores to bins based on their remaining capacity relative to the item size.}\n\n{New algorithm: Assign scores to bins based on the ratio of the item size to the sum of each bin's remaining capacity and the logarithm of the bin number, then return the scores for the bins for assignment as a Numpy array.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = (item / (bins + np.log(np.arange(1, len(bins) + 1))))\n    return scores",
          "objective": 0.04014,
          "other_inf": null
     },
     {
          "algorithm": "The common backbone idea in the provided algorithms is to calculate scores for each bin based on some combination of the bin's remaining capacity and its proximity to the item size.}\n\n{New algorithm: The score function will calculate the scores for each bin based on the inverse of the square of the bin's remaining capacity and the product of the bin's index and the item size to optimize bin usage while assigning the item to bins with higher score and minimum number of used bins.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.zeros(bins.shape)\n    remaining_capacity = bins - item\n    max_capacity = np.max(bins)\n    \n    # Calculate scores for each bin\n    scores = (1 / np.square(remaining_capacity)) * (np.arange(len(bins)) * item)\n    \n    # Set score of bins with maximum capacity as 0\n    scores[bins == max_capacity] = 0\n    \n    return scores",
          "objective": 0.04095,
          "other_inf": null
     },
     {
          "algorithm": "\nNew algorithm: The score function will calculate the scores for each bin based on the remaining capacity, with a penalty for bins with maximum capacity to minimize the number of used bins.\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = (max_capacity - bins) + (bins == max_capacity) * item\n    return scores",
          "objective": 0.04105,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: The score function will calculate the scores for each bin based on the logarithm of the bin's remaining capacity plus the absolute difference between the bin's index and the item size to optimize bin usage while assigning the item to bins with higher score and minimum number of used bins.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.log(bins) + np.abs(np.arange(len(bins)) - item)\n    return scores",
          "objective": 0.04216,
          "other_inf": null
     },
     {
          "algorithm": "scores = item / (np.sum(bins) + np.sqrt(np.arange(1,len(bins)+1)))",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = item / (np.sum(bins) + np.sqrt(np.arange(1,len(bins)+1)))\n    return scores",
          "objective": 0.04226,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm assigns scores to each bin based on a combination of the ratio of item size to the remaining capacity and the reciprocal of the bin number, excluding bins with maximum capacity, and returns the scores as a Numpy array.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = (item/bins) * (1/(np.arange(len(bins))+1))\n    return scores",
          "objective": 0.04256,
          "other_inf": null
     },
     {
          "algorithm": "N",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.zeros_like(bins, dtype=np.int32)\n    max_capacity = np.amax(bins)\n    \n    if item == max_capacity:\n        return scores\n    \n    scores = (max_capacity - bins) - (max_capacity - bins) % item\n    \n    return scores",
          "objective": 0.04286,
          "other_inf": null
     },
     {
          "algorithm": "\nDescription: \nThe algorithm calculates the scores for each bin based on their rest capacities and assigns the item to the bin with the maximum score, minimizing the number of used bins.\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = bins / np.maximum((bins - item), 1)\n    scores[bins == bins.max()] = 0\n    return scores",
          "objective": 0.04306,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Assign scores to bins based on the ratio of the bin's remaining capacity to the inverse of the item size plus the square root of the bin number, and return the scores as a Numpy array.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = bins / (1 / item + np.sqrt(np.arange(1, len(bins)+1)))\n    return scores",
          "objective": 0.04518,
          "other_inf": null
     },
     {
          "algorithm": "The score function will assign scores to each bin based on the inverse ratio of the remaining capacity to the item size, prioritizing bins with higher ratios and excluding bins with rest capacity equal to the maximum capacity or the item size, returning a Numpy array of scores for assignment.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.where((bins != bins.max()) & (bins != item), bins / (bins - item), 0)\n    return scores",
          "objective": 0.04779,
          "other_inf": null
     },
     {
          "algorithm": "Define a function named score that takes in inputs 'item' and 'bins' and returns the output 'scores' as a Numpy array, implementing a novel scoring algorithm to assign the item to the bins with the maximum score while minimizing the number of used bins by considering the remaining capacity of bins and giving higher scores to bins with more space available.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.zeros_like(bins)\n    bins_with_capacity = np.nonzero(bins > item)[0]\n    scores[bins_with_capacity] = bins[bins_with_capacity] / (bins[bins_with_capacity] - item)\n    return scores",
          "objective": 0.0498,
          "other_inf": null
     },
     {
          "algorithm": "N",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = item / bins\n    scores[bins == item] = -float('inf')\n    return scores",
          "objective": 0.05071,
          "other_inf": null
     },
     {
          "algorithm": "T",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.zeros_like(bins)\n    for i in range(len(bins)):\n        if bins[i] != item:\n            scores[i] = (bins[i] - item) / bins[i]\n        else:\n            scores[i] = -1\n    return scores",
          "objective": 0.05383,
          "other_inf": null
     },
     {
          "algorithm": "The common backbone idea in the provided algorithms is to calculate scores for each bin based on some combination of the bin's remaining capacity and its proximity to the item size.}\n\n{New algorithm: The score function will calculate the scores for each bin based on the logarithmic function of the bin's remaining capacity and the exponential function of the product of the bin's index and the item size, to optimize bin usage while assigning the item to bins with higher score and minimum number of used bins.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    index_item = np.arange(1, len(bins)+1)\n    scores = np.log(bins) * np.exp(index_item * item)\n    return scores",
          "objective": 0.05463,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm assigns scores to bins based on the remaining capacity of each bin divided by the square of the bin number plus the square root of the item, then returns the scores for the bins for assignment as a Numpy array.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = bins / (np.square(np.arange(len(bins))) + np.sqrt(item))\n    return scores",
          "objective": 0.05504,
          "other_inf": null
     }
]