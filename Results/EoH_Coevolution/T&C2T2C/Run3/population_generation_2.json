[
     {
          "algorithm": "My new algorithm assigns scores to bins based on a combination of the ratio of the remaining capacity to the item size, the bin number, and the inverse of the remaining capacity, ensuring a unique and distinct scoring system from the existing algorithms.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    remaining_capacity = bins - item\n    ratio = remaining_capacity / item\n    bin_number = np.arange(len(bins))\n    inverse_capacity = 1 / remaining_capacity\n    scores = ratio + bin_number + inverse_capacity\n    return scores",
          "objective": 0.03632,
          "other_inf": null
     },
     {
          "algorithm": "Common backbone idea: Assign a score to each bin based on its capacity and other factors such as ratio, index, proximity to item size, or number of items already assigned.}\n\n{New Algorithm: The score function will assign scores to each bin based on a combination of the bin's remaining capacity, its proximity to the item size, and the ratio of remaining capacity to item size, returning a Numpy array of scores for assignment.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    ratios = bins / item\n    distances = np.abs(bins - item)\n    scores = (bins * ratios) / distances\n    \n    scores[bins == np.max(bins)] = 0\n    \n    return scores",
          "objective": 0.03944,
          "other_inf": null
     },
     {
          "algorithm": "My new algorithm assigns scores to bins based on the ratio of remaining capacity to the square of the item size, penalizing bins at maximum capacity and prioritizing bins with lower remaining capacity and higher index.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = (bins / (bins - item)**2) - (bins == np.max(bins))\n    return scores",
          "objective": 0.03984,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm will calculate the score for each bin based on the inverse of the sum of the rest capacity and the index, and return the scores for assignment.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    rest_capacity = bins - item\n    index = np.arange(len(bins))\n    scores = 1 / (rest_capacity + index)\n    return scores",
          "objective": 0.04095,
          "other_inf": null
     },
     {
          "algorithm": "\nNew algorithm: The score function will calculate the scores for each bin based on the remaining capacity, with a penalty for bins with maximum capacity to minimize the number of used bins.\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = (max_capacity - bins) + (bins == max_capacity) * item\n    return scores",
          "objective": 0.04105,
          "other_inf": null
     },
     {
          "algorithm": "Assign scores to bins based on the ratio of remaining capacity to item size, prioritizing bins with lower remaining capacity and higher index, and penalizing bins at maximum capacity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    remaining_capacity = bins - item\n    \n    # Assign scores based on the ratio of remaining capacity to item size\n    scores = remaining_capacity / item\n    \n    # Prioritize bins with lower remaining capacity and higher index\n    scores += np.arange(len(bins), 0, -1)\n    \n    # Penalize bins at maximum capacity\n    scores[max_capacity == bins] = -np.inf\n    \n    return scores",
          "objective": 0.04216,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm assigns scores to bins based on a combination of the remaining capacity, the number of items already assigned, and a penalty for bins at maximum capacity, then returns the scores for each bin in a numpy array.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = (bins - item) + (bins == np.max(bins)) * np.Inf\n    return scores",
          "objective": 0.04226,
          "other_inf": null
     },
     {
          "algorithm": "Common backbone idea: Assign a score to each bin based on certain criteria and choose the bin with the highest score for item assignment.}\n\n{New algorithm: Calculate the score for each bin by considering the remaining capacity of the bin divided by the product of the bin index and the item size, and return the scores for assignment.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = bins / (np.arange(len(bins)) + 1) / item\n    scores[bins == np.max(bins)] = 0\n    return scores",
          "objective": 0.04246,
          "other_inf": null
     },
     {
          "algorithm": "\nDescription: \nThe algorithm calculates the scores for each bin based on their rest capacities and assigns the item to the bin with the maximum score, minimizing the number of used bins.\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = bins / np.maximum((bins - item), 1)\n    scores[bins == bins.max()] = 0\n    return scores",
          "objective": 0.04306,
          "other_inf": null
     },
     {
          "algorithm": "Calculate the scores for each bin by taking the product of the rest capacity and the inverse of the index, and return the scores for assignment.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.multiply(bins, np.reciprocal(np.arange(1, len(bins)+1, dtype=float)))\n    return scores",
          "objective": 0.04407,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Calculate the score for each bin by considering the logarithm of the remaining capacity divided by the sum of the bin index and item size, penalizing bins at maximum capacity, and return the scores for assignment.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.log(bins / (np.arange(len(bins)) + item))\n    scores[bins == bins.max()] = -np.inf\n    return scores",
          "objective": 0.05031,
          "other_inf": null
     },
     {
          "algorithm": "T",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.zeros(len(bins))\n\n    # Calculate the score for each bin\n    for i in range(len(bins)):\n        if bins[i] != item:\n            scores[i] = 1 / (bins[i] - item)\n    \n    return scores",
          "objective": 0.05071,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Calculate the available capacity for each bin by subtracting the item size from the rest capacities of feasible bins, set the score to -1 for bins with rest capacity equal to the maximum capacity, and for the remaining feasible bins, set the score to a value inversely proportional to the remaining capacity, and return the scores for the bins for assignment.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    remaining_capacity = bins - item\n    \n    scores = np.zeros_like(bins)\n    scores[bins == max_capacity] = -1\n    scores[bins != max_capacity] = 1 / remaining_capacity[bins != max_capacity]\n    \n    return scores",
          "objective": 0.05131,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm will calculate the score for each bin based on the sum of the rest capacity and the inverse of the index, and return the scores for assignment.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = (bins + 1) / (np.arange(bins.size) + 1)\n    scores[bins == item] = 0\n    return scores",
          "objective": 0.05343,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm will calculate the score for each bin based on both the rest capacity and the inverse of the bin number, using a modified weighting factor, then return the scores for each bin for assignment.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = (bins/item) + (1/(np.arange(1, len(bins)+1))) * 1000\n    scores[bins == item] = 0\n    return scores",
          "objective": 0.05383,
          "other_inf": null
     },
     {
          "algorithm": "\nNew algorithm: \n1. Calculate the available capacity for each bin by subtracting the item size from the rest capacities of feasible bins. \n2. Set the score for each bin to 0 if the available capacity is less than the item size, otherwise set the score to the available capacity. \n3. If the rest capacity of a bin equals the maximum capacity, set the score to -1 to indicate that it will not be used. \n4. Return the scores for the bins for assignment. \n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    available_capacity = bins - item\n    scores = np.where(available_capacity < item, 0, available_capacity)\n    scores = np.where(bins == np.max(bins), -1, scores)\n    return scores",
          "objective": 0.05795,
          "other_inf": null
     },
     {
          "algorithm": "\n  The new algorithm will calculate the score for each bin based on the rest capacity, using a weighted average of the rest capacity and the inverse of the bin number, then return the scores for each bin for assignment. \n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    num_bins = len(bins)\n    weights = np.arange(1, num_bins + 1)\n    normalized_capacity = 1 - (bins / np.max(bins))\n    scores = normalized_capacity * weights\n    return scores",
          "objective": 0.05815,
          "other_inf": null
     },
     {
          "algorithm": "Assign scores based on the ratio of remaining capacity to item size, penalizing bins at maximum capacity",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.zeros_like(bins) # Create an array of zeros with the same shape as 'bins'\n    max_capacity = np.max(bins) # Find the maximum capacity among the bins\n\n    for i in range(len(bins)):\n        if bins[i] == max_capacity:\n            scores[i] = -1 # Penalize bins at maximum capacity\n        else:\n            scores[i] = bins[i] / item # Calculate the score based on the ratio of remaining capacity to item size\n    \n    return scores",
          "objective": 0.05987,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Calculate the score for each bin by considering the square root of the remaining capacity divided by the cube of the sum of the bin index and item size, penalizing bins at maximum capacity, and return the scores for assignment.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.zeros_like(bins, dtype=np.float64)\n    max_capacity = np.max(bins)\n\n    for i, rest_capacity in enumerate(bins):\n        if rest_capacity == max_capacity:\n            scores[i] = 0\n        else:\n            score = np.sqrt(rest_capacity) / (np.power(i + 1, 3) + np.power(item, 3))\n            scores[i] = score\n\n    return scores",
          "objective": 0.06097,
          "other_inf": null
     },
     {
          "algorithm": "The score function calculates the scores for each bin based on the ratio of its remaining capacity to the number of items already assigned to it, penalizing bins with maximum capacity to minimize the number of used bins.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = (bins - item) / np.arange(1, len(bins) + 1)\n    scores[bins == np.max(bins)] = -np.inf\n    return scores",
          "objective": 0.06359,
          "other_inf": null
     }
]