[
     {
          "algorithm": "N",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = bins % item\n    scores[scores == 0] = item\n    return scores",
          "objective": 0.01298,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm assigns items to bins based on a score function that calculates the remainder of each bin's capacity divided by the item's size, substituting zero scores with the item's size and returns an array of scores.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.where(bins == item, item, bins % item)\n    return scores",
          "objective": 0.02012,
          "other_inf": null
     },
     {
          "algorithm": "My new algorithm assigns scores to bins based on the reciprocal of the square root of the remaining capacity multiplied by the cube of the bin index, aiming to optimize bin assignment with a distinct scoring system.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.zeros_like(bins, dtype=float)\n    max_capacity = np.max(bins)\n    used_bins = np.sum(bins < max_capacity)\n    reciprocal_sqrt_rest_capacity = 1 / np.sqrt(bins - item)\n    scores = reciprocal_sqrt_rest_capacity * (np.power(bins, 3))\n    scores[bins == max_capacity] = 0\n    return scores",
          "objective": 0.03129,
          "other_inf": null
     },
     {
          "algorithm": "My new algorithm assigns scores to bins based on a combination of the ratio of the remaining capacity to the item size, the bin number, and the inverse of the remaining capacity, ensuring a unique and distinct scoring system from the existing algorithms.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    remaining_capacity = bins - item\n    ratio = remaining_capacity / item\n    bin_number = np.arange(len(bins))\n    inverse_capacity = 1 / remaining_capacity\n    scores = ratio + bin_number + inverse_capacity\n    return scores",
          "objective": 0.03632,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm calculates the scores by dividing the square of the item by remaining capacity minus bin size divided by item size, then subtracting index multiplied by item size.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = (item**2) / (bins - item) - np.arange(len(bins)) * item\n    return scores",
          "objective": 0.03854,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Assign scores to bins based on the ratio of the item size to the remaining capacity, subtracting the square of the bin number, ensuring a modified scoring system. Main steps: Compute the remaining capacity of each bin, calculate the ratio of the item size to the remaining capacity, subtract the square of the bin number, and return the scores for each bin.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    remaining_capacities = bins - item\n    \n    ratios = item / remaining_capacities\n    \n    bin_numbers = np.arange(len(bins)) + 1\n    bin_numbers_squared = bin_numbers**2\n    \n    scores = ratios - bin_numbers_squared\n    \n    return scores",
          "objective": 0.03864,
          "other_inf": null
     },
     {
          "algorithm": "Sum of squared divided by remaining capacity minus index multiplied by item size.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = (np.square(bins) / (bins - item)) - (np.arange(len(bins)) * item)\n    return scores",
          "objective": 0.03884,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Assign scores to bins based on the logarithm of the item size divided by the remaining capacity, multiplied by the bin number, ensuring a distinct scoring system. Main steps: Compute the remaining capacity of each bin, calculate the logarithm of the item size divided by the remaining capacity, multiply by the bin number, and return the scores for each bin.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.log(item / bins) * (np.arange(len(bins)) + 1)\n    return scores",
          "objective": 0.03914,
          "other_inf": null
     },
     {
          "algorithm": "New Algorithm: Assign scores to bins based on the ratio of the logarithm (base 3) of the item size to the remaining capacity, multiplied by the inverse of the square root of the bin index plus one, and return the scores for assignment.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.log(item) / (np.log(3) * (bins - item)) * (1 / np.sqrt(np.arange(bins.size) + 1))\n    return scores",
          "objective": 0.03934,
          "other_inf": null
     },
     {
          "algorithm": "Modified Algorithm: Assign scores to bins based on the ratio of the inverse of the remaining capacity squared divided by the bin index squared plus one, returning the scores for each bin for assignment.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = (1 / (bins**2 - item**2 + 1)) / (np.arange(len(bins))**2 + 1)\n    return scores",
          "objective": 0.03944,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Assign scores to bins based on the sum of the item size and the inverse of the remaining capacity, multiplied by the bin index plus one, ensuring a unique scoring system. Main steps: Compute the remaining capacity of each bin, calculate the sum of the item size and the inverse of the remaining capacity, multiply it by the bin index plus one, and return the scores for each bin.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    remaining_capacity = bins - item\n    scores = (item + 1 / remaining_capacity) * (np.arange(len(bins)) + 1)\n    return scores",
          "objective": 0.03964,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm assigns scores to bins based on the ratio of the item size to the remaining capacity, multiplied by the inverse of the bin index plus three, and returns the scores for assignment.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = (item / (bins - item)) * (1 / (np.arange(len(bins)) + 1) + 3)\n    return scores",
          "objective": 0.03974,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm computes the score for each bin as the ratio between the item and the remaining capacity of the bin, and then assigns the item to the bin with the highest score.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = item / bins\n    return scores",
          "objective": 0.03984,
          "other_inf": null
     },
     {
          "algorithm": "Assign scores to bins based on the exponential of the sum of the item size and the remaining capacity, divided by the square root of the bin index plus two.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.exp((item + bins) / np.sqrt(np.arange(len(bins)) + 2))\n    scores[bins == max(bins)] = -np.inf\n    return scores",
          "objective": 0.04004,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm assigns a score to each bin based on the difference between the item size and the logarithm (base 10) of the bin index plus one, divided by the remaining capacity, and returns the scores for assignment.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = ((item - np.log10(np.arange(1, len(bins)+1))) / bins).astype(np.float32)\n    return scores",
          "objective": 0.04014,
          "other_inf": null
     },
     {
          "algorithm": "N",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.zeros_like(bins)\n    max_capacity = np.max(bins)\n    used_bins = np.where(bins != max_capacity)[0]\n    scores[used_bins] = ((max_capacity - bins[used_bins]) / max_capacity) * item\n    return scores",
          "objective": 0.04025,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm assigns scores to bins based on the ratio of the remaining capacity to the square root of the bin index plus two, returning the scores for each bin for assignment.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = bins / np.sqrt(np.arange(len(bins)) + 2)\n    scores[bins == bins.max()] = 0\n    return scores",
          "objective": 0.04035,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm assigns scores to bins based on the ratio of the remaining capacity to the square root of the bin index plus one, returning the scores for each bin for assignment.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = bins / np.sqrt(np.arange(len(bins)) + 1)\n    scores[bins == bins.max()] = 0\n    return scores",
          "objective": 0.04045,
          "other_inf": null
     },
     {
          "algorithm": "Modified Algorithm: Assign scores to bins based on the inverse of the remaining capacity divided by the bin index plus one, returning the scores for each bin for assignment.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = (1 / (bins - item + 1)) / (np.arange(len(bins)) + 1)\n    return scores",
          "objective": 0.04055,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Assign scores to bins based on the ratio of the sum of the item size and bin capacity to the cube root of the bin index, excluding bins with rest capacity equal to the maximum capacity, and return the scores for each bin for assignment.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = (item + bins) / np.cbrt(range(1, len(bins)+1))\n    scores[bins == bins.max()] = -np.inf\n    return scores",
          "objective": 0.04065,
          "other_inf": null
     }
]