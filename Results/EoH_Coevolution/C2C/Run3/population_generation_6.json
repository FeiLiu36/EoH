[
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.zeros_like(bins)\n    max_capacity = np.max(bins)\n    scores[bins >= item] = item / (bins[bins >= item] - item + 1)\n    return scores",
          "objective": 0.03914,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_bin = np.max(bins)\n    scores = np.zeros_like(bins)\n    mask = bins < max_bin\n    scores[mask] = bins[mask] / (bins[mask] - item + 1)\n    return scores",
          "objective": 0.03924,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.where(bins == bins.max(), 0, bins / (bins - item + 1))\n    return scores",
          "objective": 0.03984,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = -bins/item + (bins == bins.max())\n    scores[bins < item] = 0\n    return scores",
          "objective": 0.04035,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_score = np.max(bins)\n    scores = np.zeros_like(bins)\n    \n    scores[bins >= item] = (item / bins[bins >= item]) - (max_score == bins)\n    \n    return scores",
          "objective": 0.04095,
          "other_inf": null
     },
     {
          "algorithm": "\nNew algorithm: The score function will calculate the scores for each bin based on the remaining capacity, with a penalty for bins with maximum capacity to minimize the number of used bins.\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = (max_capacity - bins) + (bins == max_capacity) * item\n    return scores",
          "objective": 0.04105,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.zeros_like(bins)\n    indices = np.where(bins >= item)\n    scores[indices] = -bins[indices]/item + (bins[indices] == bins[indices].max())\n    return scores",
          "objective": 0.04216,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.zeros_like(bins)\n    bins = bins - item\n    mask = bins == np.max(bins)\n    scores[mask] = -99999999\n    return scores",
          "objective": 0.04226,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    mask = bins == max_capacity\n    scores = np.zeros_like(bins)\n    scores[~mask] = (bins[~mask] / np.maximum(bins[~mask] - item, 1))\n    return scores",
          "objective": 0.04256,
          "other_inf": null
     },
     {
          "algorithm": "\nDescription: \nThe algorithm calculates the scores for each bin based on their rest capacities and assigns the item to the bin with the maximum score, minimizing the number of used bins.\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = bins / np.maximum((bins - item), 1)\n    scores[bins == bins.max()] = 0\n    return scores",
          "objective": 0.04306,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = (bins - item - 2 * np.arange(len(bins))).astype(float)\n    scores[bins == max_capacity] = -2 * np.arange(len(bins))[bins == max_capacity]\n    return scores",
          "objective": 0.04507,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = np.zeros_like(bins)\n\n    mask = bins < max_capacity\n    scores[mask] = (max_capacity - item) / (max_capacity - bins[mask])\n\n    return scores",
          "objective": 0.04588,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the scores\n    scores = np.zeros_like(bins)\n    mask = bins > item\n    scores[mask] = bins[mask] / (bins[mask] - item)\n    scores[bins == bins.max()] = 0\n    \n    return scores",
          "objective": 0.04709,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.zeros_like(bins)\n    max_capacity = np.max(bins)\n    mask = bins < max_capacity\n    \n    scores[mask] = bins[mask] / (bins[mask] - item + 1)\n    scores[bins == item] = -1\n    \n    return scores",
          "objective": 0.0497,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    mask = bins == max_capacity\n    scores = np.zeros_like(bins)\n    scores[~mask] = bins[~mask] / (bins[~mask] - item)\n    return scores",
          "objective": 0.0498,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = item / bins\n    scores[bins == item] = -1\n    return scores",
          "objective": 0.05071,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.where(bins == np.max(bins), 0, (bins - item) / np.maximum(bins - item, 1))\n    return scores",
          "objective": 0.05091,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.zeros_like(bins)\n    max_capacity = np.max(bins)\n    mask = bins == max_capacity\n    scores[~mask] = item / (bins[~mask] - item) - (2 * np.arange(len(bins)))[~mask]\n    return scores",
          "objective": 0.05242,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.maximum((bins - item) / np.maximum(bins - item, 1), 0)\n    return scores",
          "objective": 0.05383,
          "other_inf": null
     },
     {
          "algorithm": "\nNew algorithm: \n1. Calculate the available capacity for each bin by subtracting the item size from the rest capacities of feasible bins. \n2. Set the score for each bin to 0 if the available capacity is less than the item size, otherwise set the score to the available capacity. \n3. If the rest capacity of a bin equals the maximum capacity, set the score to -1 to indicate that it will not be used. \n4. Return the scores for the bins for assignment. \n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    available_capacity = bins - item\n    scores = np.where(available_capacity < item, 0, available_capacity)\n    scores = np.where(bins == np.max(bins), -1, scores)\n    return scores",
          "objective": 0.05795,
          "other_inf": null
     }
]