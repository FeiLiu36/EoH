[
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = np.zeros_like(bins)\n    mask = bins < max_capacity\n    \n    diff = bins - item\n    scores[mask] = (item * item + 5) * np.exp(-np.abs(diff[mask] - item)) + np.log(item + 10) / (diff[mask] + 0.001)\n    scores[diff == item] = item\n    \n    return scores",
          "objective": 0.0327,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = np.zeros_like(bins)\n    mask = bins < max_capacity\n    diff = bins - item\n    \n    scores[mask] = (10 * item + 5) * np.exp(-np.abs(diff[mask] - item)) + np.log(item + 10) / (diff[mask] + 0.001)\n    scores[diff == item] = item\n    \n    return scores",
          "objective": 0.0328,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = np.zeros_like(bins)\n    diff = bins - item\n    used_bins = bins < max_capacity\n\n    scores[used_bins] = (2 * item + 5) * np.exp(-np.abs(diff[used_bins] - item)) + np.log(item + 1) / (diff[used_bins] + 0.001)\n    scores[diff == item] = item * (diff[diff == item] + 3) / (item + 1)\n     \n    return scores",
          "objective": 0.03421,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = np.zeros_like(bins)\n    diff = bins - item\n\n    used_bins = bins < max_capacity\n    scores[used_bins] = (2 * item + 5) * np.exp(-np.abs(diff[used_bins] - item)) + np.log(item + 2) / (diff[used_bins] + 0.001)\n    scores[diff == item] = item * (diff[diff == item] + 3) / (item + 1)\n\n    return scores",
          "objective": 0.03441,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = np.zeros_like(bins)\n    \n    for i, bin_capacity in enumerate(bins):\n        if bin_capacity == max_capacity:\n            scores[i] = 0\n        else:\n            diff = bin_capacity - item\n            score = (3 * item + 7) * np.exp(-np.abs(diff - item)) + np.log(item + 2) / (diff + 0.001)\n            if diff == item:\n                scores[i] = item * (diff + 4) / (item + 2)\n            else:\n                scores[i] = score\n    \n    return scores",
          "objective": 0.03451,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    diff = bins - item\n    scores = np.zeros_like(bins)\n\n    used_bins = bins < max_capacity\n    scores[used_bins] = (3 * item + 2) * np.exp(-np.abs(diff[used_bins] - item)) + np.log(item + 1) / (diff[used_bins] + 0.001)\n\n    return scores",
          "objective": 0.03461,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = np.zeros_like(bins)\n    diff = bins - item\n\n    used_bins = bins < max_capacity\n    scores[used_bins] = (3 * item + 7) * np.exp(-np.abs(diff[used_bins] - item)) + np.log(item + 1) / (diff[used_bins] + 0.001)\n    scores[diff == item] = item * (diff[diff == item] + 4) / (item + 2)\n\n    return scores",
          "objective": 0.03471,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    diff = bins - item\n    scores = np.zeros_like(bins)\n\n    used_bins = bins < max_capacity\n    scores[used_bins] = (diff[used_bins] + 1) / (item + 0.001)\n    scores[diff == item] = item\n    scores[diff < item] = item / (diff[diff < item]**2 + 0.001)\n\n    return scores",
          "objective": 0.03481,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = np.zeros_like(bins)\n\n    used_bins = bins < max_capacity\n    diff = bins - item\n\n    scores[used_bins] = (2 * item - np.abs(diff[used_bins] - item) + 1) * np.exp(-np.abs(diff[used_bins] - item)) + np.log(item + 1) / (diff[used_bins] + 0.001)\n\n    return scores",
          "objective": 0.03491,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = np.zeros_like(bins)\n\n    mask = bins < max_capacity\n    diff = bins - item\n\n    scores[mask] = item * np.exp(-np.abs(diff[mask] - item)) + np.log(item + 1) / (diff[mask] + 0.001)\n\n    return scores",
          "objective": 0.03501,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = np.zeros_like(bins)\n    used_bins = bins < max_capacity\n    diff = bins - item\n\n    scores[used_bins] = (2 * item * np.exp(-np.abs(diff[used_bins] - item)) + np.log(item + 1) / (diff[used_bins] + 0.001)) * (item != diff[used_bins])\n\n    return scores",
          "objective": 0.03511,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    diff = bins - item\n    scores = np.zeros_like(bins)\n\n    used_bins = bins < max_capacity\n    scores[used_bins] = (diff[used_bins] + 1) / (item + 0.001)\n    scores[item == bins] = item\n\n    return scores",
          "objective": 0.03532,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    diff = bins - item\n    scores = np.zeros_like(bins)\n\n    used_bins = bins < max_capacity\n    scores[used_bins] = (diff[used_bins] + 1e-10) / (item + 1e-10)\n    scores[item == bins] = item\n\n    return scores",
          "objective": 0.03572,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = np.zeros_like(bins)\n    diff = bins - item\n    used_bins = bins < max_capacity\n\n    scores[used_bins] = (2 * item + 5) * np.exp(-np.abs(diff[used_bins] - item)) + np.log(item + 1) / (diff[used_bins] + 0.001)\n    scores[diff == item] = item * (diff[diff == item] + 3) / (item + 1)\n    scores[(item == bins) | (np.max(bins) == bins)] = 0\n    scores[diff < item] = item / (diff[diff < item]**2 + 0.001)\n    \n    return scores",
          "objective": 0.03592,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    rest_capacity = bins - item\n\n    scores = np.zeros_like(bins)\n    scores[rest_capacity > 0] = rest_capacity[rest_capacity > 0] / (item + 1)\n    scores[(item == bins) | (np.max(bins) == bins)] = 0\n    scores[item == bins] = item\n\n    return scores",
          "objective": 0.03602,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = np.zeros_like(bins)\n    diff = bins - item\n\n    scores[diff < item] = item / (diff[diff < item]**2 + 0.001)\n    scores[diff == item] = item\n    scores[item == bins] = item\n    \n    return scores",
          "objective": 0.03713,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = np.zeros_like(bins)\n    diff = bins - item\n\n    scores[diff < item] = item / (diff[diff < item]**2 + 0.001)\n    scores[diff == item] = item\n\n    return scores",
          "objective": 0.03723,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    diff = bins - item\n    scores = np.zeros_like(bins)\n\n    used_bins = bins < max_capacity\n    scores[used_bins] = np.log(item + 1) / (diff[used_bins] + 0.001)\n    scores[diff == item] = item\n\n    return scores",
          "objective": 0.03743,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = np.zeros_like(bins)\n    mask = bins < max_capacity\n    diff = bins - item\n    \n    scores[mask] = np.log(item) / (diff[mask] + 0.001)\n    scores[diff == item] = item\n    \n    return scores",
          "objective": 0.03753,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = np.where(bins == max_capacity, -1, item - np.abs(bins - item) + 1)\n    return scores",
          "objective": 0.03763,
          "other_inf": null
     }
]