[
     {
          "algorithm": " Common backbone idea: The algorithms aim to optimize the usage of bins by assigning items to bins with the highest scores, considering the restrictions of bin capacities and the number of used bins.\n\nNew algorithm: \"Adaptive Proportional Score with Restricted Capacity\" (APSRC)\n\nDescription: APSRC assigns an item to the bin with the highest adaptive proportional score, considering the rest capacity of each bin, while ensuring that the total capacity of all bins does not exceed a predetermined threshold. The score for each bin is calculated as the ratio of the item size to the remaining capacity, adjusted by a factor that decreases as the item size increases.\n\nPython implementation:\n```\n",
          "code": "import numpy as np\n\ndef apsrc_score(item, bins):\n    # Calculate the restricted capacity for each bin\n    rest_capacity = bins - item\n    \n    # Calculate the adaptive factor for each bin\n    adaptive_factor = np.exp(-np.sqrt(item))\n    \n    # Calculate the scores for each bin\n    scores = np.clip(rest_capacity, 0, 1) * item * adaptive_factor\n    \n    return scores",
          "objective": 0.01127,
          "other_inf": null
     },
     {
          "algorithm": " Common backbone idea: The provided algorithms aim to optimize the usage of bins by assigning items to bins with the highest scores, considering the restrictions of bin capacities and the number of used bins.\n\nNew algorithm: \"Proportional Score with Restricted Capacity\" (PSRC)\n\nDescription: PSRC assigns an item to the bin with the highest proportional score, considering the rest capacity of each bin, while ensuring that the total capacity of all bins does not exceed a predetermined threshold.\n\nPython implementation:\n```\n",
          "code": "import numpy as np\n\ndef psrc_score(item, bins):\n    # Calculate the restricted capacity for each bin\n    rest_capacity = bins - item\n    \n    # Calculate the proportional scores for each bin\n    scores = np.zeros_like(bins)\n    scores[rest_capacity > 0] = (item / (bins[rest_capacity > 0] - item + 1))\n    \n    return scores",
          "objective": 0.01962,
          "other_inf": null
     },
     {
          "algorithm": " Common backbone idea: The provided algorithms aim to optimize the usage of bins by assigning items to bins with the highest scores, considering the restrictions of bin capacities and the number of used bins.\n\nNew algorithm: \"Adaptive Score with Restricted Capacity\" (ASRC)\n\nDescription: ASRC adaptively assigns an item to the bin with the highest score, considering the rest capacity of each bin, while ensuring that the total capacity of all bins does not exceed a predetermined threshold. The score for each bin is calculated as the maximum value of the item size minus the remaining capacity, multiplied by a factor that decreases as the number of used bins increases.\n\nPython implementation:\n```\n",
          "code": "import numpy as np\n\ndef asrc_score(item, bins):\n    # Calculate the restricted capacity for each bin\n    rest_capacity = bins - item\n    \n    # Calculate the scores for each bin\n    scores = np.maximum(item - rest_capacity, 0) * (1 - np.log(np.sum(bins > 0)))\n    \n    return scores",
          "objective": 0.03059,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm uses a combination of the item size and the rest capacity of each bin to calculate the score for each bin, with a focus on minimizing the number of used bins.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the score for each bin based on the item size and rest capacity\n    scores = np.ones_like(bins)\n    scores[bins != bins.max()] = (item / (bins[bins != bins.max()] - item + 1))\n    return scores",
          "objective": 0.03803,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm uses a combination of the item size and the rest capacity of each bin to calculate the score for each bin, with a focus on minimizing the number of used bins.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the score for each bin based on the item size and rest capacity\n    scores = np.ones_like(bins)\n    scores[bins != bins.max()] = (item / (bins[bins != bins.max()] - item + 1e-6))\n    return scores",
          "objective": 0.03823,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: \"Bin-based Scoring with Exponential Weighting\" (BINESW)",
          "code": "import numpy as np\n\ndef binesw_score(item, bins):\n    # Calculate the exponential weighting for each bin\n    weights = np.exp(-np.abs(bins - item))\n    \n    # Calculate the scores for each bin by multiplying the exponential weighting with the item size\n    scores = weights * item\n    \n    return scores",
          "objective": 0.03833,
          "other_inf": null
     },
     {
          "algorithm": "\nThe algorithm assigns an item to the bin with the maximum score and updates the rest capacity of the bin accordingly, until all items are assigned. The score for each bin is calculated as the bin's current capacity divided by the difference between the bin's capacity and the item size, plus the number of times the bin has been used.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = bins / (bins - item) + np.arange(len(bins))\n    return scores",
          "objective": 0.03843,
          "other_inf": null
     },
     {
          "algorithm": " Common backbone idea: The algorithms aim to optimize the usage of bins by assigning items to bins with the highest scores, considering the restrictions of bin capacities and the number of used bins.\n\nNew algorithm: \"Dynamic Score with Adaptive Threshold\" (DSTAT)\n\nDescription: DSTAT assigns an item to the bin with the highest dynamic score, adaptively adjusting the threshold based on the item size and the rest capacity of each bin, while ensuring that the total capacity of all bins does not exceed a predetermined threshold. The score for each bin is calculated as the product of the item size and the rest capacity, divided by the sum of the item size and the threshold.\n\nPython implementation:\n```\n",
          "code": "import numpy as np\n\ndef dstat_score(item, bins):\n    # Calculate the threshold for each bin\n    threshold = np.minimum(bins, item)\n    \n    # Calculate the scores for each bin\n    scores = (item * bins) / (threshold + item)\n    \n    return scores",
          "objective": 0.03854,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: \"Bin-based Scoring with Item-specific Weights\"",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the item-specific weights for each bin\n    weights = np.ones_like(bins)\n    weights[bins != bins.max()] = (item / (bins[bins != bins.max()] - item + 1)) ** 2\n    \n    # Assign an item to the bin with the highest weighted score\n    scores = np.zeros_like(bins)\n    scores[weights == weights.max()] = 1\n    \n    return scores",
          "objective": 0.03864,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm uses a combination of the item size and the rest capacity of each bin to calculate the score for each bin, with a focus on minimizing the number of used bins.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the logarithmic scores for each bin based on the item size and rest capacity\n    scores = np.log(np.ones_like(bins))\n    scores[bins != bins.max()] = np.log((item / (bins[bins != bins.max()] - item + 1)))\n    return scores",
          "objective": 0.03894,
          "other_inf": null
     },
     {
          "algorithm": " Common backbone idea: The algorithms aim to assign items to bins while minimizing the number of used bins. They use various methods to calculate scores for each bin based on the remaining capacity and the item size.\n\nNew algorithm: \"Maximum-Minimum Score with Restricted Capacity\" (MMSC)\n\nDescription: MMSC assigns an item to the bin with the maximum score, considering the rest capacity of each bin, while ensuring that the total capacity of all bins does not exceed a predetermined threshold. The score for each bin is calculated as the minimum of the maximum capacity and the item size divided by the remaining capacity.\n\nPython implementation:\n```\n",
          "code": "import numpy as np\n\ndef mmsc_score(item, bins):\n    # Calculate the scores for each bin using a linear combination of the item size and the bin capacity\n    scores = np.dot(item, bins)\n    \n    return scores",
          "objective": 0.03904,
          "other_inf": null
     },
     {
          "algorithm": "\nThe algorithm assigns an item to the bin with the maximum score, considering the rest capacity of each bin, in order to minimize the number of used bins. \n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.zeros_like(bins)\n    scores[bins != bins.max()] = item / (bins[bins != bins.max()] - item + 1)\n    return scores",
          "objective": 0.03914,
          "other_inf": null
     },
     {
          "algorithm": " Common backbone idea: The provided algorithms aim to optimize the usage of bins by assigning items to bins with the highest scores, considering the restrictions of bin capacities and the number of used bins.\n\nNew algorithm: \"Minimax Score with Restricted Capacity\" (MMRC)\n\nDescription: MMRC assigns an item to the bin with the minimum score, considering the rest capacity of each bin, while ensuring that the total capacity of all bins does not exceed a predetermined threshold.\n\nPython implementation:\n```",
          "code": "import numpy as np\n\ndef mmrc_score(item, bins):\n    # Calculate the minimum score for each bin\n    min_score = np.min(bins)\n    \n    # Calculate the restricted capacity for each bin\n    rest_capacity = bins - item\n    \n    # Calculate the scores for each bin\n    scores = np.where(rest_capacity > 0, min_score * rest_capacity, 0)\n    \n    return scores",
          "objective": 0.03924,
          "other_inf": null
     },
     {
          "algorithm": " Common backbone idea: The algorithms aim to assign items to bins while minimizing the number of used bins. They use various methods to calculate scores for each bin based on the remaining capacity and the item size.\n\nNew algorithm: \"Maximum-Minimum Score with Restricted Capacity\" (MMSC)\n\nDescription: MMSC assigns an item to the bin with the maximum score, considering the rest capacity of each bin, while ensuring that the total capacity of all bins does not exceed a predetermined threshold. The score for each bin is calculated as the minimum of the maximum capacity and the item size divided by the remaining capacity.\n\nPython implementation:\n```\n",
          "code": "import numpy as np\n\ndef mmsc_score(item, bins):\n    # Calculate the restricted capacity for each bin\n    rest_capacity = bins - item\n    \n    # Calculate the scores for each bin\n    scores = np.clip(bins, item, rest_capacity)\n    \n    return scores",
          "objective": 0.03934,
          "other_inf": null
     },
     {
          "algorithm": " New algorithm: \"Dynamic Score with Adaptive Threshold\" (DSTAT)\n\nDescription: DSTAT assigns an item to the bin with the highest dynamic score, considering the adaptive threshold of each bin, while ensuring that the total capacity of all bins does not exceed a predetermined threshold.\n\nPython implementation:\n```",
          "code": "import numpy as np\n\ndef dstat_score(item, bins):\n    # Calculate the adaptive threshold for each bin\n    threshold = np.minimum(bins, item)\n    \n    # Calculate the dynamic scores for each bin\n    scores = np.zeros_like(bins)\n    scores[threshold > 0] = (item / (threshold[threshold > 0] + 1))\n    \n    return scores",
          "objective": 0.03944,
          "other_inf": null
     },
     {
          "algorithm": " New algorithm: \"Maximum Score with Restricted Capacity\" (MSRC)\n\nDescription: MSRC assigns an item to the bin with the highest maximum score, considering the rest capacity of each bin, while ensuring that the total capacity of all bins does not exceed a predetermined threshold. The score for each bin is calculated as the maximum value of the item size minus the remaining capacity.\n\nPython implementation:\n```",
          "code": "import numpy as np\n\ndef msrc_score(item, bins):\n    # Calculate the restricted capacity for each bin\n    rest_capacity = bins - item\n    \n    # Calculate the scores for each bin\n    scores = np.maximum(item - rest_capacity, 0)\n    \n    return scores",
          "objective": 0.03954,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm uses a combination of the item size and the rest capacity of each bin to calculate the score for each bin.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.zeros_like(bins)\n    scores[bins != bins.max()] = (item * bins[bins != bins.max()]) / (bins[bins != bins.max()] - item + 1)\n    return scores",
          "objective": 0.03964,
          "other_inf": null
     },
     {
          "algorithm": "\nThe algorithm assigns an item to the bin with the maximum score, considering the rest capacity of each bin, in order to minimize the number of used bins. \n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.zeros_like(bins)\n    scores[bins != bins.max()] = np.log(item / (bins[bins != bins.max()] - item + 1))\n    return scores",
          "objective": 0.03974,
          "other_inf": null
     },
     {
          "algorithm": " New algorithm: \"Maximize the minimum bin size\"\n\nMain steps:\n\n1. Calculate the minimum bin size by subtracting the item size from the maximum bin size.\n2. Calculate the scores for each bin by dividing the minimum bin size by the rest capacity of each bin.\n3. Return the scores.\n\nPython implementation:\n```",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = item / bins\n    return scores",
          "objective": 0.03984,
          "other_inf": null
     },
     {
          "algorithm": " Common backbone idea: The algorithms aim to optimize the usage of bins by assigning items to bins with the highest scores, considering the restrictions of bin capacities and the number of used bins.\n\nNew algorithm: \"Proportional Score with Restricted Capacity\" (PSRC)\n\nDescription: PSRC assigns an item to the bin with the highest proportional score, considering the rest capacity of each bin, while ensuring that the total capacity of all bins does not exceed a predetermined threshold. The score for each bin is calculated as the ratio of the item size to the remaining capacity.\n\nPython implementation:\n```\n",
          "code": "import numpy as np\n\ndef psrc_score(item, bins):\n    # Calculate the restricted capacity for each bin\n    rest_capacity = bins - item\n    \n    # Calculate the scores for each bin\n    scores = np.clip(rest_capacity, 0, 1) * item\n    \n    return scores",
          "objective": 0.03994,
          "other_inf": null
     }
]