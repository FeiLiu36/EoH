[
     {
          "algorithm": "Modified algorithm: Calculate the scores for each bin by taking the minimum between the rest capacity of the bin and the size of the item. Then, multiply the scores by a weight that is inversely proportional to the bin's maximum capacity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the scores for each bin\n    scores = np.minimum(bins, item) * (1 / bins)\n    \n    # Return the scores\n    return scores",
          "objective": 0.03984,
          "other_inf": null
     },
     {
          "algorithm": "Algorithm 6: Score each bin by subtracting the squared difference between the bin's rest capacity and half of the bin's maximum capacity from the bin's maximum capacity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the squared difference between the bin's rest capacity and half of the bin's maximum capacity\n    diff = (bins - item) ** 2\n    \n    # Subtract the squared difference from the bin's maximum capacity\n    scores = bins - diff\n    \n    # Return the scores for the bins\n    return scores",
          "objective": 0.04045,
          "other_inf": null
     },
     {
          "algorithm": "\nNew algorithm: The score function will calculate the scores for each bin based on the remaining capacity, with a penalty for bins with maximum capacity to minimize the number of used bins.\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = (max_capacity - bins) + (bins == max_capacity) * item\n    return scores",
          "objective": 0.04105,
          "other_inf": null
     },
     {
          "algorithm": "Modified algorithm calculates scores inversely proportional to the rest capacities of bins, prioritizing bins with higher remaining capacity to minimize the number of used bins.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the inverse of the rest capacities of the bins\n    inv_rest_capacities = 1 / (bins - item)\n    \n    # Prioritize bins with higher remaining capacity\n    scores = np.argsort(inv_rest_capacities)\n    \n    # Return the scores\n    return scores",
          "objective": 0.04155,
          "other_inf": null
     },
     {
          "algorithm": "\nNew algorithm: \n1. Initialize an empty array named 'scores' with the same length as the input array 'bins'.\n2. Calculate the scores for each bin by taking the minimum between the rest capacity of the bin and the size of the item.\n3. Set the score of a bin with maximum capacity to a very small negative value to prevent it from being used.\n4. Return the 'scores' array.\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.minimum(bins, item)\n    max_capacity_bin_index = np.argmax(bins)\n    scores[max_capacity_bin_index] = -99999999\n    return scores",
          "objective": 0.04226,
          "other_inf": null
     },
     {
          "algorithm": "\nDescription: \nThe algorithm calculates the scores for each bin based on their rest capacities and assigns the item to the bin with the maximum score, minimizing the number of used bins.\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = bins / np.maximum((bins - item), 1)\n    scores[bins == bins.max()] = 0\n    return scores",
          "objective": 0.04306,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Calculate scores based on a weighted combination of the normalized available capacity and the inverse of the bin index, prioritizing bins with higher normalized capacity and lower index.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Normalize the available capacity of each bin\n    norm_capacity = bins / np.max(bins)\n    \n    # Calculate the inverse of the bin index\n    inv_index = 1 / (np.arange(len(bins)) + 1)\n    \n    # Weighted combination of normalized available capacity and inverse of bin index\n    scores = norm_capacity * inv_index\n    \n    # Return the scores for each bin\n    return scores",
          "objective": 0.04407,
          "other_inf": null
     },
     {
          "algorithm": "Prioritize bins with low fullness level, then high remaining capacity. Penalize bins with high fullness level, then zero remaining capacity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the fullness level of each bin\n    fullness = (bins - item) / bins\n    \n    # Prioritize bins with low fullness level\n    priority_score = 1 - fullness\n    \n    # Penalize bins with high fullness level\n    penalty_score = fullness ** 2\n    \n    # Combine the priority and penalty scores\n    scores = priority_score + penalty_score\n    \n    # Normalize the scores to ensure they are between 0 and 1\n    scores = scores / np.max(scores)\n    \n    return scores",
          "objective": 0.04417,
          "other_inf": null
     },
     {
          "algorithm": "\nNew algorithm: \n1. Calculate the ratio of item size to each bin's rest capacity.\n2. Calculate the score for each bin based on the ratio and the condition of the rest capacity.\n3. Return the scores for the bins for assignment. \n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.zeros_like(bins, dtype=float)\n    for i in range(len(bins)):\n        if bins[i] == item:\n            scores[i] = -1\n        elif bins[i] > item:\n            scores[i] = item / bins[i]\n    return scores",
          "objective": 0.05071,
          "other_inf": null
     },
     {
          "algorithm": "The score function prioritizes bins with higher remaining capacity and lower fullness level, while penalizing bins with maximum capacity and high fullness level to minimize the number of used bins.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the remaining capacity and fullness level for each bin\n    remaining_capacity = bins - item\n    fullness_level = (bins - remaining_capacity) / bins\n    \n    # Prioritize bins with higher remaining capacity and lower fullness level\n    priority = np.where(remaining_capacity > 0, remaining_capacity, 0) + \\\n                   np.where(fullness_level < 1, 1 - fullness_level, 0)\n    \n    # Penalize bins with maximum capacity and high fullness level\n    penalty = np.where(bins == max(bins), 1, 0) + \\\n                  np.where(fullness_level >= 0.5, 1, 0)\n    \n    # Combine the priority and penalty scores\n    scores = priority * (1 - penalty)\n    \n    return scores",
          "objective": 0.05544,
          "other_inf": null
     },
     {
          "algorithm": "\nNew algorithm: \n1. Calculate the available capacity for each bin by subtracting the item size from the rest capacities of feasible bins. \n2. Set the score for each bin to 0 if the available capacity is less than the item size, otherwise set the score to the available capacity. \n3. If the rest capacity of a bin equals the maximum capacity, set the score to -1 to indicate that it will not be used. \n4. Return the scores for the bins for assignment. \n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    available_capacity = bins - item\n    scores = np.where(available_capacity < item, 0, available_capacity)\n    scores = np.where(bins == np.max(bins), -1, scores)\n    return scores",
          "objective": 0.05795,
          "other_inf": null
     },
     {
          "algorithm": "\n  The new algorithm will calculate the score for each bin based on the rest capacity, using a weighted average of the rest capacity and the inverse of the bin number, then return the scores for each bin for assignment. \n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    num_bins = len(bins)\n    weights = np.arange(1, num_bins + 1)\n    normalized_capacity = 1 - (bins / np.max(bins))\n    scores = normalized_capacity * weights\n    return scores",
          "objective": 0.05815,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: The score function will calculate the scores for each bin based on a combination of rest capacity and bin index, prioritizing bins with higher rest capacity and assigning a reasonable penalty for bins with a high index to encourage using fewer bins.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the scores for each bin based on a combination of rest capacity and bin index\n    scores = np.zeros(len(bins))\n    for i, bin in enumerate(bins):\n        if bin >= item:\n            scores[i] = (bin - item) / (i + 1)\n        else:\n            scores[i] = 0\n    \n    # Penalize bins with high indices to encourage using fewer bins\n    penalties = np.arange(len(bins)) ** 2\n    scores -= penalties\n    \n    return scores",
          "objective": 0.06027,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Prioritizing bins with smaller index and lower fullness level, penalizing bins with higher fullness level and maximum capacity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the fullness level of each bin\n    fullness = (bins - item) / bins\n    \n    # Penalize bins with high fullness levels\n    penalty = np.maximum(0, fullness - 0.5) ** 2\n    \n    # Prioritize bins with smaller indices and lower fullness levels\n    priority = np.minimum(fullness, 0.5) + np.arange(len(bins)) * 0.1\n    \n    # Calculate the score for each bin\n    scores = priority - penalty\n    \n    return scores",
          "objective": 0.06329,
          "other_inf": null
     },
     {
          "algorithm": "The score function will prioritize bins with higher rest capacity and lower index, while penalizing bins with maximum capacity and fullness level to minimize the number of used bins.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the rest capacity of each bin\n    rest_capacity = bins - item\n    \n    # Calculate the fullness level of each bin\n    fullness_level = (rest_capacity / bins) * 100\n    \n    # Prioritize bins with higher rest capacity and lower index\n    priority = np.argsort(-rest_capacity) + np.argsort(fullness_level)\n    \n    # Penalize bins with maximum capacity and fullness level\n    penalty = np.where(np.logical_and(rest_capacity == bins, fullness_level == 100), 100, 0)\n    \n    # Calculate the final score for each bin\n    scores = priority - penalty\n    \n    return scores",
          "objective": 0.06721,
          "other_inf": null
     },
     {
          "algorithm": "\nDefine a function named score that takes in inputs 'item' and 'bins' and returns the output 'scores' as a Numpy array, implementing a novel scoring algorithm to assign the item to the bins with the maximum score while minimizing the number of used bins.\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.zeros_like(bins)\n    feasible_bins = np.where(bins >= item)[0]\n    \n    if len(feasible_bins) == 0:\n        return scores\n    \n    min_capacity = np.min(bins[feasible_bins])\n    \n    for i in feasible_bins:\n        if bins[i] == min_capacity:\n            scores[i] = -1\n        else:\n            scores[i] = (bins[i] - item) / bins[i]\n    \n    return scores",
          "objective": 0.06962,
          "other_inf": null
     },
     {
          "algorithm": "The score function will prioritize bins with higher rest capacity, lower index, and a penalty for bins with maximum capacity to minimize the number of used bins.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the rest capacity of each bin\n    rest_capacity = np.maximum(0, bins - item)\n    \n    # Prioritize bins with higher rest capacity\n    priority = np.argsort(-rest_capacity)\n    \n    # Penalize bins with maximum capacity\n    penalty = np.where(bins == bins.max(), 1, 0)\n    \n    # Combine the priority and penalty scores\n    scores = priority * (1 - penalty)\n    \n    return scores",
          "objective": 0.07023,
          "other_inf": null
     },
     {
          "algorithm": "\nNew algorithm: The score function will calculate the scores for each bin based on the rest capacity, prioritizing bins with higher rest capacity and lower index, and returning a Numpy array of scores for assignment. \n\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = bins * (bins == np.max(bins)) - (2 * np.arange(len(bins)))\n    return scores",
          "objective": 0.07073,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Calculate scores using a scoring function that prioritizes bins with smaller rest capacity and closer item size using exponential decay instead of linear decay: scores = np.maximum(bins - item, 0) / (1 + (np.arange(len(bins)) ** 2))",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate scores using a scoring function that prioritizes bins with smaller rest capacity and closer item size using exponential decay instead of linear decay\n    scores = np.maximum(bins - item, 0) / (1 + (np.arange(len(bins)) ** 2))\n    return scores",
          "objective": 0.07375,
          "other_inf": null
     },
     {
          "algorithm": "Calculate a score for each bin based on the ratio of the bin's remaining capacity to the maximum capacity and the bin's index, and multiply the result by a weight that is inversely proportional to the bin's index.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the ratio of the bin's remaining capacity to its maximum capacity\n    ratios = (bins - item) / bins\n    \n    # Multiply the ratio by a weight that is inversely proportional to the bin's index\n    weights = 1 / (np.arange(len(bins)) + 1)\n    scores = ratios * weights\n    \n    # Return the scores for the bins\n    return scores",
          "objective": 0.07989,
          "other_inf": null
     }
]