[
     {
          "algorithm": "New algorithm: Prioritize bins with larger rest capacity and higher total capacity by combining inverse rest capacity and total capacity, introducing randomness to prevent constant assignment to the same bin.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the inverse rest capacity and total capacity for each bin\n    inv_rest_capacity = 1 / (bins - item)\n    total_capacity = np.sum(bins)\n    \n    # Combine the inverse rest capacity and total capacity using a weighted average\n    weighted_average = 0.5 * inv_rest_capacity + 0.5 * total_capacity\n    \n    # Add randomness to the scores to prevent constant assignment to the same bin\n    randomness = np.random.randint(0, 10, size=len(bins))\n    scores = weighted_average + randomness\n    \n    return scores",
          "objective": 0.02535,
          "other_inf": null
     },
     {
          "algorithm": "Modified algorithm uses a score function that combines inverse rest capacity and a random factor to prioritize bins with higher remaining capacity while introducing randomness to prevent constant assignment to the same bin.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the inverse rest capacity for each bin\n    inv_rest_capacity = 1 / (bins - item)\n    \n    # Add a random factor to introduce randomness\n    random_factor = np.random.rand(len(bins))\n    \n    # Combine the inverse rest capacity and random factor\n    scores = inv_rest_capacity + random_factor\n    \n    # Return the scores\n    return scores",
          "objective": 0.02696,
          "other_inf": null
     },
     {
          "algorithm": "Calculate the score by dividing the inverse rest capacity by the total capacity and introduce randomness to balance diversity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the inverse rest capacity for each bin\n    inv_rest_capacity = 1 / (bins - item)\n    \n    # Add randomness to balance diversity\n    randomness = np.random.uniform(0, 1, len(bins))\n    \n    # Calculate the final score for each bin\n    scores = inv_rest_capacity + randomness\n    \n    return scores",
          "objective": 0.02898,
          "other_inf": null
     },
     {
          "algorithm": "New Algorithm: Prioritize bins by adding randomness to the sum of inverse rest capacity with a random number between 0 and 1.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the inverse rest capacity for each bin\n    inv_rest_capacity = 1 / (bins - item)\n    \n    # Add randomness to the scores\n    random_component = np.random.rand(len(bins))\n    scores = inv_rest_capacity + random_component\n    \n    # Return the scores\n    return scores",
          "objective": 0.02908,
          "other_inf": null
     },
     {
          "algorithm": "Prioritize bins by subtracting inverse rest capacity from total capacity, and introducing randomness to enhance utilization.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the inverse rest capacity for each bin\n    inv_rest_capacity = 1 / (bins - item)\n    \n    # Add randomness to the scores to enhance utilization\n    randomness = np.random.uniform(0, 1, size=len(bins))\n    scores = inv_rest_capacity + randomness\n    \n    # Return the scores for the bins\n    return scores",
          "objective": 0.02928,
          "other_inf": null
     },
     {
          "algorithm": "Prioritize bins by inverse rest capacity, introducing randomness with a constant value to balance diversity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the inverse rest capacity for each bin\n    inv_rest_capacity = 1 / (bins - item)\n    \n    # Add randomness to the scores to balance diversity\n    randomness = np.random.uniform(0, 1, len(bins))\n    scores = inv_rest_capacity + randomness\n    \n    # Normalize the scores to ensure they sum to 1\n    scores = scores / np.sum(scores)\n    \n    return scores",
          "objective": 0.03028,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm uses a score function that multiplies the inverse rest capacity with a constant factor to prioritize bins with higher remaining capacity and then adding a random factor to introduce randomness and prevent constant assignment to the same bin.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the inverse rest capacity for each bin\n    inv_rest_capacity = 1 / (bins - item)\n    \n    # Multiply the inverse rest capacity by a constant factor to prioritize bins with higher remaining capacity\n    priority = inv_rest_capacity * 0.5\n    \n    # Add a random factor to introduce randomness and prevent constant assignment to the same bin\n    randomness = np.random.uniform(size=len(bins))\n    \n    # Combine the priority and randomness factors to get the final score for each bin\n    scores = priority + randomness\n    \n    return scores",
          "objective": 0.03451,
          "other_inf": null
     },
     {
          "algorithm": "Prioritize smaller bins by their inverse rest capacity and penalize larger ones, while introducing a random factor based on the item's size relative to bin capacity",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the inverse rest capacity of each bin\n    inv_rest_capacity = 1 / (bins - item)\n    \n    # Penalize larger bins by adding a random factor\n    random_factor = np.random.uniform(0, 1, size=len(bins))\n    penalized_inv_rest_capacity = inv_rest_capacity + random_factor\n    \n    # Calculate the scores for each bin\n    scores = penalized_inv_rest_capacity * (1 - random_factor)\n    \n    return scores",
          "objective": 0.03471,
          "other_inf": null
     },
     {
          "algorithm": "Prioritize bins by multiplying inverse rest capacity with total capacity, and introducing randomness to balance diversity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the inverse rest capacity for each bin\n    inv_rest_capacity = 1 / (bins - item)\n    \n    # Introduce randomness to balance diversity\n    randomness = np.random.rand(len(bins))\n    \n    # Calculate the final score for each bin\n    scores = inv_rest_capacity * randomness\n    \n    return scores",
          "objective": 0.03843,
          "other_inf": null
     },
     {
          "algorithm": "{New Algorithm: Prioritize bins by multiplying the inverse rest capacity with a random number between 0 and 2}",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the inverse rest capacity for each bin\n    inv_rest_capacity = 1 / (bins - item)\n    \n    # Multiply the inverse rest capacity with a random number between 0 and 2\n    scores = inv_rest_capacity * np.random.uniform(0, 2, len(bins))\n    \n    # Return the scores\n    return scores",
          "objective": 0.03864,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm uses a score function that multiplies the inverse rest capacity with a random factor to prioritize bins with higher remaining capacity while introducing randomness to prevent constant assignment to the same bin.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the inverse rest capacity for each bin\n    inv_rest_capacity = 1 / (bins - item)\n    \n    # Multiply the inverse rest capacity by a random factor to introduce randomness\n    random_factor = np.random.uniform(0, 1, size=len(bins))\n    scores = inv_rest_capacity * random_factor\n    \n    # Return the scores for the bins\n    return scores",
          "objective": 0.03874,
          "other_inf": null
     },
     {
          "algorithm": "New Algorithm: Prioritize bins by adding randomness to the product of inverse rest capacity with a random number between 0 and 1.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the inverse rest capacity for each bin\n    inv_rest_capacity = 1 / (bins - item)\n    \n    # Add randomness to the product of inverse rest capacity and a random number between 0 and 1\n    randomness = np.random.rand(len(bins))\n    scores = inv_rest_capacity * randomness\n    \n    # Return the scores for the bins\n    return scores",
          "objective": 0.03894,
          "other_inf": null
     },
     {
          "algorithm": "Prioritize bins by adding randomness to the product of inverse rest capacity with a random number between 0 and the inverse rest capacity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the inverse rest capacity for each bin\n    inv_rest_capacity = 1 / (bins - item)\n    \n    # Add randomness to the product of inverse rest capacity and a random number between 0 and the inverse rest capacity\n    randomness = np.random.uniform(size=len(bins)) * inv_rest_capacity\n    scores = inv_rest_capacity * randomness\n    \n    # Return the scores for the bins\n    return scores",
          "objective": 0.03904,
          "other_inf": null
     },
     {
          "algorithm": "Design a score function that prioritizes bins with higher remaining capacity, penalizes bins with high fullness level, and assigns a bonus score based on the bin's index.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the remaining capacity of each bin\n    remaining_capacity = bins - item\n    \n    # Penalize bins with high fullness level\n    fullness_level = (bins / item) ** 2\n    penalty = 1 - fullness_level\n    \n    # Assign a bonus score based on the bin's index\n    bonus = np.arange(len(bins)) + 1\n    \n    # Combine the three components into a single score\n    scores = remaining_capacity * penalty * bonus\n    \n    return scores",
          "objective": 0.03914,
          "other_inf": null
     },
     {
          "algorithm": "Assign bins based on ranking by total capacity and then score inversely proportional to item difference and a random factor.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the inverse of the item difference\n    diff = 1 / (np.abs(item - bins) + 1e-6)\n    \n    # Calculate the random factor\n    rand = np.random.rand(len(bins))\n    \n    # Calculate the score for each bin\n    scores = diff * rand\n    \n    # Return the scores\n    return scores",
          "objective": 0.03924,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm uses a score function that combines inverse rest capacity and a weighted random factor to prioritize bins with higher remaining capacity while introducing randomness to prevent constant assignment to the same bin.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the inverse rest capacity for each bin\n    inv_rest_capacity = 1 / (bins - item)\n    \n    # Calculate the weighted random factor\n    rand_factor = np.random.rand(len(bins)) * 0.5 + 0.5\n    \n    # Combine the inverse rest capacity and weighted random factor\n    scores = inv_rest_capacity * rand_factor\n    \n    # Return the scores\n    return scores",
          "objective": 0.03944,
          "other_inf": null
     },
     {
          "algorithm": "Modified algorithm: Calculate the scores for each bin by taking the minimum between the rest capacity of the bin and the size of the item. Then, multiply the scores by a weight that is inversely proportional to the bin's maximum capacity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the scores for each bin\n    scores = np.minimum(bins, item) * (1 / bins)\n    \n    # Return the scores\n    return scores",
          "objective": 0.03984,
          "other_inf": null
     },
     {
          "algorithm": "Prioritize bins with higher density (score inversely proportional to the rest capacity over remaining maximum capacity) and introduce randomness to enhance utilization.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the inverse of the rest capacity over the maximum capacity\n    # for each bin, and multiply by a random value between 0 and 1\n    scores = np.random.rand(len(bins)) * (1 / (bins - item + 1))\n    \n    # Normalize the scores so that they sum to 1\n    scores = scores / np.sum(scores)\n    \n    return scores",
          "objective": 0.03994,
          "other_inf": null
     },
     {
          "algorithm": "Prioritize bins based on a new score that considers rest capacity, remaining capacity, and a randomized component",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the rest capacity of each bin\n    rest_capacity = bins - item\n    \n    # Calculate the remaining capacity of each bin\n    remaining_capacity = np.maximum(0, rest_capacity)\n    \n    # Calculate the randomized component\n    randomized_component = np.random.randint(0, 100, size=len(bins))\n    \n    # Calculate the total score for each bin\n    scores = (remaining_capacity + randomized_component) / (rest_capacity + 1)\n    \n    return scores",
          "objective": 0.04004,
          "other_inf": null
     },
     {
          "algorithm": "Algorithm 6: Score each bin by subtracting the squared difference between the bin's rest capacity and half of the bin's maximum capacity from the bin's maximum capacity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the squared difference between the bin's rest capacity and half of the bin's maximum capacity\n    diff = (bins - item) ** 2\n    \n    # Subtract the squared difference from the bin's maximum capacity\n    scores = bins - diff\n    \n    # Return the scores for the bins\n    return scores",
          "objective": 0.04045,
          "other_inf": null
     }
]