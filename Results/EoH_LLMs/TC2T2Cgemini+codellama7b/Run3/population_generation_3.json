[
     {
          "algorithm": "New algorithm: Score each bin by subtracting its square root multiplied by its index and the item size.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the square root of the indices of the bins\n    sqrt_indices = np.sqrt(np.arange(len(bins)))\n    \n    # Subtract the square root multiplied by the item size from the rest capacities\n    scores = bins - (sqrt_indices * item)\n    \n    # Return the scores\n    return scores",
          "objective": 0.03914,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Score each bin by subtracting its reciprocal multiplied by its index and the item size.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the reciprocal of each bin's rest capacity\n    reciprocal_rest_capacity = 1 / (bins - item)\n    \n    # Calculate the score for each bin\n    scores = reciprocal_rest_capacity * item\n    \n    return scores",
          "objective": 0.03984,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: The score for each bin is calculated as the multiplication of the ratio of the item to the rest capacity, the rest capacity and the exponential decay of the index. Score(bin) = (item / rest capacity) * rest capacity * exp(-index / number of bins).",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the ratio of the item to the rest capacity\n    ratio = item / (bins - 1)\n    \n    # Calculate the exponential decay of the index\n    decay = np.exp(-np.arange(len(bins)) / len(bins))\n    \n    # Multiply the ratio and the exponential decay to get the scores\n    scores = ratio * decay * bins\n    \n    return scores",
          "objective": 0.03994,
          "other_inf": null
     },
     {
          "algorithm": "Modified Algorithm: Calculate scores for each bin by subtracting the bin's capacity from its index and returning a Numpy array of these scores for assignment.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the scores for each bin by subtracting the bin's capacity from its index\n    scores = np.subtract(np.arange(len(bins)), bins)\n    \n    # Return the scores for assignment\n    return scores",
          "objective": 0.04075,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm scores each bin based on the sum of the bin's rest capacity divided by the power of 2 raised to its index.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the power of 2 raised to the index of each bin\n    powers = np.power(2, np.arange(len(bins)))\n    \n    # Calculate the sum of the bin's rest capacity divided by the power of 2\n    scores = (bins - item) / powers\n    \n    # Return the scores as a NumPy array\n    return scores",
          "objective": 0.04095,
          "other_inf": null
     },
     {
          "algorithm": "\nNew algorithm: The score function will calculate the scores for each bin based on the remaining capacity, with a penalty for bins with maximum capacity to minimize the number of used bins.\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = (max_capacity - bins) + (bins == max_capacity) * item\n    return scores",
          "objective": 0.04105,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm calculates the score for each bin as the product of the rest capacity and the power of the item to the inverse exponential decay of the index.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the rest capacities of the bins\n    rest_capacities = bins - item\n    \n    # Calculate the scores for each bin\n    scores = (rest_capacities ** (-np.arange(len(bins)) / len(bins))) * item\n    \n    return scores",
          "objective": 0.04115,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm will score the bins based on a combination of their rest capacities and the entropy of the distribution of rest capacities among the bins.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the rest capacities of the bins\n    rest_capacities = bins - item\n    \n    # Calculate the entropy of the distribution of rest capacities\n    entropy = np.sum(-rest_capacities * np.log(rest_capacities))\n    \n    # Calculate the scores for each bin based on its rest capacity and entropy\n    scores = rest_capacities / (entropy + 1e-6)\n    \n    return scores",
          "objective": 0.04165,
          "other_inf": null
     },
     {
          "algorithm": "\nNew algorithm: \n1. Initialize an empty array named 'scores' with the same length as the input array 'bins'.\n2. Calculate the scores for each bin by taking the minimum between the rest capacity of the bin and the size of the item.\n3. Set the score of a bin with maximum capacity to a very small negative value to prevent it from being used.\n4. Return the 'scores' array.\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.minimum(bins, item)\n    max_capacity_bin_index = np.argmax(bins)\n    scores[max_capacity_bin_index] = -99999999\n    return scores",
          "objective": 0.04226,
          "other_inf": null
     },
     {
          "algorithm": "Calculate scores based on a ratio between rest capacity and item size, penalized by the index of the bin.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the ratio of rest capacity to item size for each bin\n    ratios = bins / item\n    \n    # Penalize bins with higher indices\n    penalties = np.arange(len(bins)) + 1\n    \n    # Calculate the total score for each bin\n    scores = ratios - penalties\n    \n    return scores",
          "objective": 0.04246,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm scores each bin based on the sum of the square root of the bin's rest capacity multiplied by the power of 4 raised to its index.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the square root of the rest capacities of the bins\n    sqrt_rest_capacities = np.sqrt(bins)\n    \n    # Calculate the powers of 4 for the indices of the bins\n    powers_of_4 = np.power(4, np.arange(len(bins)))\n    \n    # Multiply the square root rest capacities by the powers of 4\n    scores = sqrt_rest_capacities * powers_of_4\n    \n    # Return the scores as a NumPy array\n    return scores",
          "objective": 0.04276,
          "other_inf": null
     },
     {
          "algorithm": "\nDescription: \nThe algorithm calculates the scores for each bin based on their rest capacities and assigns the item to the bin with the maximum score, minimizing the number of used bins.\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = bins / np.maximum((bins - item), 1)\n    scores[bins == bins.max()] = 0\n    return scores",
          "objective": 0.04306,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Calculate available capacity as the minimum of the remaining capacity or the item size, then score each bin as the available capacity times a penalty factor if the bin has less than 50% spare capacity, otherwise set the score to zero.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate available capacity for each bin\n    available_capacity = np.minimum(bins, item)\n    \n    # Penalize bins with less than 50% spare capacity\n    penalties = np.where(available_capacity < 0.5 * bins, available_capacity, 0)\n    \n    # Score each bin based on available capacity and penalties\n    scores = available_capacity - penalties\n    \n    return scores",
          "objective": 0.04316,
          "other_inf": null
     },
     {
          "algorithm": "Score each bin based on the ratio of the item size to the rest capacity, multiplied by the exponential of the bin's index.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the ratio of the item size to the rest capacity\n    ratios = item / (bins - item)\n    \n    # Calculate the exponential of the bin indices\n    exponents = np.exp(np.arange(len(bins)))\n    \n    # Multiply the ratios and exponents element-wise\n    scores = ratios * exponents\n    \n    return scores",
          "objective": 0.04326,
          "other_inf": null
     },
     {
          "algorithm": "A new algorithm scores each bin based on the sum of the square root of the bin's rest capacity multiplied by the power of 2 raised to its index.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the square root of the rest capacities of the bins\n    sqrt_rest_capacities = np.sqrt(bins)\n    \n    # Calculate the powers of 2 raised to the indices of the bins\n    powers_of_two = 2 ** np.arange(len(bins))\n    \n    # Multiply the square root rest capacities by the powers of two\n    scores = sqrt_rest_capacities * powers_of_two\n    \n    # Return the scores for the bins\n    return scores",
          "objective": 0.04367,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm scores each bin as the natural logarithm of its rest capacity divided by the natural logarithm of its index.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the logarithmic scores for each bin\n    scores = np.log(bins) - np.log(np.arange(len(bins)) + 1)\n    \n    # Normalize the scores to ensure consistency\n    scores /= np.max(scores)\n    \n    # Return the normalized scores\n    return scores",
          "objective": 0.04387,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm scores each bin based on the square root of the rest capacity divided by the sum of its index and number of used bins.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the square root of the rest capacity divided by the sum of its index and number of used bins\n    scores = np.sqrt(bins / (np.arange(len(bins)) + 1))\n    \n    # Return the scores for the bins\n    return scores",
          "objective": 0.04407,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm scores each bin as the difference between the square root of its rest capacity and the square root of its index.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the square roots of the rest capacities and indices\n    sqrt_rest_capacities = np.sqrt(bins)\n    sqrt_indices = np.arange(len(bins)) + 1\n    \n    # Calculate the scores for each bin\n    scores = sqrt_rest_capacities - sqrt_indices\n    \n    # Return the scores as a NumPy array\n    return scores",
          "objective": 0.04457,
          "other_inf": null
     },
     {
          "algorithm": "Modified algorithm scores each bin based on the product of the square root of the bin's rest capacity multiplied by the exponential of its index.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the scores for each bin\n    scores = np.sqrt(bins) * np.exp(np.arange(len(bins)))\n    \n    # Normalize the scores to ensure they sum to 1\n    scores /= np.sum(scores)\n    \n    # Return the scores for the bins\n    return scores",
          "objective": 0.04548,
          "other_inf": null
     },
     {
          "algorithm": "Modified Algorithm: Adjusted algorithm: Calculates bin scores as the weighted sum of the rest capacity to the power of 0.5, the proximity to the item size, and a penalty for exceeding the maximum capacity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the weighted sum of the rest capacity to the power of 0.5, the proximity to the item size, and a penalty for exceeding the maximum capacity\n    scores = (bins / np.sqrt(bins)) * (np.abs(item - bins) ** 0.5) + (bins > item) * (bins - item)\n    \n    # Penalize bins that exceed the maximum capacity\n    scores[bins > item] -= (bins[bins > item] - item) ** 2\n    \n    return scores",
          "objective": 0.04568,
          "other_inf": null
     }
]