[
     {
          "algorithm": "The new algorithm calculates the score for each bin by combining the normalized inverse of the remaining capacity and the penalized inverse of the bin number to maximize the number of used bins.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the normalized inverse of the remaining capacity\n    inv_remaining = 1 / (bins - item)\n    # Calculate the penalized inverse of the bin number\n    inv_penalized = 1 / (np.arange(len(bins)) + 1)\n    # Combine the two terms to get the final score\n    scores = inv_remaining * inv_penalized\n    return scores",
          "objective": 0.03884,
          "other_inf": null
     },
     {
          "algorithm": "Algorithm description: New algorithm: Calculating the score as the reciprocal of the sum of the rest capacity and the bin's position.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the reciprocal of the sum of the rest capacity and the bin's position\n    scores = 1 / (bins + item)\n    \n    # Return the scores for the bins\n    return scores",
          "objective": 0.03984,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Assign the maximum score to bins with sufficient remaining capacity and a penalty for bins with maximum capacity while considering the square root of the bin's position.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the square root of the bin positions\n    sqrt_positions = np.sqrt(np.arange(len(bins)))\n    \n    # Calculate the penalty for bins with maximum capacity\n    max_capacity_penalty = np.where(bins == 0, 0, 1)\n    \n    # Calculate the scores for each bin\n    scores = (item / bins) + (sqrt_positions * max_capacity_penalty)\n    \n    return scores",
          "objective": 0.04004,
          "other_inf": null
     },
     {
          "algorithm": "Calculate score as power of the exponential of the rest capacity, penalized by the number of bins already in use.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the exponential of the rest capacity\n    exp_rest_capacity = np.exp(-bins)\n    \n    # Penalize the number of bins already in use\n    num_used_bins = len(np.where(bins > 0)[0])\n    penalty = num_used_bins ** 2\n    \n    # Calculate the score for each bin\n    scores = exp_rest_capacity - penalty\n    \n    return scores",
          "objective": 0.04075,
          "other_inf": null
     },
     {
          "algorithm": "\nNew algorithm: The score function will calculate the scores for each bin based on the remaining capacity, with a penalty for bins with maximum capacity to minimize the number of used bins.\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = (max_capacity - bins) + (bins == max_capacity) * item\n    return scores",
          "objective": 0.04105,
          "other_inf": null
     },
     {
          "algorithm": " New algorithm uses a score function that multiplies the item size with the rest capacity and subtracts it from a random constant to calculate the scores for each candidate bin.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the scores for each bin based on the item size and rest capacity\n    scores = (item * bins) - (np.random.randint(0, 100) * bins)\n    \n    # Return the scores as a NumPy array\n    return scores",
          "objective": 0.04115,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Scores bins based on the logarithmic difference between the item size and the bins' rest capacity, multiplied by the number of bins minus the current bin's position.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the logarithmic difference between the item size and the bins' rest capacities\n    diff = np.log(bins / item)\n    \n    # Calculate the number of bins minus the current bin's position\n    pos = np.arange(len(bins))\n    num_bins = len(bins)\n    diff -= (num_bins - pos)\n    \n    # Multiply the logarithmic difference by the number of bins minus the current bin's position\n    scores = diff * (num_bins - pos)\n    \n    return scores",
          "objective": 0.04216,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm calculates the score for each bin by multiplying the item size with the rest capacity, and subtracting it from a constant, and then returns the scores for each bin for assignment.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the scores for each bin\n    scores = (item * bins) - (item * bins)\n    \n    # Return the scores for assignment\n    return scores",
          "objective": 0.04226,
          "other_inf": null
     },
     {
          "algorithm": "Assign scores to bins based on the product of the remaining capacity and a positional weight that increases for bins closer to the middle of the array.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the positional weights\n    weights = np.arange(len(bins)) / len(bins)\n    \n    # Calculate the scores\n    scores = (weights * bins) + (item - bins)\n    \n    return scores",
          "objective": 0.04256,
          "other_inf": null
     },
     {
          "algorithm": "\nDescription: \nThe algorithm calculates the scores for each bin based on their rest capacities and assigns the item to the bin with the maximum score, minimizing the number of used bins.\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = bins / np.maximum((bins - item), 1)\n    scores[bins == bins.max()] = 0\n    return scores",
          "objective": 0.04306,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Assign the maximum score to bins with sufficient remaining capacity and no penalty for bins with maximum capacity while considering the reciprocal of the bin's position.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the reciprocal of the bin positions\n    reciprocal_positions = np.reciprocal(np.arange(len(bins)))\n    \n    # Calculate the scores for each bin\n    scores = (item / bins) * reciprocal_positions\n    \n    # Mask out the scores for bins with maximum capacity\n    max_capacity = np.max(bins)\n    scores[bins == max_capacity] = 0\n    \n    # Return the scores\n    return scores",
          "objective": 0.04326,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm will calculate the score for each bin based on the normalized bin capacity and the inverse of the bin number, then return the scores for each bin for assignment.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the normalized bin capacity and the inverse of the bin number\n    norm_capacity = bins / np.sum(bins)\n    inv_bin_num = 1 / (np.arange(len(bins)) + 1)\n    \n    # Calculate the score for each bin based on the normalized capacity and the inverse of the bin number\n    scores = norm_capacity * inv_bin_num\n    \n    # Return the scores for each bin\n    return scores",
          "objective": 0.04387,
          "other_inf": null
     },
     {
          "algorithm": "Calculate a score for each bin based on the product of rest capacity and an index function that is inversely proportional to the bin's position.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the inverse of the bin position\n    inv_pos = 1 / (np.arange(len(bins)) + 1)\n    \n    # Calculate the score for each bin\n    scores = item * inv_pos * bins\n    \n    return scores",
          "objective": 0.04407,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm will calculate the score for each bin based on the product of the normalized bin capacity and the inverse of the bin number, with a discount factor that exponentially decays with the bin order.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the normalized bin capacities\n    norm_capacities = bins / np.max(bins)\n    \n    # Calculate the inverse of the bin numbers\n    inv_bin_nums = np.arange(len(bins))[::-1]\n    \n    # Calculate the discount factor\n    discount_factor = np.exp(-inv_bin_nums * 0.5)\n    \n    # Calculate the scores for each bin\n    scores = (norm_capacities * discount_factor) ** item\n    \n    return scores",
          "objective": 0.04437,
          "other_inf": null
     },
     {
          "algorithm": "Normalize the bin capacities to the item size, then calculate the score as the maximum value among all bins minus the normalized item size.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Normalize the bin capacities to the item size\n    norm_bins = bins / item\n    \n    # Calculate the score for each bin\n    scores = np.maximum(norm_bins - item, 0)\n    \n    return scores",
          "objective": 0.04507,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Prioritizing bins with lower rest capacity and higher index by calculating the score as the product of the rest capacity and the reciprocal of the bin's position.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the rest capacities of the bins\n    rest_capacities = bins - item\n    \n    # Calculate the reciprocal of the bin positions\n    reciprocal_positions = np.reciprocal(np.arange(len(bins)))\n    \n    # Calculate the scores for each bin\n    scores = rest_capacities * reciprocal_positions\n    \n    return scores",
          "objective": 0.04699,
          "other_inf": null
     },
     {
          "algorithm": "Assign scores based on the ratio of bin capacity to the sum of all bins' capacities, weighted by the inverse of the bin's distance from the middle of the array.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the ratio of bin capacity to the sum of all bins' capacities\n    capacity_ratio = bins / np.sum(bins)\n    \n    # Calculate the distance of each bin from the middle of the array\n    middle_index = len(bins) // 2\n    distances = np.abs(np.arange(len(bins)) - middle_index)\n    \n    # Weight the capacity ratio by the inverse of the distance from the middle\n    weights = 1 / (distances + 1)\n    \n    # Calculate the scores for each bin using the weighted capacity ratio\n    scores = capacity_ratio * weights\n    \n    return scores",
          "objective": 0.0487,
          "other_inf": null
     },
     {
          "algorithm": "\nNew algorithm: \n1. Calculate the ratio of item size to each bin's rest capacity.\n2. Calculate the score for each bin based on the ratio and the condition of the rest capacity.\n3. Return the scores for the bins for assignment. \n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.zeros_like(bins, dtype=float)\n    for i in range(len(bins)):\n        if bins[i] == item:\n            scores[i] = -1\n        elif bins[i] > item:\n            scores[i] = item / bins[i]\n    return scores",
          "objective": 0.05071,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm calculates the score for each bin based on the rest capacity, using a weighted sum of rest capacity and inverse of bin number, then returns scores for each bin for assignment.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the rest capacity for each bin\n    rest_capacities = bins - item\n    \n    # Calculate the score for each bin based on the rest capacity\n    scores = (rest_capacities / np.maximum(rest_capacities, 1)) ** 0.5\n    \n    # Return the scores for each bin\n    return scores",
          "objective": 0.05383,
          "other_inf": null
     },
     {
          "algorithm": "Modified algorithm: Calculate the score for each bin as the sum of the bin's number of items divided by its maximum capacity, weighted by the item size and bin number.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the score for each bin as the sum of the bin's number of items divided by its maximum capacity, weighted by the item size and bin number\n    scores = (bins / bins.max()) * (item / bins)\n    \n    # Return the scores for the bins for assignment\n    return scores",
          "objective": 0.05644,
          "other_inf": null
     }
]