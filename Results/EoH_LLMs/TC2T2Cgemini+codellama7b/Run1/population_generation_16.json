[
     {
          "algorithm": "New algorithm: The new algorithm calculates the score for each bin as the weighted sum of its rest capacity and the reciprocal of the difference between its capacity and the item size, where the weights are the square root of the bin's index or the square root of the inverse of the number of bins.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the weighted sum of the rest capacity and the reciprocal of the difference between the capacity and the item size\n    weights = np.sqrt(np.arange(len(bins)) + 1) / np.sqrt(len(bins))\n    scores = (weights * bins) / (item - bins)\n    \n    # Return the scores for the bins\n    return scores",
          "objective": 0.01519,
          "other_inf": null
     },
     {
          "algorithm": "Novel Algorithm: Calculate the score for each bin as the weighted sum of the rest capacity and the reciprocal of the difference between the capacity and the item size, where the weights are the bin's index multiplied by the bin's rest capacity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the score for each bin as the weighted sum of the rest capacity and the reciprocal of the difference between the capacity and the item size\n    scores = (bins * bins) / (item - bins)\n    \n    # Return the scores for the bins for assignment\n    return scores",
          "objective": 0.0156,
          "other_inf": null
     },
     {
          "algorithm": "Assign to each bin the value of the rest capacity raised to the power of the index of that bin, and then divide this value by the square root of the absolute difference between the current capacity and the size of the item.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the rest capacities raised to the power of the index of each bin\n    rest_capacities = np.power(bins, np.arange(len(bins)))\n    \n    # Calculate the absolute difference between the current capacity and the size of the item\n    abs_diff = np.abs(np.subtract(bins, item))\n    \n    # Divide the rest capacities by the square root of the absolute difference\n    scores = np.divide(rest_capacities, np.sqrt(abs_diff))\n    \n    return scores",
          "objective": 0.03391,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Compute the product of rest capacity raised to bin's index, divided by the difference between bin's capacity and the item size, to account for limited capacity while encouraging bins with higher remaining capacity to be used first.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the product of rest capacity raised to bin's index, divided by the difference between bin's capacity and the item size\n    scores = (bins ** (np.arange(len(bins)) + 1)) / (bins - item)\n    \n    # Return the scores for the bins for assignment\n    return scores",
          "objective": 0.03672,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm calculates the score for each bin as the weighted sum of its rest capacity and the reciprocal of the difference between its capacity and the item size, where the weights are the bin's index or the inverse of the number of bins.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the score for each bin as the weighted sum of its rest capacity and the reciprocal of the difference between its capacity and the item size\n    scores = (bins * (1 - item / bins)) / (bins - item)\n    \n    # Return the scores for the bins\n    return scores",
          "objective": 0.03682,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Calculate the scores as the square root of the exponential of the difference between the rest capacity of the bin and the item size and the bin's index.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the scores as the square root of the exponential of the difference between the rest capacity of the bin and the item size and the bin's index\n    scores = np.sqrt(np.exp(-((bins - item) ** 2)))\n    \n    # Add a small value to avoid division by zero\n    scores += 1e-6\n    \n    # Normalize the scores to ensure they sum up to 1\n    scores /= np.sum(scores)\n    \n    return scores",
          "objective": 0.03803,
          "other_inf": null
     },
     {
          "algorithm": "The proposed algorithm calculates the score of each bin as the sum of the remaining capacity and the reciprocal of the bin's index multiplied by the reciprocal of the remaining capacity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the remaining capacity for each bin\n    remaining_capacity = bins - item\n    \n    # Calculate the reciprocal of the bin index and the reciprocal of the remaining capacity\n    reciprocal_bin_index = 1 / (np.arange(len(bins)) + 1)\n    reciprocal_remaining_capacity = 1 / remaining_capacity\n    \n    # Calculate the score for each bin\n    scores = reciprocal_bin_index * reciprocal_remaining_capacity\n    \n    return scores",
          "objective": 0.03884,
          "other_inf": null
     },
     {
          "algorithm": "For each bin, score is computed as a weighted sum of the bin's capacity, rest capacity, and the reciprocal of the difference between the capacity and the item size, where the weights are inversely proportional to the square root of the bin's index, capacity, and rest capacity",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Compute the scores for each bin based on the given formula\n    scores = (np.sqrt(bins) * item / (bins - item)) + (np.sqrt(bins) * (bins - item) / (bins - item))\n    \n    # Return the scores as a NumPy array\n    return scores",
          "objective": 0.03914,
          "other_inf": null
     },
     {
          "algorithm": "Calculate the scores as the inverse of the amount by which the bin's capacity exceeds the item size, scaled by the bin index.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the scores as the inverse of the amount by which the bin's capacity exceeds the item size, scaled by the bin index\n    scores = (np.ones_like(bins) - (bins / item)) * (np.arange(len(bins)) + 1)\n    \n    # Return the scores\n    return scores",
          "objective": 0.03934,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Calculate the scores as the product of the reciprocal of the difference between the bin's capacity and the item size and the logarithm of the bin's index.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the scores as the product of the reciprocal of the difference between the bin's capacity and the item size and the logarithm of the bin's index\n    scores = np.log(np.reciprocal(bins - item)) + np.log(np.arange(len(bins)))\n    \n    # Return the scores\n    return scores",
          "objective": 0.03974,
          "other_inf": null
     },
     {
          "algorithm": "Calculate the scores for each bin as the inverse of the item size multiplied by the square root of the product of the bin's capacity and the bin's index.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the scores for each bin\n    scores = (np.sqrt(bins * item) - 1) / (np.sqrt(bins) - 1)\n    \n    # Return the scores\n    return scores",
          "objective": 0.03984,
          "other_inf": null
     },
     {
          "algorithm": "Modified algorithm: Calculate the score of each bin as the square root of the reciprocal of the difference between its capacity and the item size, divided by the bin capacity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the score for each bin\n    scores = np.sqrt(np.reciprocal(bins - item)) / bins\n    \n    # Return the scores for all bins\n    return scores",
          "objective": 0.03994,
          "other_inf": null
     },
     {
          "algorithm": "Algorithm: For each bin, score is computed as a weighted sum of the exponential of rest capacity divided by item size and reciprocal of rest capacity, with weights inversely proportional to the square root of bin index and the rest capacity; if rest capacity is less than half of max capacity, multiply score by two.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Compute the weights for each bin\n    weights = np.sqrt(np.arange(len(bins)) + 1) / (bins * item)\n    \n    # Compute the scores for each bin\n    scores = np.exp(-weights * bins) / (bins * item)\n    \n    # Multiply the scores by two if the rest capacity is less than half of the max capacity\n    scores[bins < item / 2] *= 2\n    \n    return scores",
          "objective": 0.04004,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm calculates the scores as the sum of the exponential of the difference between the bin's capacity and the item size and the reciprocal of the bin's index.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the scores for each bin based on the difference between the bin's capacity and the item size\n    scores = np.exp(-(bins - item)) / (np.arange(len(bins)) + 1)\n    \n    # Return the scores as a NumPy array\n    return scores",
          "objective": 0.04014,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Calculate the scores as the product of exponential of the difference between the rest capacity of the bin and the item size and the bin's index raised to a power.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the scores as the product of exponential of the difference between the rest capacity of the bin and the item size and the bin's index raised to a power\n    scores = np.exp(-((bins - item) ** 2)) * (np.arange(len(bins)) + 1) ** 0.5\n    \n    # Return the scores for the bins for assignment\n    return scores",
          "objective": 0.04025,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Calculate the score for each bin as the weighted sum of its rest capacity and the reciprocal of the difference between its capacity and the item size, where the weights are the inverse of the bin's capacity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the score for each bin as the weighted sum of its rest capacity and the reciprocal of the difference between its capacity and the item size\n    scores = (bins * (1 / (bins - item))) + (item * (1 / (item - bins)))\n    \n    # Return the scores for the bins for assignment\n    return scores",
          "objective": 0.04055,
          "other_inf": null
     },
     {
          "algorithm": "Calculate the scores for each bin as the product of the bin's capacity raised to a power and the reciprocal of the difference between the bin's capacity and the item size.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the scores for each bin\n    scores = (bins ** item) / (bins - item)\n    \n    # Normalize the scores to ensure they sum to 1\n    scores = scores / np.sum(scores)\n    \n    return scores",
          "objective": 0.04065,
          "other_inf": null
     },
     {
          "algorithm": " New algorithm: Calculate the scores as linear combination between the logarithmic product of the reciprocal of the difference between the bin's capacity and the item size and the bin's index raised to a power. ",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the logarithmic product of the reciprocal of the difference between the bin's capacity and the item size and the bin's index raised to a power\n    scores = np.log(np.reciprocal(bins - item)) ** (bins + 1)\n    \n    # Return the scores for the bins\n    return scores",
          "objective": 0.04075,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Calculate scores as the sum of the difference between maximum capacity and bin's capacity, divided by the difference between item size and maximum capacity, multiplied by the ratio of maximum capacity to bin's capacity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the scores for each bin\n    scores = (np.maximum(bins - item, 0) / (item - np.minimum(bins, item))) * (bins / np.maximum(bins, item))\n    \n    # Return the scores as a NumPy array\n    return scores",
          "objective": 0.04095,
          "other_inf": null
     },
     {
          "algorithm": "\nNew algorithm: The score function will calculate the scores for each bin based on the remaining capacity, with a penalty for bins with maximum capacity to minimize the number of used bins.\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = (max_capacity - bins) + (bins == max_capacity) * item\n    return scores",
          "objective": 0.04105,
          "other_inf": null
     }
]