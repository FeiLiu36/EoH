[
     {
          "algorithm": "Novel Algorithm: Calculate the score for each bin as the weighted sum of the rest capacity and the reciprocal of the difference between the capacity and the item size, where the weights are the bin's index multiplied by the bin's rest capacity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the score for each bin as the weighted sum of the rest capacity and the reciprocal of the difference between the capacity and the item size\n    scores = (bins * bins) / (item - bins)\n    \n    # Return the scores for the bins for assignment\n    return scores",
          "objective": 0.0156,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm calculates the score for each bin as the weighted sum of its rest capacity and the reciprocal of the difference between its capacity and the item size, where the weights are the bin's index or the inverse of the number of bins.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the score for each bin as the weighted sum of its rest capacity and the reciprocal of the difference between its capacity and the item size\n    scores = (bins * (1 - item / bins)) / (bins - item)\n    \n    # Return the scores for the bins\n    return scores",
          "objective": 0.03682,
          "other_inf": null
     },
     {
          "algorithm": "For each bin, score is computed as a weighted sum of the bin's capacity, rest capacity, and the reciprocal of the difference between the capacity and the item size, where the weights are inversely proportional to the square root of the bin's index, capacity, and rest capacity",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Compute the scores for each bin based on the given formula\n    scores = (np.sqrt(bins) * item / (bins - item)) + (np.sqrt(bins) * (bins - item) / (bins - item))\n    \n    # Return the scores as a NumPy array\n    return scores",
          "objective": 0.03914,
          "other_inf": null
     },
     {
          "algorithm": "Calculate the scores as the inverse of the amount by which the bin's capacity exceeds the item size, scaled by the bin index.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the scores as the inverse of the amount by which the bin's capacity exceeds the item size, scaled by the bin index\n    scores = (np.ones_like(bins) - (bins / item)) * (np.arange(len(bins)) + 1)\n    \n    # Return the scores\n    return scores",
          "objective": 0.03934,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Calculate the scores as the product of the reciprocal of the difference between the bin's capacity and the item size and the logarithm of the bin's index.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the scores as the product of the reciprocal of the difference between the bin's capacity and the item size and the logarithm of the bin's index\n    scores = np.log(np.reciprocal(bins - item)) + np.log(np.arange(len(bins)))\n    \n    # Return the scores\n    return scores",
          "objective": 0.03974,
          "other_inf": null
     },
     {
          "algorithm": "Calculate the scores for each bin as the inverse of the item size multiplied by the square root of the product of the bin's capacity and the bin's index.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the scores for each bin\n    scores = (np.sqrt(bins * item) - 1) / (np.sqrt(bins) - 1)\n    \n    # Return the scores\n    return scores",
          "objective": 0.03984,
          "other_inf": null
     },
     {
          "algorithm": "The proposed algorithm calculates the score of each bin as the product of the bin's capacity and the square root of the reciprocal of the difference between its capacity and the item size.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the score for each bin\n    scores = np.sqrt(np.reciprocal(bins - item)) * (bins - item)\n    \n    # Return the scores in descending order\n    return scores",
          "objective": 0.03994,
          "other_inf": null
     },
     {
          "algorithm": "Algorithm: For each bin, score is computed as a weighted sum of the exponential of rest capacity divided by item size and reciprocal of rest capacity, with weights inversely proportional to the square root of bin index and the rest capacity; if rest capacity is less than half of max capacity, multiply score by two.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Compute the weights for each bin\n    weights = np.sqrt(np.arange(len(bins)) + 1) / (bins * item)\n    \n    # Compute the scores for each bin\n    scores = np.exp(-weights * bins) / (bins * item)\n    \n    # Multiply the scores by two if the rest capacity is less than half of the max capacity\n    scores[bins < item / 2] *= 2\n    \n    return scores",
          "objective": 0.04004,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Calculate the score for each bin as the weighted sum of its rest capacity and the reciprocal of the difference between its capacity and the item size, where the weights are the inverse of the bin's capacity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the score for each bin as the weighted sum of its rest capacity and the reciprocal of the difference between its capacity and the item size\n    scores = (bins * (1 / (bins - item))) + (item * (1 / (item - bins)))\n    \n    # Return the scores for the bins for assignment\n    return scores",
          "objective": 0.04055,
          "other_inf": null
     },
     {
          "algorithm": "Calculate the scores for each bin as the product of the bin's capacity raised to a power and the reciprocal of the difference between the bin's capacity and the item size.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the scores for each bin\n    scores = (bins ** item) / (bins - item)\n    \n    # Normalize the scores to ensure they sum to 1\n    scores = scores / np.sum(scores)\n    \n    return scores",
          "objective": 0.04065,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Calculate the scores as the logarithmic product of the reciprocal of the difference between the bin's capacity and the item size and the bin's index raised to a power.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the logarithmic product of the reciprocal of the difference between the bin's capacity and the item size and the bin's index raised to a power\n    scores = np.log(np.reciprocal(np.abs(bins - item))) ** (bins + 1)\n    \n    # Return the scores for the bins\n    return scores",
          "objective": 0.04075,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Calculate scores as the sum of the difference between maximum capacity and bin's capacity, divided by the difference between item size and maximum capacity, multiplied by the ratio of maximum capacity to bin's capacity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the scores for each bin\n    scores = (np.maximum(bins - item, 0) / (item - np.minimum(bins, item))) * (bins / np.maximum(bins, item))\n    \n    # Return the scores as a NumPy array\n    return scores",
          "objective": 0.04095,
          "other_inf": null
     },
     {
          "algorithm": "\nNew algorithm: The score function will calculate the scores for each bin based on the remaining capacity, with a penalty for bins with maximum capacity to minimize the number of used bins.\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = (max_capacity - bins) + (bins == max_capacity) * item\n    return scores",
          "objective": 0.04105,
          "other_inf": null
     },
     {
          "algorithm": "Calculate the score of a bin as the product of the difference between its maximum and current capacity and the reciprocal of the capacity difference between the bin and the item, multiplied by the bin's position.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the score for each bin based on the formula you provided\n    scores = (bins - item) * (1 / (bins - item)) * (np.arange(len(bins)) + 1)\n    \n    # Return the scores as a NumPy array\n    return scores",
          "objective": 0.04115,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Calculate the scores as the product of the bin's index and the logarithm of the reciprocal of the difference between the bin's capacity and the item size.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the scores as the product of the bin's index and the logarithm of the reciprocal of the difference between the bin's capacity and the item size\n    scores = np.log(np.reciprocal(bins - item)) * np.arange(len(bins))\n    \n    # Return the scores\n    return scores",
          "objective": 0.04155,
          "other_inf": null
     },
     {
          "algorithm": "Calculate the score for each bin as the weighted sum of the rest capacity and the reciprocal of the difference between the capacity and the item size, where the weights are the product of the inverse of the bin's index and the bin's rest capacity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the score for each bin as the weighted sum of the rest capacity and the reciprocal of the difference between the capacity and the item size\n    scores = (bins * (1 / (bins - item))) + ((1 - bins) * (1 / (item - bins)))\n    \n    # Normalize the scores to ensure they add up to 1\n    scores = scores / np.sum(scores)\n    \n    return scores",
          "objective": 0.04165,
          "other_inf": null
     },
     {
          "algorithm": "\nNew algorithm: \n1. Initialize an empty array named 'scores' with the same length as the input array 'bins'.\n2. Calculate the scores for each bin by taking the minimum between the rest capacity of the bin and the size of the item.\n3. Set the score of a bin with maximum capacity to a very small negative value to prevent it from being used.\n4. Return the 'scores' array.\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.minimum(bins, item)\n    max_capacity_bin_index = np.argmax(bins)\n    scores[max_capacity_bin_index] = -99999999\n    return scores",
          "objective": 0.04226,
          "other_inf": null
     },
     {
          "algorithm": "Re-calculate the score for each bin based on the item size, multiplying the score of a bin by the ratio of the item size to the remaining capacity to prioritize bins with more remaining capacity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the score for each bin based on the item size and the remaining capacity\n    scores = (bins - item) / (bins * (1 - item / bins))\n    \n    # Prioritize bins with more remaining capacity\n    scores[bins == 0] = 0\n    \n    return scores",
          "objective": 0.04236,
          "other_inf": null
     },
     {
          "algorithm": "New Algorithm: Calculate the scores as the difference between the bin's capacity divided by the item size and the bin index.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the scores as the difference between the bin's capacity divided by the item size and the bin index\n    scores = (bins / item) - np.arange(len(bins))\n    \n    # Return the scores\n    return scores",
          "objective": 0.04246,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Multiply each bin's capacity by the square of the reciprocal of the bin's index, multiplied by the square root of the reciprocal of the item's size.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the scores for each bin based on the formula provided\n    scores = (bins * (np.sqrt(item) / bins)) ** 2\n    \n    # Return the scores as a NumPy array\n    return scores",
          "objective": 0.04276,
          "other_inf": null
     }
]