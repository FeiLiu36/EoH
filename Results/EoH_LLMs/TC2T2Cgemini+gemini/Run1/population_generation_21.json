[
     {
          "algorithm": "Calculate the score for each bin as the sum of the reciprocal of the difference between the bin capacity and the item size and a penalty for bins that have reached half of the maximum capacity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    zeros = np.zeros_like(bins)\n    penalties = np.where(bins > (bins.max() // 2), zeros, 10000)\n    scores = 1.0 / np.maximum(bins - item, zeros) - penalties\n    return scores",
          "objective": 0.00986,
          "other_inf": null
     },
     {
          "algorithm": "Modified algorithm with a focus on penalizing bins with remaining capacities under a certain threshold: score = 1.0 / (bins - item) * (bins < 1.5 * item) - 0.5 * (bins - item <= 0.5 * item)",
          "code": "def score(item, bins):\n    scores = 1.0 / (bins - item) * (bins < 1.5 * item) - 0.5 * (bins - item <= 0.5 * item)\n    return scores",
          "objective": 0.01056,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Calculate the score for each bin as the inverse of the difference between the bin capacity and the item size, and then apply a penalty to bins that have a rest capacity that is less than half of the maximum capacity.",
          "code": "def score(item, bins):\n  scores = 1 / (bins - item)\n  penalty = (bins < bins.max() / 2)\n  scores[penalty] -= 1000\n  return scores",
          "objective": 0.01087,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: the score function will calculate the score of a bin based on an indicator function that checks if the rest capacity is more than twice the item size, and then takes the difference between the bin index and the number of feasible bins.",
          "code": "def score(item, bins):\n    indicator = np.where(bins > 2 * item, 1, 0)\n    num_feasible = np.count_nonzero(indicator)\n    scores = indicator * (bins - item) - (bins - num_feasible)\n    return scores",
          "objective": 0.01157,
          "other_inf": null
     },
     {
          "algorithm": "Prioritize bins that have capacities 2 times the item size, with a minimum score of 0.75 if the remaining capacity is less than the item size: scores = 1.0 / (bins - item) * (bins <= 2 * item) - 0.75 * (bins - item <= item)",
          "code": "def score(item, bins):\n  scores = 1.0 / (bins - item) * (bins <= 2 * item) - 0.75 * (bins - item <= item)\n  scores[bins < item] = -1e9\n  return scores",
          "objective": 0.01187,
          "other_inf": null
     },
     {
          "algorithm": "Prioritize bins with capacities between a given factor a and b times the item size, and penalize bins if the remaining capacity is less than half of the item size: score = 1.0 / (bins - item) * (a * item <= bins <= b * item) - 0.8 * (bins - item <= 0.5 * item)",
          "code": "import numpy as np\n\ndef score(item, bins):\n    \"\"\"\n    Score a set of bins to assign an item.\n\n    Args:\n        item (int): The size of the item to be assigned.\n        bins (np.array): The rest capacities of feasible bins, which are larger than the item size.\n\n    Returns:\n        np.array: The scores for the bins for assignment.\n    \"\"\"\n    a = 0.7\n    b = 1.3\n    scores = 1.0 / (bins - item) * (a * item <= bins) * (bins <= b * item) - 0.8 * (bins - item <= 0.5 * item)\n    return scores",
          "objective": 0.01238,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Calculate the score for each bin as the inverse of the difference between the bin capacity and the item size, and then apply a penalty to bins that have a rest capacity that is less than half of the maximum capacity but also with a higher weight.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = 1.0 / np.maximum(bins - item, 1e-9)  # Inverse difference between capacity and item size\n    penalty = (bins < 0.5 * np.max(bins)) & (bins > 0)  # Penalty for bins with less than half capacity\n    weight = np.log10(np.maximum(bins - item, 1e-9))\n    scores[penalty] -= weight[penalty]\n    return scores",
          "objective": 0.01378,
          "other_inf": null
     },
     {
          "algorithm": "New Algorithm: Prioritize bins that have capacities equal to the item size, with a minimum score of 0.5 if the remaining capacity is less than the item size: scores = 1.0 / (bins - item) * (bins == item) - 0.5 * (bins - item <= item)",
          "code": "import numpy as np\n\ndef score(item, bins):\n  \"\"\"Score a set of bins to assign an item.\n\n  In each step, the item will be assigned to the bin with the maximum score.\n  If the rest capacity of a bin equals the maximum capacity, it will not be used.\n\n  Args:\n    item: The size of the current item.\n    bins: A Numpy array of the rest capacities of feasible bins, which are larger\n      than the item size.\n\n  Returns:\n    A Numpy array of the scores for the bins.\n  \"\"\"\n\n  # Prioritize bins that have capacities equal to the item size.\n  scores = 1.0 / (bins - item) * (bins == item)\n\n  # Penalize bins that have less remaining capacity than the item size.\n  scores -= 0.5 * (bins - item <= item)\n\n  return scores",
          "objective": 0.01449,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Penalize a bin's capacity to be full, but have a lower penalty than the first algorithm, prioritize bins with capacity greater than the item size: scores = 1.0 / (bins - item) - 0.1 * (bins - item > 0) + 0.3 * (bins - item > (item / 2))",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = 1.0 / (bins - item) - 0.1 * (bins - item > 0) + 0.3 * (bins - item > (item / 2))\n    return scores",
          "objective": 0.01509,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Score bins based on the sum of the inverse of the difference between the remaining capacity and the item size (with a higher penalty for bins with a smaller remaining capacity): scores = 1.0 / (bins - item) - 0.2 * (bins - item < 0.5 * item) - 0.1 * (bins - item < 0.25 * item)",
          "code": "def score(item, bins):\n    scores = 1.0 / (bins - item) - 0.2 * (bins - item < 0.5 * item) - 0.1 * (bins - item < 0.25 * item)\n    return scores",
          "objective": 0.016,
          "other_inf": null
     },
     {
          "algorithm": "Prioritize bins that have capacities 7 times the item size, penalized if the remaining capacity is less than half of the item size: scores = 1.0 / (bins - item) * (bins <= 7 * item) - 0.2 * (bins - item <= 0.5 * item)",
          "code": "def score(item, bins):\n    \"\"\"Calculate the score for each bin for item assignment.\n\n    Args:\n    item: The size of the item to be assigned.\n    bins: A numpy array of the remaining capacities of feasible bins.\n\n    Returns:\n    scores: A numpy array of the scores for each bin.\n    \"\"\"\n\n    # Prioritize bins with enough capacity to fit the item.\n    scores = np.where(bins >= item, 1.0 / (bins - item), 0.0)\n\n    # Penalize bins that are nearly full.\n    scores -= 0.2 * np.where(bins - item <= 0.5 * item, 1.0, 0.0)\n\n    # Penalize bins that are too big.\n    scores *= np.where(bins <= 7 * item, 1.0, 0.0)\n\n    return scores",
          "objective": 0.0162,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Score bins based on the sum of the inverse of the remaining capacity and the item size, with a higher penalty for bins with larger remaining capacity: scores = 1.0 / (bins - item) + 0.2 * (bins - item > 0.5 * item)",
          "code": "import numpy as np\n\ndef score(item, bins):\n  scores = 1.0 / (bins - item) + 0.2 * (bins - item > 0.5 * item)\n  return scores",
          "objective": 0.0163,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Prioritize bins that have capacities 3 times the item size, penalized if the remaining capacity is less than half of the item size: scores = 1.0 / (bins - item) * (bins <= 3 * item) - 0.2 * (bins - item <= 0.5 * item)",
          "code": "import numpy as np\n\ndef score(item, bins):\n  scores = 1.0 / (bins - item) * (bins <= 3 * item) - 0.2 * (bins - item <= 0.5 * item)\n  return scores",
          "objective": 0.0164,
          "other_inf": null
     },
     {
          "algorithm": "Score bins based on the sum of the inverse of the remaining capacity and the item size, with a higher penalty for bins with smaller remaining capacity: scores = 1.0 / (bins - item) - 0.2 * (bins - item < 0.5 * item)",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = 1.0 / (bins - item) - 0.2 * (bins - item < 0.5 * item)\n    return scores",
          "objective": 0.0166,
          "other_inf": null
     },
     {
          "algorithm": "Prioritize bins that have capacities between half and 2 times the item size, penalized if the remaining capacity is less than half of the item size: score = 1.0 / (bins - item) * (0.5 * item <= bins <= 2 * item) - 0.4 * (bins - item <= 0.5 * item)",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the bin factor\n    bins_factor = 1.0 / (bins - item)\n\n    # Calculate the bin capacity range\n    lower_capacity_bound = 0.5 * item\n    upper_capacity_bound = 2 * item\n\n    # Calculate the bin capacity range score\n    capacity_range_score = (0.5 * item <= bins) * (bins <= 2 * item)\n\n    # Calculate the bin remaining capacity score\n    remaining_capacity_score = -0.4 * (bins - item <= 0.5 * item)\n\n    # Calculate the final score\n    scores = bins_factor * capacity_range_score + remaining_capacity_score\n\n    return scores",
          "objective": 0.01741,
          "other_inf": null
     },
     {
          "algorithm": "Prioritize bins that have zero remaining capacity after placing the item, penalized if the bin capacity is less than 2 times the item size: Score = 1.0 / (bins - item) * (bins - item == 0) - 0.2 * (bins < 2 * item)",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = 1.0 / (bins - item) * (bins - item == 0) - 0.2 * (bins < 2 * item)\n    return scores",
          "objective": 0.01761,
          "other_inf": null
     },
     {
          "algorithm": "Prioritize bins that have capacities between a given factor a and b times the item size, penalized if the remaining capacity is less than half of the item size: score = 1.0 / (bins - item) * (a * item <= bins <= b * item) - 0.4 * (bins - item <= 0.5 * item)",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = 1.0 / (bins - item) * (item <= bins) - 0.4 * (bins - item <= 0.5 * item)\n    scores[bins < item] = -1e10\n    return scores",
          "objective": 0.01781,
          "other_inf": null
     },
     {
          "algorithm": "Prioritize bins that have capacities less than twice the item size, penalized if the remaining capacity is less than half of the item size and penalized if the remaining capacity is more than 0.25 times the item size: score = 1.0 / (bins - item) * (bins < 2 * item) - 0.4 * (bins - item <= 0.5 * item) + 0.2 * (0.25 * item <= bins - item <= 0.5 * item)",
          "code": "import numpy as np\n\ndef score(item, bins):\n\n    feas_bins = bins[bins >= item]\n    \n    score1 = 1.0 / (feas_bins - item)\n    score1[feas_bins >= 2*item] = 0\n\n    score2 = -0.4 * (feas_bins - item <= 0.5*item)\n\n    score3 = 0.2 * (0.25*item <= feas_bins - item) * (feas_bins - item <= 0.5*item)\n\n    scores = score1 + score2 + score3\n\n    return scores",
          "objective": 0.01791,
          "other_inf": null
     },
     {
          "algorithm": "{New algorithm: Penalize a bin's capacity to be full, but have a lower penalty than the first algorithm, prioritize bins with capacity greater than the item size: scores = 1.0 / (bins - item) - 0.2 * (bins - item > 0) + 0.35 * (bins - item > (item / 2))}",
          "code": "import numpy as np\n\ndef score(item, bins):\n  scores = 1.0 / (bins - item) - 0.2 * (bins - item > 0) + 0.35 * (bins - item > (item / 2))\n  return scores",
          "objective": 0.01821,
          "other_inf": null
     },
     {
          "algorithm": "Algorithm: The new algorithm computes a score for each bin based on the sum of the reciprocal of the difference between the bin capacity and the item size and a penalty for bins with smaller remaining capacity.",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n  \"\"\"Computes a score for each bin based on the sum of the reciprocal of the difference between the bin capacity and the item size and a penalty for bins with smaller remaining capacity.\n\n  Args:\n    item: The size of current item.\n    bins: The rest capacities of feasible bins, which are larger than the item size.\n\n  Returns:\n    The scores for the bins for assignment.\n  \"\"\"\n\n  # Calculate the difference between the bin capacity and the item size.\n  diff = bins - item\n\n  # Calculate the reciprocal of the difference.\n  reciprocal = 1.0 / diff\n\n  # Calculate the penalty for bins with smaller remaining capacity.\n  penalty = np.where(diff <= 0.5 * bins, 1.0, 0.0)\n\n  # Calculate the score for each bin.\n  scores = reciprocal - penalty\n\n  return scores",
          "objective": 0.01861,
          "other_inf": null
     }
]