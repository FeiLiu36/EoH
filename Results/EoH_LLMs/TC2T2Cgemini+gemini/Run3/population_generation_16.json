[
     {
          "algorithm": "New algorithm: Calculate the score for each bin based on the product of the inverse of the absolute difference between the item size and the bin's rest capacity, the square root of the bin's size, and the exponential of the product of the bin's rest capacity with the bin's index minus half of the item size",
          "code": "import numpy as np\n\ndef score(item, bins):\n    inv_abs_diff = 1 / np.abs(bins - item)\n    sqrt_size = np.sqrt(bins)\n    exp_product = np.exp((bins - item/2) * np.arange(len(bins)))\n    scores = inv_abs_diff * sqrt_size * exp_product\n    return scores",
          "objective": 0.00845,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Calculate the score for each bin based on the product of the bin's size, the exponential of the product of the bin's rest capacity with its index minus half of the item size, and the inverse of the absolute difference between the item size and the bin's rest capacity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n  \"\"\"\n  Calculate the score for each bin based on the product of the bin's size, the exponential of the product of the bin's rest capacity with its index minus half of the item size, and the inverse of the absolute difference between the item size and the bin's rest capacity.\n\n  Args:\n    item: The size of the current item.\n    bins: The rest capacities of feasible bins, which are larger than the item size.\n\n  Returns:\n    The scores for the bins for assignment.\n  \"\"\"\n\n  # Calculate the product of the bin's size, the exponential of the product of the bin's rest capacity with its index minus half of the item size, and the inverse of the absolute difference between the item size and the bin's rest capacity.\n  scores = bins * np.exp((bins - item / 2) * np.arange(len(bins))) / np.abs(bins - item)\n\n  # Return the scores.\n  return scores",
          "objective": 0.00865,
          "other_inf": null
     },
     {
          "algorithm": "Calculate the score for each bin based on the product of the inverse of the absolute difference between the item size and the bin's rest capacity, the square root of the bin's size, and the exponential of the product of the bin's rest capacity with the bin's index minus half of the item size.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    rest_indicator = np.maximum(np.zeros(bins.size), bins - item)\n    scores = 1 / np.abs(rest_indicator) * np.sqrt(bins) * np.exp(rest_indicator * np.arange(bins.size) - item * 0.5)\n    return scores",
          "objective": 0.00906,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Calculate the score for each bin based on the product of the inverse of the square of the rest capacity minus the item size, the square root of the bin's size, and the exponential of the product of the bin's rest capacity with the bin's index.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the rest capacity minus the item size\n    rest_capacity = bins - item\n\n    # Calculate the inverse of the square of the rest capacity\n    inv_rest_capacity = 1 / (rest_capacity ** 2)\n\n    # Calculate the square root of the bin's size\n    sqrt_bin_size = np.sqrt(bins)\n\n    # Calculate the exponential of the product of the bin's rest capacity with the bin's index\n    exp_rest_capacity_index = np.exp(rest_capacity * np.arange(len(bins)))\n\n    # Calculate the scores\n    scores = inv_rest_capacity * sqrt_bin_size * exp_rest_capacity_index\n\n    return scores",
          "objective": 0.00916,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Calculate the score for each bin based on the product of the bin's size, the exponential of the product of the bin's rest capacity with its index, and the inverse of the absolute difference between the item size and the bin's rest capacity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n  \"\"\"Calculates a score for each bin based on the product of the bin's size, the exponential of the product of the bin's rest capacity with its index, and the inverse of the absolute difference between the item size and the bin's rest capacity.\n\n  Args:\n    item: The size of the current item.\n    bins: A Numpy array of the rest capacities of feasible bins, which are larger than the item size.\n\n  Returns:\n    A Numpy array of the scores for the bins.\n  \"\"\"\n\n\n  # Calculate the rest capacity of each bin.\n  rest_capacities = bins - item\n\n  # Calculate the score for each bin.\n  scores = np.multiply(bins, np.exp(np.multiply(rest_capacities, np.arange(1, len(rest_capacities) + 1)))) / np.abs(rest_capacities)\n\n  return scores",
          "objective": 0.00956,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Calculate the score for each bin based on the sum of the exponential of the product of the bin's rest capacity with the bin's index minus half of the item size, the square root of the bin's size, and the inverse of the absolute difference between the item size and the bin's rest capacity",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.exp(bins * (np.arange(1, bins.size+1) - item/2)) * np.sqrt(bins) * 1/np.abs(bins - item)\n    return scores",
          "objective": 0.00976,
          "other_inf": null
     },
     {
          "algorithm": "Assign to bins that are closer to their maximum capacity without violating the given constraint, and penalize bins for being much larger than the item size.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = (1 - bins / item) * (bins <= 2 * item) * (bins != 0)\n    return scores",
          "objective": 0.01157,
          "other_inf": null
     },
     {
          "algorithm": "Calculate the score for each bin based on the multiplication of the inverse of the absolute difference between the item size and the bin's rest capacity, the square root of the product of the bin's size and the bin's rest capacity, and the exponential of the product of the bin's index with the bin's rest capacity.",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n  scores = (1 / np.abs(bins - item)) * np.sqrt(bins * (bins - item)) * np.exp(bins * np.arange(1, len(bins) + 1))\n  return scores",
          "objective": 0.01419,
          "other_inf": null
     },
     {
          "algorithm": "New Algorithm: For each item, multiply the sum of the square of the exponential of the square root of bin's capacity and its index, the square of the inverse of the absolute difference between item size and rest capacity, and the exponential of the product of bin's capacity with its index minus half of item size, by an integer that is exponential of the difference between item size and bin's capacity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n  \"\"\"\n  Calculate the score for each bin.\n\n  Args:\n    item: The size of the current item.\n    bins: The remaining capacities of the feasible bins\n\n  Returns:\n    scores: The scores for each bin.\n  \"\"\"\n\n  # Calculate the exponentials of the square root of bin capacities and their indices.\n  exp_cap_sqrt = np.exp(np.sqrt(bins))\n\n  # Calculate the exponentials of the square root of bin indices.\n  exp_idx_sqrt = np.exp(np.sqrt(np.arange(1, len(bins) + 1)))\n\n  # Calculate the squares of the inverse of the absolute difference between item size and rest capacity.\n  inv_diff_sqr = (1 / np.abs(item - bins)) ** 2\n\n  # Calculate the exponentials of the product of bin capacities with their indices minus half of item size.\n  exp_cap_idx_item = np.exp(bins * np.arange(1, len(bins) + 1) - item / 2)\n\n  # Calculate the scores.\n  scores = (exp_cap_sqrt * exp_idx_sqrt * inv_diff_sqr * exp_cap_idx_item) * np.exp(item - bins)\n\n  return scores",
          "objective": 0.01449,
          "other_inf": null
     },
     {
          "algorithm": "{Algorithm: Calculate the score for each bin based on the sum of the inverse of the absolute difference between the item size and the bin's rest capacity, the exponential of the product of the bin's rest capacity with the bin's index minus half of the item size, and the square root of the bin's size}",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = 1.0 / np.abs(bins - item) + np.exp(bins * np.arange(len(bins)) - 0.5 * item) + np.sqrt(bins)\n    return scores",
          "objective": 0.01549,
          "other_inf": null
     },
     {
          "algorithm": "Calculate the score for each bin based on the product of the bin's size, the exponential of the product of the bin's rest capacity and its index, and the inverse of the absolute difference between the item size and the bin's rest capacity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n  \"\"\"Calculate the score for each bin based on the product of the bin's size, the exponential of the product of the bin's rest capacity and its index, and the inverse of the absolute difference between the item size and the bin's rest capacity.\n\n  Args:\n    item: The size of current item.\n    bins: The rest capacities of feasible bins, which are larger than the item size.\n\n  Returns:\n    The scores for the bins for assignment.\n  \"\"\"\n\n  # Calculate the absolute difference between the item size and the bin's rest capacity.\n  diff = np.abs(item - bins)\n\n  # Calculate the exponential of the product of the bin's rest capacity and its index.\n  exp = np.exp(np.multiply(bins, np.arange(len(bins))))\n\n  # Calculate the score for each bin.\n  scores = np.multiply(np.multiply(bins, exp), 1 / diff)\n\n  return scores",
          "objective": 0.016,
          "other_inf": null
     },
     {
          "algorithm": "Calculate the score for each bin based on the product of the inverse of the absolute difference between the item size and the bin's rest capacity, the exponential of the product of the bin's rest capacity and its index, and the square of the bin's size.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    \"\"\"Calculate the score for each bin based on the product of the inverse of the absolute difference between the item size and the bin's rest capacity, the exponential of the product of the bin's rest capacity and its index, and the square of the bin's size.\n\n    Args:\n        item: The size of the current item.\n        bins: The rest capacities of feasible bins, which are larger than the item size.\n\n    Returns:\n        scores: The scores for the bins for assignment.\n    \"\"\"\n\n    # Calculate the absolute difference between the item size and the bin's rest capacity.\n    abs_diff = np.abs(bins - item)\n\n    # Calculate the inverse of the absolute difference.\n    inv_abs_diff = 1 / abs_diff\n\n    # Calculate the product of the bin's rest capacity and its index.\n    prod_bin_rest_index = bins * np.arange(1, len(bins) + 1)\n\n    # Calculate the exponential of the product of the bin's rest capacity and its index.\n    exp_prod_bin_rest_index = np.exp(prod_bin_rest_index)\n\n    # Calculate the square of the bin's size.\n    bin_size_squared = np.square(bins)\n\n    # Calculate the score for each bin.\n    scores = inv_abs_diff * exp_prod_bin_rest_index * bin_size_squared\n\n    return scores",
          "objective": 0.0161,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Calculate the score for each bin based on the product of the inverse of the absolute difference between the item size and the bin's rest capacity, the square root of the bin's size, and the exponential of the product of the bin's rest capacity with the bin's index.",
          "code": "import numpy as np\n\ndef score(item, bins):\n  scores = np.multiply(1.0 / np.abs(item - bins), np.sqrt(bins)) * np.exp(bins * np.arange(bins.shape[0]))\n  return scores",
          "objective": 0.0164,
          "other_inf": null
     },
     {
          "algorithm": "The score for each bin is calculated based on the product of the inverse of the absolute difference between the item size and the bin's rest capacity, the square root of the exponential of the product of the bin's rest capacity and its index, and the exponential of the product of the bin's rest capacity and its index minus half of the item size",
          "code": "import numpy as np\n\ndef score(item, bins):\n    \"\"\"\n    Calculate the score for each bin for assigning an item.\n\n    Args:\n        item: Size of the item to be assigned.\n        bins: Rest capacities of the feasible bins, which are larger than the item size.\n\n    Returns:\n        Scores for the bins for assignment.\n    \"\"\"\n\n    # Check if any bin has enough capacity to hold the item.\n    if np.min(bins) < item:\n        return np.zeros_like(bins)\n\n    # Calculate the absolute difference between the item size and the bin's rest capacity.\n    diff = np.abs(bins - item)\n\n    # Calculate the inverse of the absolute difference.\n    inv_diff = 1 / diff\n\n    # Calculate the square root of the exponential of the product of the bin's rest capacity and its index.\n    sqrt_exp_prod_bin_capacity_index = np.sqrt(np.exp(bins * np.arange(1, len(bins) + 1)))\n\n    # Calculate the exponential of the product of the bin's rest capacity and its index minus half of the item size.\n    exp_prod_bin_capacity_index_minus_half_item_size = np.exp(bins * np.arange(1, len(bins) + 1) - item / 2)\n\n    # Calculate the score for each bin.\n    scores = inv_diff * sqrt_exp_prod_bin_capacity_index * exp_prod_bin_capacity_index_minus_half_item_size\n\n    return scores",
          "objective": 0.02083,
          "other_inf": null
     },
     {
          "algorithm": "Combining the ideas of prioritizing bins based on their remaining capacity and penalizing bins with large differences between their remaining capacity and the item size, the new algorithm assigns a score to each bin as the product of the inverse of the square root of the bin's remaining capacity and the inverse of the absolute difference between the bin's remaining capacity and the item size.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    \"\"\"\n    This function assigns a score to each bin as the product of the inverse of the square root of the bin's remaining capacity and the inverse of the absolute difference between the bin's remaining capacity and the item size.\n\n    Args:\n        item (int): The size of the current item.\n        bins (np.array): The remaining capacities of feasible bins, which are larger than the item size.\n\n    Returns:\n        np.array: The scores for the bins for assignment.\n    \"\"\"\n\n    # Calculate the remaining capacity of each bin after assigning the item.\n    remaining_capacities = bins - item\n\n    # Calculate the inverse of the square root of the remaining capacity of each bin.\n    inverse_sqrt_remaining_capacities = 1 / np.sqrt(remaining_capacities)\n\n    # Calculate the absolute difference between the remaining capacity of each bin and the item size.\n    abs_differences = np.abs(remaining_capacities - item)\n\n    # Calculate the inverse of the absolute difference between the remaining capacity of each bin and the item size.\n    inverse_abs_differences = 1 / abs_differences\n\n    # Calculate the score for each bin as the product of the inverse of the square root of the remaining capacity and the inverse of the absolute difference between the remaining capacity and the item size.\n    scores = inverse_sqrt_remaining_capacities * inverse_abs_differences\n\n    return scores",
          "objective": 0.02163,
          "other_inf": null
     },
     {
          "algorithm": "New Algorithm: Calculate the score for each bin based on the product of the inverse of the square root of the absolute difference between the item size and the bin's rest capacity, the square of the bin's rest capacity, and the exponential of the product of the bin's rest capacity with the square of the bin's index.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    score_fun = lambda b: (1 / np.sqrt(np.abs(item-b))) * ((b**2)  * np.exp(b * ((b**2)/100)))\n    scores = score_fun(bins)\n    return scores",
          "objective": 0.02445,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: The bin score is calculated based on the product of the inverse of the rest capacity, the square root of the bin size, and the exponential of the product of the rest capacity and the square root of its index.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = 1./(bins - item)**2 * np.sqrt(bins)*np.exp(bins*np.sqrt(np.arange(1, len(bins)+1)))\n    return scores",
          "objective": 0.02535,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: The new algorithm employs a weighted sum of inverse of distance between item size and rest capacity, inverse of distance between bin index and item size, and a square root of bin's rest capacity, with all parameters being different from the original algorithm.",
          "code": "import numpy as np\ndef score(item, bins):\n    distance1 = np.abs(bins - item)\n    distance2 = np.abs(np.arange(len(bins)) - item)\n    scores = 1 / distance1 + 1 / distance2 + np.sqrt(bins)\n    scores[bins <= 0] = 0.\n    return scores",
          "objective": 0.02546,
          "other_inf": null
     },
     {
          "algorithm": "New Algorithm: Calculate the score for each bin based on the inverse of the distance between the item size and the bin's rest capacity, the square of the exponential of the product of the bin's rest capacity and its index, and the square root of the bin's size.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = 1 / np.abs(bins - item) * np.square(np.exp(bins * np.arange(1, len(bins) + 1))) * np.sqrt(bins)\n    return scores",
          "objective": 0.02797,
          "other_inf": null
     },
     {
          "algorithm": "{New Algorithm: Multiply the item size by the square of the exponential of the product of the bin's rest capacity and its index, and then divide the result by the distance between the item size and the bin's rest capacity. If the rest capacity of a bin is zero, it will not be used.}",
          "code": "import numpy as np\n\ndef score(item, bins):\n  scores = (item * np.square(np.exp(bins * np.arange(1, len(bins) + 1)))) / np.abs(bins - item)\n  return scores",
          "objective": 0.02827,
          "other_inf": null
     }
]