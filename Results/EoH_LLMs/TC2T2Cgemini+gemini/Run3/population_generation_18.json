[
     {
          "algorithm": "The bin score is the product of the inverse of the absolute difference between the item size and the bin's rest capacity, the geometric mean of the bin's size and rest capacity, and the exponential of the product of the bin's index and rest capacity.",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.array) -> np.array:\n  \"\"\"Calculates the score for each bin based on the given item size.\n\n  The score is the product of the inverse of the absolute difference between the item size and the bin's rest capacity, the geometric mean of the bin's size and rest capacity, and the exponential of the product of the bin's index and rest capacity.\n\n  Args:\n    item: The size of the item to be assigned.\n    bins: A Numpy array of the rest capacities of the feasible bins, which are larger than the item size.\n\n  Returns:\n    A Numpy array of the scores for the bins.\n  \"\"\"\n\n  # Calculate the absolute difference between the item size and the bin's rest capacity.\n  diff = np.abs(bins - item)\n\n  # Calculate the inverse of the absolute difference.\n  inv_diff = 1 / diff\n\n  # Calculate the geometric mean of the bin's size and rest capacity.\n  geom_mean = np.sqrt(bins * (bins - item))\n\n  # Calculate the exponential of the product of the bin's index and rest capacity.\n  exp_prod = np.exp(np.arange(len(bins)) * (bins - item))\n\n  # Calculate the score for each bin.\n  scores = inv_diff * geom_mean * exp_prod\n\n  return scores",
          "objective": 0.00835,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Calculate the score for each bin based on the product of the inverse of the absolute difference between the item size and the bin's rest capacity, the square root of the bin's size, and the exponential of the product of the bin's rest capacity with the bin's index minus half of the item size",
          "code": "import numpy as np\n\ndef score(item, bins):\n    inv_abs_diff = 1 / np.abs(bins - item)\n    sqrt_size = np.sqrt(bins)\n    exp_product = np.exp((bins - item/2) * np.arange(len(bins)))\n    scores = inv_abs_diff * sqrt_size * exp_product\n    return scores",
          "objective": 0.00845,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Calculate the score for each bin based on the product of the bin's size, the exponential of the product of the bin's rest capacity with its index minus half of the item size, and the inverse of the absolute difference between the item size and the bin's rest capacity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n  \"\"\"\n  Calculate the score for each bin based on the product of the bin's size, the exponential of the product of the bin's rest capacity with its index minus half of the item size, and the inverse of the absolute difference between the item size and the bin's rest capacity.\n\n  Args:\n    item: The size of the current item.\n    bins: The rest capacities of feasible bins, which are larger than the item size.\n\n  Returns:\n    The scores for the bins for assignment.\n  \"\"\"\n\n  # Calculate the product of the bin's size, the exponential of the product of the bin's rest capacity with its index minus half of the item size, and the inverse of the absolute difference between the item size and the bin's rest capacity.\n  scores = bins * np.exp((bins - item / 2) * np.arange(len(bins))) / np.abs(bins - item)\n\n  # Return the scores.\n  return scores",
          "objective": 0.00865,
          "other_inf": null
     },
     {
          "algorithm": "Calculate the score for each bin based on the product of the inverse of the absolute difference between the item size and the bin's rest capacity, the square root of the bin's size, and the exponential of the product of the bin's rest capacity with the bin's index minus half of the item size.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    rest_indicator = np.maximum(np.zeros(bins.size), bins - item)\n    scores = 1 / np.abs(rest_indicator) * np.sqrt(bins) * np.exp(rest_indicator * np.arange(bins.size) - item * 0.5)\n    return scores",
          "objective": 0.00906,
          "other_inf": null
     },
     {
          "algorithm": "Calculate the score of each bin by multiplying the exponential of the difference between the item's size and the bin's rest capacity with the square root of the exponential of the product of the bin's rest capacity and its index, and the exponential of the sum of the inverse of the absolute difference between the item's size and the bin's rest capacity and the square root of the bin's size",
          "code": "import numpy as np\n\ndef score(item, bins):\n    rest_capacities = bins - item\n    scores = np.exp(-np.abs(rest_capacities)) * np.sqrt(np.exp(rest_capacities * np.arange(1, len(bins) + 1))) * np.exp(1 / np.abs(rest_capacities) + np.sqrt(bins))\n    return scores",
          "objective": 0.00916,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Calculate the score for each bin based on the product of the bin's size, the exponential of the product of the bin's rest capacity with its index, and the inverse of the absolute difference between the item size and the bin's rest capacity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n  \"\"\"Calculates a score for each bin based on the product of the bin's size, the exponential of the product of the bin's rest capacity with its index, and the inverse of the absolute difference between the item size and the bin's rest capacity.\n\n  Args:\n    item: The size of the current item.\n    bins: A Numpy array of the rest capacities of feasible bins, which are larger than the item size.\n\n  Returns:\n    A Numpy array of the scores for the bins.\n  \"\"\"\n\n\n  # Calculate the rest capacity of each bin.\n  rest_capacities = bins - item\n\n  # Calculate the score for each bin.\n  scores = np.multiply(bins, np.exp(np.multiply(rest_capacities, np.arange(1, len(rest_capacities) + 1)))) / np.abs(rest_capacities)\n\n  return scores",
          "objective": 0.00956,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Calculate the score for each bin based on the sum of the exponential of the product of the bin's rest capacity with the bin's index minus half of the item size, the square root of the bin's size, and the inverse of the absolute difference between the item size and the bin's rest capacity",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.exp(bins * (np.arange(1, bins.size+1) - item/2)) * np.sqrt(bins) * 1/np.abs(bins - item)\n    return scores",
          "objective": 0.00976,
          "other_inf": null
     },
     {
          "algorithm": "Assign to bins that are closer to their maximum capacity without violating the given constraint, and penalize bins for being much larger than the item size.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = (1 - bins / item) * (bins <= 2 * item) * (bins != 0)\n    return scores",
          "objective": 0.01157,
          "other_inf": null
     },
     {
          "algorithm": "A comprehensive score that combines the geometric mean of the bin's size and rest capacity, the exponential of the product of the bin's index and rest capacity, and the inverse of the absolute difference between the item size and the bin's rest capacity",
          "code": "import numpy as np\n\ndef score(item, bins):\n  \"\"\"Scores a set of bins to assign an item to.\n\n  Args:\n    item: The size of the item to be assigned.\n    bins: A Numpy array of the rest capacities of the feasible bins, which are\n      larger than the item size.\n\n  Returns:\n    A Numpy array of the scores for the bins.\n  \"\"\"\n\n  # Calculate the geometric mean of the bin's size and rest capacity.\n  size_rest_capacity_gm = np.sqrt(bins * (bins - item))\n\n  # Calculate the exponential of the product of the bin's index and rest capacity.\n  index_rest_capacity_exp = np.exp(bins * np.arange(len(bins)))\n\n  # Calculate the inverse of the absolute difference between the item size and the\n  # bin's rest capacity.\n  item_rest_capacity_diff_inv = 1 / np.abs(bins - item)\n\n  # Combine the three scores into a comprehensive score.\n  scores = size_rest_capacity_gm * index_rest_capacity_exp * item_rest_capacity_diff_inv\n\n  return scores",
          "objective": 0.01318,
          "other_inf": null
     },
     {
          "algorithm": "Calculate the score for each bin based on the multiplication of the inverse of the absolute difference between the item size and the bin's rest capacity, the square root of the product of the bin's size and the bin's rest capacity, and the exponential of the product of the bin's index with the bin's rest capacity.",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n  scores = (1 / np.abs(bins - item)) * np.sqrt(bins * (bins - item)) * np.exp(bins * np.arange(1, len(bins) + 1))\n  return scores",
          "objective": 0.01419,
          "other_inf": null
     },
     {
          "algorithm": "The backbone idea in the provided algorithms is to calculate the score for each bin based on the product or multiplication of functions of the bin's rest capacity and its index and the inverse function of the absolute difference between the item size and the bin's rest capacity. A new algorithm that has a totally different form can be designed by using the sum or addition of the functions.",
          "code": "import numpy as np\n\ndef score(item, bins):\n  \"\"\"\n  Calculates the score for each bin based on the sum of functions of the bin's rest capacity and its index and the inverse function of the absolute difference between the item size and the bin's rest capacity.\n\n  Args:\n    item: The size of the current item.\n    bins: The rest capacities of feasible bins, which are larger than the item size.\n\n  Returns:\n    The scores for the bins for assignment.\n  \"\"\"\n\n  # Calculate the absolute difference between the item size and the bin's rest capacity.\n  abs_diff = np.abs(bins - item)\n\n  # Calculate the inverse function of the absolute difference.\n  inv_abs_diff = 1 / abs_diff\n\n  # Calculate the sum of the functions of the bin's rest capacity and its index and the inverse function of the absolute difference.\n  scores = bins + np.arange(len(bins)) + inv_abs_diff\n\n  return scores",
          "objective": 0.01449,
          "other_inf": null
     },
     {
          "algorithm": "New Algorithm: Calculate the score for each bin based on the product of the inverse of the square of the absolute difference between the item size and the bin's rest capacity, the exponential of the product of the bin's rest capacity and its index, and the square of the bin's size.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    \"\"\"\n    Calculate the score for each bin based on the product of the inverse of the square of the absolute difference between the item size and the bin's rest capacity, the exponential of the product of the bin's rest capacity and its index, and the square of the bin's size.\n\n    Args:\n        item (int): Size of current item.\n        bins (np.array): Rest capacities of feasible bins, which are larger than the item size.\n\n    Returns:\n        np.array: Scores for the bins for assignment.\n    \"\"\"\n\n    # Calculate the absolute difference between the item size and the bin's rest capacity\n    diff = np.abs(bins - item)\n\n    # Calculate the inverse of the square of the absolute difference\n    inv_diff_sq = 1 / diff**2\n\n    # Calculate the exponential of the product of the bin's rest capacity and its index\n    exp_cap_idx = np.exp(bins * np.arange(len(bins)))\n\n    # Calculate the square of the bin's size\n    bin_size_sq = bins**2\n\n    # Calculate the score for each bin\n    scores = inv_diff_sq * exp_cap_idx * bin_size_sq\n\n    return scores",
          "objective": 0.01499,
          "other_inf": null
     },
     {
          "algorithm": "{Algorithm: Calculate the score for each bin based on the sum of the inverse of the absolute difference between the item size and the bin's rest capacity, the exponential of the product of the bin's rest capacity with the bin's index minus half of the item size, and the square root of the bin's size}",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = 1.0 / np.abs(bins - item) + np.exp(bins * np.arange(len(bins)) - 0.5 * item) + np.sqrt(bins)\n    return scores",
          "objective": 0.01549,
          "other_inf": null
     },
     {
          "algorithm": "Score each bin based on the product of the bin's rest capacity, the exponential of the product of the bin's size and its index, and the inverse of the absolute difference between the item size and the bin's capacity, divided by the bin index.",
          "code": "import numpy as np\n\ndef score(item, bins):\n  scores = (bins * np.exp(bins * np.arange(1, len(bins) + 1)) * (1 / np.abs(bins / item - 1))) / np.arange(1, len(bins) + 1)\n  return scores",
          "objective": 0.0156,
          "other_inf": null
     },
     {
          "algorithm": "Calculate the score for each bin based on the product of the bin's size, the exponential of the product of the bin's rest capacity and its index, and the inverse of the absolute difference between the item size and the bin's rest capacity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n  \"\"\"Calculate the score for each bin based on the product of the bin's size, the exponential of the product of the bin's rest capacity and its index, and the inverse of the absolute difference between the item size and the bin's rest capacity.\n\n  Args:\n    item: The size of current item.\n    bins: The rest capacities of feasible bins, which are larger than the item size.\n\n  Returns:\n    The scores for the bins for assignment.\n  \"\"\"\n\n  # Calculate the absolute difference between the item size and the bin's rest capacity.\n  diff = np.abs(item - bins)\n\n  # Calculate the exponential of the product of the bin's rest capacity and its index.\n  exp = np.exp(np.multiply(bins, np.arange(len(bins))))\n\n  # Calculate the score for each bin.\n  scores = np.multiply(np.multiply(bins, exp), 1 / diff)\n\n  return scores",
          "objective": 0.016,
          "other_inf": null
     },
     {
          "algorithm": "Calculate the score for each bin based on the product of the inverse of the absolute difference between the item size and the bin's rest capacity, the exponential of the product of the bin's rest capacity and its index, and the square of the bin's size.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    \"\"\"Calculate the score for each bin based on the product of the inverse of the absolute difference between the item size and the bin's rest capacity, the exponential of the product of the bin's rest capacity and its index, and the square of the bin's size.\n\n    Args:\n        item: The size of the current item.\n        bins: The rest capacities of feasible bins, which are larger than the item size.\n\n    Returns:\n        scores: The scores for the bins for assignment.\n    \"\"\"\n\n    # Calculate the absolute difference between the item size and the bin's rest capacity.\n    abs_diff = np.abs(bins - item)\n\n    # Calculate the inverse of the absolute difference.\n    inv_abs_diff = 1 / abs_diff\n\n    # Calculate the product of the bin's rest capacity and its index.\n    prod_bin_rest_index = bins * np.arange(1, len(bins) + 1)\n\n    # Calculate the exponential of the product of the bin's rest capacity and its index.\n    exp_prod_bin_rest_index = np.exp(prod_bin_rest_index)\n\n    # Calculate the square of the bin's size.\n    bin_size_squared = np.square(bins)\n\n    # Calculate the score for each bin.\n    scores = inv_abs_diff * exp_prod_bin_rest_index * bin_size_squared\n\n    return scores",
          "objective": 0.0161,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Calculate the score for each bin based on the product of the inverse of the absolute difference between the item size and the bin's rest capacity, the square root of the bin's size, and the exponential of the product of the bin's rest capacity with the bin's index.",
          "code": "import numpy as np\n\ndef score(item, bins):\n  scores = np.multiply(1.0 / np.abs(item - bins), np.sqrt(bins)) * np.exp(bins * np.arange(bins.shape[0]))\n  return scores",
          "objective": 0.0164,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Score each bin based on the product of the bin's size, the exponential of the product of the bin's rest capacity and its index, and the inverse of the absolute difference between the item size and the bin's rest capacity, and the bin index.",
          "code": "def score(item, bins):\n    scores = bins * np.exp(bins * np.arange(1, len(bins) + 1)) * (1 / np.abs(bins - item) + 1) * np.arange(1, len(bins) + 1)\n    return scores",
          "objective": 0.0165,
          "other_inf": null
     },
     {
          "algorithm": "The score for each bin is calculated based on the product of the inverse of the absolute difference between the item size and the bin's rest capacity, the square root of the exponential of the product of the bin's rest capacity and its index, and the exponential of the product of the bin's rest capacity and its index minus half of the item size",
          "code": "import numpy as np\n\ndef score(item, bins):\n    \"\"\"\n    Calculate the score for each bin for assigning an item.\n\n    Args:\n        item: Size of the item to be assigned.\n        bins: Rest capacities of the feasible bins, which are larger than the item size.\n\n    Returns:\n        Scores for the bins for assignment.\n    \"\"\"\n\n    # Check if any bin has enough capacity to hold the item.\n    if np.min(bins) < item:\n        return np.zeros_like(bins)\n\n    # Calculate the absolute difference between the item size and the bin's rest capacity.\n    diff = np.abs(bins - item)\n\n    # Calculate the inverse of the absolute difference.\n    inv_diff = 1 / diff\n\n    # Calculate the square root of the exponential of the product of the bin's rest capacity and its index.\n    sqrt_exp_prod_bin_capacity_index = np.sqrt(np.exp(bins * np.arange(1, len(bins) + 1)))\n\n    # Calculate the exponential of the product of the bin's rest capacity and its index minus half of the item size.\n    exp_prod_bin_capacity_index_minus_half_item_size = np.exp(bins * np.arange(1, len(bins) + 1) - item / 2)\n\n    # Calculate the score for each bin.\n    scores = inv_diff * sqrt_exp_prod_bin_capacity_index * exp_prod_bin_capacity_index_minus_half_item_size\n\n    return scores",
          "objective": 0.02083,
          "other_inf": null
     },
     {
          "algorithm": "Combining the ideas of prioritizing bins based on their remaining capacity and penalizing bins with large differences between their remaining capacity and the item size, the new algorithm assigns a score to each bin as the product of the inverse of the square root of the bin's remaining capacity and the inverse of the absolute difference between the bin's remaining capacity and the item size.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    \"\"\"\n    This function assigns a score to each bin as the product of the inverse of the square root of the bin's remaining capacity and the inverse of the absolute difference between the bin's remaining capacity and the item size.\n\n    Args:\n        item (int): The size of the current item.\n        bins (np.array): The remaining capacities of feasible bins, which are larger than the item size.\n\n    Returns:\n        np.array: The scores for the bins for assignment.\n    \"\"\"\n\n    # Calculate the remaining capacity of each bin after assigning the item.\n    remaining_capacities = bins - item\n\n    # Calculate the inverse of the square root of the remaining capacity of each bin.\n    inverse_sqrt_remaining_capacities = 1 / np.sqrt(remaining_capacities)\n\n    # Calculate the absolute difference between the remaining capacity of each bin and the item size.\n    abs_differences = np.abs(remaining_capacities - item)\n\n    # Calculate the inverse of the absolute difference between the remaining capacity of each bin and the item size.\n    inverse_abs_differences = 1 / abs_differences\n\n    # Calculate the score for each bin as the product of the inverse of the square root of the remaining capacity and the inverse of the absolute difference between the remaining capacity and the item size.\n    scores = inverse_sqrt_remaining_capacities * inverse_abs_differences\n\n    return scores",
          "objective": 0.02163,
          "other_inf": null
     }
]