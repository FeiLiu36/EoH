[
     {
          "algorithm": " Calculate the score of a bin as the ratio of the item size to the rest capacity and add 1 to the ratio, and subtract 1 if the rest capacity is equal to the maximum capacity. ",
          "code": "import numpy as np\ndef score(item, bins):\n  scores = (item / bins + 1) - (bins == bins.max())\n  return scores",
          "objective": 0.03984,
          "other_inf": null
     },
     {
          "algorithm": "The score function will prioritize bins with specific patterns in their rest capacities. The  patterns are repeated but alternated by bin index.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    \"\"\"\n    Score bins based on their rest capacities and item size.\n\n    Args:\n        item (int): Size of current item.\n        bins (np.array): Rest capacities of feasible bins.\n\n    Returns:\n        np.array: Scores for the bins.\n    \"\"\"\n\n    # Pattern 1: Prioritize bins with rest capacity equal to item size\n    pattern1 = np.where(bins == item, np.full(bins.shape, 100), np.zeros(bins.shape))\n\n    # Pattern 2: Prioritize bins with alternating rest capacities\n    pattern2 = np.where(bins % (item * 2) == item, np.full(bins.shape, 50), np.zeros(bins.shape))\n\n    # Combine patterns\n    scores = pattern1 + pattern2\n\n    return scores",
          "objective": 0.03994,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Calculate the score for each bin as the ratio of the item size to the square root of the rest capacity, adding 1 to ensure positive scores and subtracting 1 from bins at the maximum capacity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.sqrt(bins) * (item / np.sqrt(np.maximum(bins - item, 0)))\n    scores[bins == min(bins)] -= 1\n    scores[bins == max(bins)] += 1\n    return scores",
          "objective": 0.04014,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Calculate the score of each bin as the inverse of the remaining capacity, and return the maximum score if the remaining capacity is less than a threshold, else return -1.",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.array) -> np.array:\n  threshold = bins.max() / 2\n  scores = 1.0 / np.maximum(bins - item, 1)\n  scores[bins < item] = -1\n  scores[bins <= threshold] = np.maximum(scores[bins <= threshold], -1)\n  return scores",
          "objective": 0.04045,
          "other_inf": null
     },
     {
          "algorithm": "\nNew algorithm: The score function will calculate the scores for each bin based on the remaining capacity, with a penalty for bins with maximum capacity to minimize the number of used bins.\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = (max_capacity - bins) + (bins == max_capacity) * item\n    return scores",
          "objective": 0.04105,
          "other_inf": null
     },
     {
          "algorithm": "\nNew algorithm: \n1. Initialize an empty array named 'scores' with the same length as the input array 'bins'.\n2. Calculate the scores for each bin by taking the minimum between the rest capacity of the bin and the size of the item.\n3. Set the score of a bin with maximum capacity to a very small negative value to prevent it from being used.\n4. Return the 'scores' array.\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.minimum(bins, item)\n    max_capacity_bin_index = np.argmax(bins)\n    scores[max_capacity_bin_index] = -99999999\n    return scores",
          "objective": 0.04226,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm multiplies the rest capacity with the inverse of the bin index, and subtracts the negative maximum rest capacity from the product to adjust the score for the maximum capacity bin and set it to 0 if feasible and -1 if infeasible.",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Calculates the scores for each bin based on the item size and remaining bin capacities.\n\n    Args:\n        item: Size of the item to be assigned.\n        bins: Array of remaining capacities for feasible bins.\n\n    Returns:\n        Array of scores for each bin.\n    \"\"\"\n\n    # Calculate the product of remaining capacity and inverse bin index.\n    scores = bins * (1.0 / np.arange(1, len(bins) + 1))\n\n    # Adjust scores for maximum capacity bin and infeasible bins.\n    max_capacity = np.max(bins)\n    scores[bins == max_capacity] = 0\n    scores[bins < item] = -1\n\n    # Return the scores.\n    return scores",
          "objective": 0.04246,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Calculate the score for each bin as the product of the rest capacity and the exponential of the negative bin number, and increase the score by 1 if the rest capacity of a bin equals the maximum capacity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n  \"\"\"Calculate the score for each bin.\n\n  Args:\n    item: The size of the current item.\n    bins: The rest capacities of feasible bins, which are larger than the item size.\n\n  Returns:\n    scores: The scores for the bins for assignment.\n  \"\"\"\n\n  scores = bins * np.exp(-np.arange(len(bins)))\n  scores[bins == bins.max()] += 1\n  return scores",
          "objective": 0.04256,
          "other_inf": null
     },
     {
          "algorithm": "\nDescription: \nThe algorithm calculates the scores for each bin based on their rest capacities and assigns the item to the bin with the maximum score, minimizing the number of used bins.\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = bins / np.maximum((bins - item), 1)\n    scores[bins == bins.max()] = 0\n    return scores",
          "objective": 0.04306,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm multiplies the rest capacity of a feasible bin with the reciprocal of the bin's index and adds a positive constant to encourage bin reuse.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    \"\"\"\n    This function scores a set of bins to assign an item.\n\n    Args:\n        item: The size of the current item.\n        bins: The rest capacities of feasible bins, which are larger than the item size.\n\n    Returns:\n        scores: The scores for the bins for assignment.\n    \"\"\"\n\n    # Calculate the reciprocal of the bin indices.\n    reciprocal_indices = 1 / np.arange(1, len(bins) + 1)\n\n    # Calculate the scores.\n    scores = bins * reciprocal_indices + 1\n\n    return scores",
          "objective": 0.04407,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm calculates scores based on a weighted average of bin rest capacity, maximum bin capacity, and bin number.",
          "code": "import numpy as np\n\ndef score(item, bins):\n  \"\"\"Calculates scores for a set of bins to assign an item.\n\n  Args:\n    item: The size of the current item.\n    bins: The rest capacities of feasible bins, which are larger than the item size.\n\n  Returns:\n    The scores for the bins for assignment.\n  \"\"\"\n\n  # Calculate the rest capacity of each bin.\n  rest_capacities = bins - item\n\n  # Calculate the maximum bin capacity.\n  max_capacity = np.max(bins)\n\n  # Calculate the bin number.\n  bin_number = np.arange(len(bins)) + 1\n\n  # Calculate the scores.\n  scores = 0.5 * rest_capacities / max_capacity + 0.25 * bin_number + 0.25\n\n  return scores",
          "objective": 0.04417,
          "other_inf": null
     },
     {
          "algorithm": " New algorithm: Calculate the scores for each bin by subtracting the item size from the rest capacity if it is less than the maximum capacity and the rest capacity is greater than the item size, and subtract 2 if the rest capacity is less than the maximum capacity or equals the item size. ",
          "code": "def score(item, bins):\n  \"\"\"Calculate the scores for each bin by subtracting the item size from the rest capacity if it is less than the maximum capacity and the rest capacity is greater than the item size, and subtract 2 if the rest capacity is less than the maximum capacity or equals the item size.\n\n  Args:\n    item: The size of current item.\n    bins: The rest capacities of feasible bins, which are larger than the item size.\n\n  Returns:\n    The scores for the bins for assignment.\n  \"\"\"\n\n  scores = np.zeros_like(bins, dtype=np.float32)\n  max_capacity = np.max(bins)\n  for i, bin_capacity in enumerate(bins):\n    if bin_capacity < max_capacity and bin_capacity > item:\n      scores[i] = max_capacity - item - bin_capacity\n    else:\n      scores[i] = -2\n  return scores",
          "objective": 0.04779,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm will use a weighted average of the bin capacity, the bin rest capacity, the bin number, and a penalty factor to assign an item to an empty bin that results in the lowest final score.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    rest = np.maximum(bins - item, 0)\n    scores = (-rest + bins*0.5 - (bins - rest)**0.5 - rest**0.5)*0.25\n    scores[bins <= item] = -np.inf\n    scores[rest == 0] = -np.inf\n    return scores",
          "objective": 0.05071,
          "other_inf": null
     },
     {
          "algorithm": "{ New algorithm: Calculate the scores for each bin by subtracting 1 from the rest capacity if it is less than the maximum capacity, subtracting 2 if it is equal to the maximum capacity, and subtracting 3 if the rest capacity is less than the item size. }",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.where(\n        bins < item,\n        -3,\n        np.where(bins == item, -2, -1 * np.minimum(1, bins - item - 1))\n    )\n    return scores",
          "objective": 0.05131,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Calculate the scores for each bin by subtracting 1 from the rest capacity if it is less than the maximum capacity and subtracting 2 if it is equal to the maximum capacity, and set the score to 0 if the rest capacity is less than the item size.",
          "code": "import numpy as np\n\ndef score(item, bins):\n  \"\"\"Calculates the scores for each bin.\n\n  Args:\n    item: The size of the current item.\n    bins: The rest capacities of feasible bins, which are larger than the item size.\n\n  Returns:\n    The scores for the bins for assignment.\n  \"\"\"\n\n  scores = np.zeros_like(bins)\n  mask = bins >= item\n  scores[mask] = np.where(bins[mask] == item, -2, -1)\n  return scores",
          "objective": 0.05383,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm calculates the score for each bin based on the ratio of the item size to the bin's rest capacity, penalized by the number of bins that can fit the item.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    if len(bins) == 0:\n        return np.array([[-1.]])\n    ratios = item / bins\n    penalty = 1 / (np.sum(ratios < 1) + 1)\n    scores = penalty * ratios\n    scores[np.argmax(scores)] = 0.\n    return scores",
          "objective": 0.05654,
          "other_inf": null
     },
     {
          "algorithm": "\nNew algorithm: \n1. Calculate the available capacity for each bin by subtracting the item size from the rest capacities of feasible bins. \n2. Set the score for each bin to 0 if the available capacity is less than the item size, otherwise set the score to the available capacity. \n3. If the rest capacity of a bin equals the maximum capacity, set the score to -1 to indicate that it will not be used. \n4. Return the scores for the bins for assignment. \n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    available_capacity = bins - item\n    scores = np.where(available_capacity < item, 0, available_capacity)\n    scores = np.where(bins == np.max(bins), -1, scores)\n    return scores",
          "objective": 0.05795,
          "other_inf": null
     },
     {
          "algorithm": "\n  The new algorithm will calculate the score for each bin based on the rest capacity, using a weighted average of the rest capacity and the inverse of the bin number, then return the scores for each bin for assignment. \n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    num_bins = len(bins)\n    weights = np.arange(1, num_bins + 1)\n    normalized_capacity = 1 - (bins / np.max(bins))\n    scores = normalized_capacity * weights\n    return scores",
          "objective": 0.05815,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Prioritize bins with minimum remaining capacity and higher capacity, then penalize full bins to minimize used bins.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    \"\"\"\n    Prioritize bins with minimum remaining capacity and higher capacity, then penalize full bins to minimize used bins.\n\n    Args:\n        item (int): Size of the current item.\n        bins (np.ndarray): Remaining capacities of feasible bins, which are larger than the item size.\n\n    Returns:\n        np.ndarray: Scores for the bins for assignment.\n    \"\"\"\n    # Prioritize bins with minimum remaining capacity.\n    scores = 1 / bins\n\n    # Penalize full bins to minimize used bins.\n    full_bins = bins <= item\n    scores[full_bins] = -np.inf\n\n    # Prioritize bins with higher capacity.\n    scores = np.where(full_bins, scores, scores * bins)\n\n    return scores",
          "objective": 0.06751,
          "other_inf": null
     },
     {
          "algorithm": "\nDefine a function named score that takes in inputs 'item' and 'bins' and returns the output 'scores' as a Numpy array, implementing a novel scoring algorithm to assign the item to the bins with the maximum score while minimizing the number of used bins.\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.zeros_like(bins)\n    feasible_bins = np.where(bins >= item)[0]\n    \n    if len(feasible_bins) == 0:\n        return scores\n    \n    min_capacity = np.min(bins[feasible_bins])\n    \n    for i in feasible_bins:\n        if bins[i] == min_capacity:\n            scores[i] = -1\n        else:\n            scores[i] = (bins[i] - item) / bins[i]\n    \n    return scores",
          "objective": 0.06962,
          "other_inf": null
     }
]