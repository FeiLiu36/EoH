[
     {
          "algorithm": "Add a penalty to the score of any bin with remaining capacity greater than two times the item size.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    inf = np.inf\n    scores = (bins - item) * (1-((bins - item) > 2 * item)) * 1e6\n    scores[bins == item] = inf\n    scores[bins < item] = -inf\n    return scores",
          "objective": 0.01006,
          "other_inf": null
     },
     {
          "algorithm": "The score is the ratio of item size to the rest capacity plus the bin number,  penalizing bins with smaller rest capacity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = (item / (bins - item)) + np.arange(len(bins))\n    return scores",
          "objective": 0.03843,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm scores each bin by the reciprocal of the product of its index and the difference between its rest capacity and item size.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    \"\"\"\n    Calculate scores for a set of bins.\n\n    Args:\n        item: Size of the current item.\n        bins: Rest capacities of feasible bins, which are larger than the item size.\n\n    Returns:\n        scores: Scores for the bins.\n    \"\"\"\n\n    # Calculate the difference between the bin rest capacities and the item size.\n    diff = bins - item\n\n    # Calculate the reciprocal of the product of the bin index and the difference.\n    scores = 1 / (np.arange(len(bins)) + 1) / diff\n\n    return scores",
          "objective": 0.03884,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: The score is the ratio of item size to the rest capacity minus the bin number, favoring bins with larger rest capacity.",
          "code": "import numpy as np\ndef score(item, bins):\n    scores = (item / np.maximum(bins - item, 1)) - np.arange(len(bins))\n    return scores",
          "objective": 0.03934,
          "other_inf": null
     },
     {
          "algorithm": " Algorithm: This algorithm includes a new parameter, alpha, and uses the score function: score = alpha * (1 / remaining_capacity) + (1 - alpha) * (cube root of bin number). ",
          "code": "import numpy as np\n\ndef score(item, bins):\n  alpha = 0.5\n  remaining_capacity = bins - item\n  cube_root_bin_number = np.power(np.arange(len(bins)) + 1, 1 / 3)\n  scores = alpha * (1 / remaining_capacity) + (1 - alpha) * cube_root_bin_number\n  return scores",
          "objective": 0.03974,
          "other_inf": null
     },
     {
          "algorithm": "{Algorithm: The new algorithm divides item size by bin's rest capacity, multiplies the fraction by a value less than 1, and adds 1 to the product.}",
          "code": "def score(item, bins):\n  scores = (item / bins) * 0.99 + 1\n  return scores",
          "objective": 0.03984,
          "other_inf": null
     },
     {
          "algorithm": "Calculate the score for each bin based on the inverse of the sum of the rest capacity and the bin number, minus the rest capacity divided by the maximum capacity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n  # Calculate the inverse of the sum of the rest capacity and the bin number\n  inv_sum_rest_cap_bin_num = 1.0 / (bins + np.arange(1, bins.size + 1))\n  # Calculate the rest capacity divided by the maximum capacity\n  rest_cap_div_max_cap = bins / np.max(bins)\n  # Calculate the score\n  scores = inv_sum_rest_cap_bin_num - rest_cap_div_max_cap\n  # Return the scores\n  return scores",
          "objective": 0.03994,
          "other_inf": null
     },
     {
          "algorithm": "Algorithm: Calculate the score for each bin based on the square root of the inverse of the sum of the rest capacity and the bin number, minus the rest capacity divided by the maximum capacity.",
          "code": "def score(item: int, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Calculate the score for each bin based on the square root of the inverse of the sum of the rest capacity and the bin number, minus the rest capacity divided by the maximum capacity.\n    Args:\n        item: The size of current item.\n        bins: The rest capacities of feasible bins, which are larger than the item size.\n    Returns:\n        The scores for the bins for assignment.\n    \"\"\"\n    # Calculate the sum of rest capacity and bin number for each bin.\n    denom = bins + np.arange(1, len(bins) + 1)\n\n    # Calculate the score for each bin.\n    scores = np.sqrt(1.0 / denom) - bins / np.max(bins)\n\n    return scores",
          "objective": 0.04035,
          "other_inf": null
     },
     {
          "algorithm": " New algorithm: Score function: scores = bins - (bins - item)**3",
          "code": "def score(item, bins):\n    feasible_bins = bins[bins >= item]\n    scores = feasible_bins - (feasible_bins - item)**3\n    return scores",
          "objective": 0.04045,
          "other_inf": null
     },
     {
          "algorithm": "Modified version: Calculate bin scores as the product of normalized capacity and the negative exponential of the bin number multiplied by the item size ratio.",
          "code": "import numpy as np\n\ndef score(item, bins):\n  \"\"\"Calculate bin scores for an item. The bin with the highest score should be assigned the item.\n\n  Args:\n    item: int, size of the item to be assigned\n    bins: Numpy array, rest capacities of feasible bins\n\n  Returns:\n    scores: Numpy array, scores for the bins\n  \"\"\"\n\n  normalized_capacities = bins / np.max(bins)\n  exponential_weights = np.exp(-bins * item / np.max(bins))\n  scores = normalized_capacities * exponential_weights\n  return scores",
          "objective": 0.04055,
          "other_inf": null
     },
     {
          "algorithm": " New algorithm: Calculate the score as the ratio of the item size to the bin capacity minus the bin number, rewarding bins with larger capacities. ",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = (item / bins - np.arange(1, len(bins) + 1)) / (bins - item)\n    return scores",
          "objective": 0.04105,
          "other_inf": null
     },
     {
          "algorithm": "New Algorithm: Increase the penalty factor for bins with remaining capacity greater than item size by a parameter 'k'.\nCode:\ndef new_score(item, bins, k):\n    inf = np.inf\n    scores = (bins - item) * (1-((bins - item) > k * item)) * 1e6\n    scores[bins == item] = inf\n    scores[bins < item] = -inf\n    return scores",
          "code": "import numpy as np\n\ndef score(item, bins):\n    inf = np.inf\n    scores = (bins - item) * (1-np.maximum(0, (bins - item) > item)) * 1e6\n    scores[bins == item] = inf\n    scores[bins < item] = -inf\n    return scores",
          "objective": 0.04115,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Assign the item to the bin with the minimum rest capacity, avoiding bins with rest capacity equal to the item size; If multiple bins have the same minimum rest capacity, assign the item to the one with the largest initial capacity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    \"\"\"\n    Calculate the score of assigning an item to each bin.\n\n    Args:\n        item: The size of the item to be assigned.\n        bins: A Numpy array of the rest capacities of the feasible bins.\n\n    Returns:\n        A Numpy array of the scores for the bins.\n    \"\"\"\n\n    # Check if any bins have a rest capacity equal to the item size.\n    if np.any(bins == item):\n        return np.zeros_like(bins)\n\n    # Calculate the rest capacity of each bin after assigning the item.\n    rest_capacities = bins - item\n\n    # Calculate the score for each bin. Avoid bins with rest capacity equal to the item size.\n    scores = rest_capacities/bins\n    scores[rest_capacities == 0] = -np.inf\n    \n    # If any bins have the same minimum rest capacity, assign the item to the one with the largest initial capacity.\n    max_capacity = np.max(bins[rest_capacities == np.min(rest_capacities)])\n    scores[bins == max_capacity] = np.inf\n\n    return scores",
          "objective": 0.04165,
          "other_inf": null
     },
     {
          "algorithm": "Calculate bin scores as a linear combination of bins' remaining capacities and their position in the bin list.",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Calculate bin scores as a linear combination of bins' remaining capacities and their position in the bin list.\n\n    Parameters:\n        item: Size of current item.\n        bins: Numpy array include integer values, which are the rest capacities of feasible bins.\n\n    Returns:\n        Numpy array named 'scores' with the scores for the bins for assignment.\n    \"\"\"\n    pos_scores = np.arange(len(bins)) + 1  # Positional scores\n\n    # Capacities are divided by the item size to normalize the scores\n    cap_scores = bins / item\n\n    # Calculate the final scores\n    scores = 0.5 * cap_scores + 0.5 * pos_scores\n\n    return scores",
          "objective": 0.04196,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Calculate bin scores as the product of remaining capacity and the exponential decay of bin number, excluding already full bins.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    \"\"\"Calculate bin scores as the product of remaining capacity and the exponential decay of bin number, excluding already full bins.\n\n    Args:\n        item: Size of current item.\n        bins: Rest capacities of feasible bins, which are larger than the item size.\n\n    Returns:\n        Scores for the bins for assignment.\n    \"\"\"\n    bins = bins[bins >= item]\n    num_bins = len(bins)\n    scores = bins * np.exp(-np.arange(num_bins))\n    return scores",
          "objective": 0.04216,
          "other_inf": null
     },
     {
          "algorithm": "Algorithm: The new algorithm divides the average rest capacity of feasible bins by the item size and subtracts the result from the rest capacity of each feasible bin to calculate the final score.",
          "code": "import numpy as np\n\ndef score(item, bins):\n  feasible_bins = bins[bins >= item]\n  if len(feasible_bins) == 0:\n    return scores",
          "objective": 0.04226,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm calculates the score for each bin as the sum of the inverse of the remaining capacity and the square root of the bin number.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    feasible_bins = bins[bins >= item]\n    scores = 1 / feasible_bins + np.sqrt(np.arange(len(feasible_bins)))\n    return scores",
          "objective": 0.04236,
          "other_inf": null
     },
     {
          "algorithm": "Calculate the score as the normalized capacity of the bin multiplied by the inverse square root of the current bin number, plus an exponentially decaying number related to the capacity and the item size.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    \"\"\"Calculate the score for each bin.\n\n    The item will be assigned to the bin with the maximum score.\n    If the rest capacity of a bin equals the maximum capacity, it will not be used.\n\n    Args:\n        item: The size of the current item.\n        bins: The rest capacities of feasible bins, which are larger than the item size.\n\n    Returns:\n        The scores for the bins.\n    \"\"\"\n\n    # Calculate the normalized capacity of each bin.\n    normalized_capacities = bins / np.max(bins)\n\n    # Calculate the inverse square root of the current bin number.\n    inverse_square_roots = 1 / np.sqrt(np.arange(1, len(bins) + 1))\n\n    # Calculate the exponentially decaying number related to the capacity and the item size.\n    decaying_numbers = np.exp(-(bins - item) / item)\n\n    # Calculate the score for each bin.\n    scores = normalized_capacities * inverse_square_roots * decaying_numbers\n\n    return scores",
          "objective": 0.04246,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: The score is the product of the inverse of the bin number and the ratio of item size to the rest capacity, favoring both bins with larger rest capacity and smaller bin numbers.",
          "code": "import numpy as np\n\ndef score(item, bins):\n  \"\"\"Computes the score for assigning an item to each bin.\n\n  Args:\n    item: The size of the item to be assigned.\n    bins: A numpy array of the remaining capacities of the feasible bins.\n\n  Returns:\n    A numpy array of the scores for each bin.\n  \"\"\"\n\n  # Compute the inverse of the bin numbers.\n  inv_bin_nums = 1.0 / np.arange(1, len(bins) + 1)\n\n  # Compute the ratio of the item size to the remaining capacity of each bin.\n  item_to_rest_capacity_ratios = item / bins\n\n  # Compute the scores.\n  scores = inv_bin_nums * item_to_rest_capacity_ratios\n\n  return scores",
          "objective": 0.04256,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm finds the average rest capacities of the bins whose rest capacities are smaller than the item size and subtracts minimum rest capacity from all of them to calculate the final score, then assigns the item to the bin with the maximum score.",
          "code": "def score(item: int, bins: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Calculates the scores for assigning an item to a set of bins.\n\n    Args:\n        item: The size of the item to be assigned.\n        bins: The remaining capacities of the feasible bins.\n\n    Returns:\n        The scores for assigning the item to each bin.\n    \"\"\"\n    # Find the bins with sufficient capacity.\n    feasible_bins = bins[bins >= item]\n\n    # Calculate the average remaining capacity of the feasible bins.\n    avg_capacity = np.mean(feasible_bins)\n\n    # Subtract the minimum remaining capacity from all feasible bins.\n    scores = feasible_bins - np.min(feasible_bins)\n\n    # Calculate the final score for each bin.\n    scores = scores + (avg_capacity - scores) * (feasible_bins < avg_capacity)\n\n    return scores",
          "objective": 0.04276,
          "other_inf": null
     }
]