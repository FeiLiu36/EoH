[
     {
          "algorithm": "Assign item to the bin with the maximum score after calculating the score as a weighted sum of score calculated as a weighted sum of the bin's current capacity, the difference between the bin's capacity and the item size, the bin's capacity to the power of 3, a Gaussian function of the bin's capacity, the number of items that fit into the bin, and the reciprocal of the variance of the bin's capacity",
          "code": "import numpy as np\n\ndef score(item, bins):\n    remaining_capacities = np.minimum((bins - item) / item, 1)\n    scores = (remaining_capacities ** 3) / remaining_capacities.min() + (bins - item) / item + np.exp(-(bins - bins.mean()) ** 2 / (2 * bins.std() ** 2)) + np.arange(len(bins)) + np.sqrt(bins) + 1 / (np.arange(len(bins)) + 1)\n    return scores",
          "objective": 0.00664,
          "other_inf": null
     },
     {
          "algorithm": "Algorithm: Assign an item to the feasible bin with the highest score calculated by the weighted sum of bin\u2019s current height, capacity, and its index in the list .",
          "code": "import numpy as np\n\ndef score(item, bins):\n    normalized_remaining_capacities = np.minimum((bins - item) / item, 1)\n    scores = 2 * normalized_remaining_capacities / normalized_remaining_capacities.min() + 0.5 * (bins / bins.max()) ** 2 + 0.5 * np.arange(len(bins))\n    return scores",
          "objective": 0.00674,
          "other_inf": null
     },
     {
          "algorithm": "Utilize a weighted sum of bins' remaining capacity, but penalize bins with a large number of items and promote bins with a small number of items.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    normalized_remaining_capacities = np.minimum((bins - item) / item, 1)\n    bin_item_ratio = bins / item\n    scores = (normalized_remaining_capacities ** 2) / normalized_remaining_capacities.min() - bin_item_ratio / bin_item_ratio.max() + 0.5 * np.arange(len(bins))\n    return scores",
          "objective": 0.00684,
          "other_inf": null
     },
     {
          "algorithm": "Prioritize bins with sufficient remaining capacity and a balanced number of items, deterring bins with excessive or minimal items.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    normalized_remaining_capacities = np.minimum((bins - item) / item, 1)\n    bin_item_ratio = bins / item\n    items_in_bin = bins / item\n    scores = (normalized_remaining_capacities ** 2) / normalized_remaining_capacities.min() - (items_in_bin - 1) ** 2 / (items_in_bin - 1).max() + 0.5 * np.arange(len(bins))\n    return scores",
          "objective": 0.00694,
          "other_inf": null
     },
     {
          "algorithm": "Calculate a weighted sum of the square of bin capacity, cumulative distance to the center with decay, square root of the number of times the bin has been used, and a random number.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    normalized_remaining_capacities = np.minimum((bins - item) / item, 1)\n    distances_to_the_center = np.minimum(np.abs(bins - np.mean(bins)) / np.std(bins), 1)\n    cumulative_distances_to_the_center = np.cumsum(distances_to_the_center) * np.exp(-np.arange(len(bins)) / len(bins))\n    scores = (normalized_remaining_capacities ** 2) / normalized_remaining_capacities.min() + cumulative_distances_to_the_center + np.sqrt(np.arange(len(bins)) + 1) + np.random.uniform(0, 1, len(bins))\n    return scores",
          "objective": 0.00704,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Score bins based on the ratio of item size and remaining bin capacity while considering the bin's current height, index, and its capacity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    normalized_remaining_capacities = np.minimum((bins - item) / item, 1)\n    capacity_factors = (bins - item) / (bins - item).max()\n    scores = 2 * normalized_remaining_capacities / normalized_remaining_capacities.min() + 0.5 * capacity_factors + 0.5 * np.arange(len(bins)) + np.floor(bins / item) + 0.5\n    return scores",
          "objective": 0.00714,
          "other_inf": null
     },
     {
          "algorithm": "Algorithm: Assign an item to the feasible bin with the highest score calculated by the weighted sum of bin\u2019s current height, capacity, and its index in the list .",
          "code": "import numpy as np\n\ndef score(item, bins):\n    normalized_remaining_capacities = np.minimum((bins - item) / item, 1)\n    scores = 2 * normalized_remaining_capacities / normalized_remaining_capacities.min() + 0.5 * np.arange(len(bins))\n    return scores",
          "objective": 0.00724,
          "other_inf": null
     },
     {
          "algorithm": "Calculate a weighted sum of the square of bin capacity, cumulative distance to the center with decay, square root of the number of times the bin has been used, and a random number.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    normalized_remaining_capacities = np.minimum((bins - item) / item, 1)\n    distances_to_the_center = np.minimum(np.abs(bins - np.mean(bins)) / np.std(bins), 1)\n    cumulative_distances_to_the_center = np.cumsum(distances_to_the_center) * np.exp(-np.arange(len(bins)) / len(bins))\n    scores = (normalized_remaining_capacities ** 2) / normalized_remaining_capacities.min() + cumulative_distances_to_the_center + np.sqrt(np.arange(len(bins)) + 1)\n    return scores",
          "objective": 0.00745,
          "other_inf": null
     },
     {
          "algorithm": "Score bins with a weighted sum of the bin\u2019s current height, capacity, bin index, and number of times the bin has been used.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    normalized_remaining_capacities = np.minimum((bins - item) / item, 1)\n    capacity_factors = (bins / bins.max()) ** 2\n    scores = 2 * normalized_remaining_capacities / normalized_remaining_capacities.min() + 0.5 * capacity_factors + 0.5 * np.arange(len(bins)) + np.floor(bins / item)\n    return scores",
          "objective": 0.00755,
          "other_inf": null
     },
     {
          "algorithm": "Calculate a weighted sum of the square of bin capacity, cumulative distance to the center with decay, square root of the number of times the bin has been used, and a random number.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    normalized_remaining_capacities = np.minimum((bins - item) / item, 1) / np.max((bins - item) / item)\n    distances_to_the_center = np.minimum(np.abs(bins - np.mean(bins)) / np.std(bins), 1)\n    cumulative_distances_to_the_center = np.cumsum(distances_to_the_center) * np.exp(-np.arange(len(bins)) / len(bins))\n    scores = (normalized_remaining_capacities ** 2) / normalized_remaining_capacities.min() + cumulative_distances_to_the_center + np.sqrt(np.arange(len(bins)) + 1)\n    return scores",
          "objective": 0.00795,
          "other_inf": null
     },
     {
          "algorithm": "Improved Score Function: We adjust parameter settings in the existing score function to prioritize bins with ample remaining capacity, proximity to an average bin size, and a high number of items fit to minimize used bin count.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    normalized_remaining_capacities = np.minimum((bins - item) / item, 1)\n    distances_to_the_center = np.minimum(np.abs(bins - np.mean(bins)) / np.std(bins), 1)\n    num_fits = bins / item / np.min(bins / item)\n    scores = 6 * (normalized_remaining_capacities ** 2) / normalized_remaining_capacities.min() + 1 * np.arange(len(bins)) + 2 * distances_to_the_center + 1 * num_fits\n    return scores",
          "objective": 0.00815,
          "other_inf": null
     },
     {
          "algorithm": "New Algorithm: Assign an item to the bin with the maximum score calculated as a weighted sum of the square of the bin's current capacity, the difference between the bin's capacity and the item size, the number of items that fit into the bin, and the number of times the bin has been used.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    normalized_remaining_capacities = np.minimum((bins - item) / item, 1)\n    distances_to_the_center = np.minimum(np.abs(bins - np.mean(bins)) / np.std(bins), 1)\n    number_items_in_bin = np.floor(bins / item)\n    scores = (normalized_remaining_capacities ** 2) / normalized_remaining_capacities.min() + number_items_in_bin + np.arange(len(bins)) - np.sqrt(distances_to_the_center)\n    return scores",
          "objective": 0.00825,
          "other_inf": null
     },
     {
          "algorithm": "Assign an item to the bin with the maximum score calculated as a weighted sum of the bin's capacity, the number of times the bin has been used, the difference between the bin's capacity and the item size, the distance to the center of bins, and the number of items that fit into the bin, but the weights are different.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    normalized_remaining_capacities = np.minimum((bins - item) / item, 1)\n    distances_to_the_center = np.minimum(np.abs(bins - np.mean(bins)) / np.std(bins), 1)\n    num_fits = np.floor(bins / item) * 0.5\n    scores = (normalized_remaining_capacities ** 2.5) / normalized_remaining_capacities.min() + 0.75 * np.arange(len(bins)) + np.sqrt(distances_to_the_center) + num_fits\n    return scores",
          "objective": 0.00835,
          "other_inf": null
     },
     {
          "algorithm": "Assign an item to the bin with the maximum score calculated as a weighted sum of the square of the bin's current capacity, the difference between the bin's capacity and the item size, the number of times the bin has been used, the distance to the center of bins, and the number of items that fit into the bin.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    normalized_remaining_capacities = np.minimum((bins - item) / item, 1)\n    distances_to_the_center = np.minimum(np.abs(bins - np.mean(bins)) / np.std(bins), 1)\n    scores = (normalized_remaining_capacities ** 2) / normalized_remaining_capacities.min() + np.arange(len(bins)) + np.sqrt(distances_to_the_center)\n    return scores",
          "objective": 0.00845,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm scores bins with a weighted sum of the square of bin remaining capacity, bin index, distance to the bin center, and number of items fit into the bin, but the weights are different.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    normalized_remaining_capacities = np.minimum((bins - item) / item, 1)\n    distances_to_the_center = np.minimum(np.abs(bins - np.mean(bins)) / np.std(bins), 1)\n    num_fits = bins / item / np.min(bins / item)\n    scores = 4 * (normalized_remaining_capacities ** 2) / normalized_remaining_capacities.min() + 0.5 * np.arange(len(bins)) + 1.5 * np.sqrt(distances_to_the_center) + 0.5 * num_fits\n    return scores",
          "objective": 0.00855,
          "other_inf": null
     },
     {
          "algorithm": "Assign an item to the bin with the maximum score calculated as a weighted combination of the bin's remaining capacity that is penalized by the number of item that can be fit into the bin and the number of times the bin has been used.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    normalized_remaining_capacities = np.minimum((bins - item) / item, 1)\n    num_fits = bins / item\n    scores = (normalized_remaining_capacities - (normalized_remaining_capacities / np.sum(normalized_remaining_capacities)) * num_fits)**2 / normalized_remaining_capacities.min() + np.arange(len(bins)) + num_fits\n    return scores",
          "objective": 0.00865,
          "other_inf": null
     },
     {
          "algorithm": "Score bins with a weighted sum of the square of bin capacity, bin index, and distance to the bin center, and number of items fit into the bin, while using logarithms to magnify the differences.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    normalized_remaining_capacities = np.minimum((bins - item) / item, 1)\n    distances_to_the_center = np.minimum(np.abs(bins - np.mean(bins)) / np.std(bins), 1)\n    num_fits = np.where(bins >= item, 1, 0)\n    scores = (normalized_remaining_capacities ** 2) / normalized_remaining_capacities.min() + np.arange(len(bins)) + np.log(distances_to_the_center + 1) + np.log(num_fits + 1)\n    return scores",
          "objective": 0.00885,
          "other_inf": null
     },
     {
          "algorithm": "Calculate a weighted sum of the square of bin capacity, bin index, bin capacity divided by item size, and number of items fit into the bin, and use an exponential function to amplify the difference.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    normalized_remaining_capacities = np.minimum((bins - item) / item, 1)\n    num_fits = np.where(bins >= item, 1, 0)\n    scores = (normalized_remaining_capacities ** 2) / normalized_remaining_capacities.min() + np.arange(len(bins)) + (bins / item) + num_fits\n    return scores",
          "objective": 0.00916,
          "other_inf": null
     },
     {
          "algorithm": "Assign an item to the bin with the maximum score calculated as a weighted sum of the square of the bin's current capacity, the difference between the bin's capacity and the item size, the number of times the bin has been used, the distance to the center of bins, and the number of items that fit into the bin.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    normalized_remaining_capacities = np.minimum((bins - item) / item, 1)\n    distances_to_the_center = np.minimum(np.abs(bins - np.mean(bins)) / np.std(bins), 1)\n    num_fits = bins / item / np.max(bins / item)\n    scores = (normalized_remaining_capacities ** 2) / normalized_remaining_capacities.min() + np.arange(len(bins)) + np.sqrt(distances_to_the_center) + num_fits\n    return scores",
          "objective": 0.00926,
          "other_inf": null
     },
     {
          "algorithm": "The proposed algorithm calculates a weighted sum of the square of bin capacity, bin index, distance to the average, and number of items fit into the bin, considering the ratio between bin capacity and item size.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    normalized_remaining_capacities = np.minimum((bins - item) / item, 1)\n    distances_to_the_center = np.minimum(np.abs(bins - np.mean(bins)) / np.std(bins), 1)\n    num_fits = bins / item / np.max(bins / item)\n    scores = normalized_remaining_capacities ** 2 / normalized_remaining_capacities.min() + np.arange(len(bins)) + np.sqrt(distances_to_the_center) + (bins / item) ** 0.5\n    return scores",
          "objective": 0.00946,
          "other_inf": null
     }
]