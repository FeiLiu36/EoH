[
     {
          "algorithm": "The method assigns an item to the bin with maximum score the calculated by the weighted sum of bin's current height and its index in the list, divided by bin's capacity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    normalized_remaining_capacities = np.minimum((bins - item) / item, 1)\n    scores = normalized_remaining_capacities / normalized_remaining_capacities.min() + 0.5 * np.arange(len(bins)) / normalized_remaining_capacities.mean()\n    return scores",
          "objective": 0.00634,
          "other_inf": null
     },
     {
          "algorithm": "The method assigns an item to the bin with maximum score the calculated by the weighted sum of bin's current height and its index in the list, divided by bin's capacity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    normalized_remaining_capacities = np.minimum((bins - item) / item, 1)\n    scores = normalized_remaining_capacities / normalized_remaining_capacities.min() + 0.5 * np.arange(len(bins))\n    return scores",
          "objective": 0.00664,
          "other_inf": null
     },
     {
          "algorithm": "Algorithm: Assign an item to the feasible bin with the highest score calculated by the weighted sum of bin\u2019s current height, capacity, and its index in the list .",
          "code": "import numpy as np\n\ndef score(item, bins):\n    normalized_remaining_capacities = np.minimum((bins - item) / item, 1)\n    scores = 2 * normalized_remaining_capacities / normalized_remaining_capacities.min() + 0.5 * (bins / bins.max()) ** 2 + 0.5 * np.arange(len(bins))\n    return scores",
          "objective": 0.00674,
          "other_inf": null
     },
     {
          "algorithm": "Utilize a weighted sum of bins' remaining capacity, but penalize bins with a large number of items and promote bins with a small number of items.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    normalized_remaining_capacities = np.minimum((bins - item) / item, 1)\n    bin_item_ratio = bins / item\n    scores = (normalized_remaining_capacities ** 2) / normalized_remaining_capacities.min() - bin_item_ratio / bin_item_ratio.max() + 0.5 * np.arange(len(bins))\n    return scores",
          "objective": 0.00684,
          "other_inf": null
     },
     {
          "algorithm": "Prioritize bins with sufficient remaining capacity and a balanced number of items, deterring bins with excessive or minimal items.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    normalized_remaining_capacities = np.minimum((bins - item) / item, 1)\n    bin_item_ratio = bins / item\n    items_in_bin = bins / item\n    scores = (normalized_remaining_capacities ** 2) / normalized_remaining_capacities.min() - (items_in_bin - 1) ** 2 / (items_in_bin - 1).max() + 0.5 * np.arange(len(bins))\n    return scores",
          "objective": 0.00694,
          "other_inf": null
     },
     {
          "algorithm": "Calculate a weighted sum of the bin's current size, the bin's capacity to the power of 3, the bin's remaining capacity to the power of 2, the bin's available spaces to the power of 2, the square root of the number of times the bin has been used, the square root of the number of empty spaces in the bin, and the position of the bin in the list.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    remaining_capacities = np.minimum((bins - item) / item, 1)\n    available_spaces = bins - np.maximum((bins - item), 0)\n    scores = (remaining_capacities ** 2) / remaining_capacities.min() + (bins ** 3) / bins.max() ** 3 + (available_spaces ** 2) / available_spaces.max() ** 2 + np.sqrt(bins) + np.sqrt(available_spaces) + np.arange(len(bins))\n    return scores",
          "objective": 0.00704,
          "other_inf": null
     },
     {
          "algorithm": "Consider the ratio between the current height of a bin and the item size in addition to the difference between the item size and the remaining capacity of a bin.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    normalized_remaining_capacities = np.minimum((bins - item) / item, 1)\n    bin_height_item_ratio = bins / item\n    scores = 2 * normalized_remaining_capacities / normalized_remaining_capacities.min() + 0.5 * np.exp(-bin_height_item_ratio) + np.floor(bins / item * 0.75) + 0.75 * np.arange(len(bins))\n    return scores",
          "objective": 0.00714,
          "other_inf": null
     },
     {
          "algorithm": "Algorithm: Assign an item to the feasible bin with the highest score calculated by the weighted sum of bin\u2019s current height, capacity, and its index in the list .",
          "code": "import numpy as np\n\ndef score(item, bins):\n    normalized_remaining_capacities = np.minimum((bins - item) / item, 1)\n    scores = 2 * normalized_remaining_capacities / normalized_remaining_capacities.min() + 0.5 * np.arange(len(bins))\n    return scores",
          "objective": 0.00724,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm computes a weighted sum of the bin's current size, the bin's capacity to the power of 2, the bin's remaining capacity to the power of 3, the square root of the number of times the bin has been used, the square root of the number of empty spaces in the bin, and the position of the bin in the list.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    remaining_capacities = np.minimum((bins - item) / item, 1)\n    available_spaces = bins - np.maximum((bins - item), 0)\n    scores = (remaining_capacities ** 3) / remaining_capacities.min() + (bins ** 2) / bins.max() ** 2 + np.sqrt(bins) + np.sqrt(available_spaces) + np.arange(len(bins))\n    return scores",
          "objective": 0.00734,
          "other_inf": null
     },
     {
          "algorithm": "Calculate a weighted sum of the square of bin capacity, cumulative distance to the center with decay, square root of the number of times the bin has been used, and a random number.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    normalized_remaining_capacities = np.tanh((bins - item) / item)\n    distances_to_the_center = np.tanh(np.abs(bins - np.mean(bins)) / np.std(bins))\n    cumulative_distances_to_the_center = np.cumsum(distances_to_the_center) * np.exp(-np.arange(len(bins)) / len(bins))\n    scores = (normalized_remaining_capacities ** 2) / normalized_remaining_capacities.min() + cumulative_distances_to_the_center\n    return scores",
          "objective": 0.00745,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Score bins based on a weighted sum of the bin's remaining capacity, the bin's capacity to the power of 4, the bin's position in the list, and the square root of the number of times the bin has been used.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    remaining_capacities = np.minimum((bins - item) / item, 1)\n    available_spaces = bins - np.maximum((bins - item), 0)\n    scores = (remaining_capacities ** 2) / remaining_capacities.min() + (bins ** 4) / bins.max() ** 4 + np.arange(len(bins)) + np.sqrt(bins)\n    return scores",
          "objective": 0.00755,
          "other_inf": null
     },
     {
          "algorithm": "New Algorithm: Compute a weighted sum of the bin's current size, the bin's capacity to the power of 4, the bin's remaining  capacity to the power of 3, the square root of the number of times the bin has been used, the square root of the number of empty spaces in the bin, and the position of the bin in the list.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    remaining_capacities = np.minimum((bins - item) / item, 1)\n    available_spaces = bins - np.maximum((bins - item), 0)\n    scores = (remaining_capacities ** 3) / remaining_capacities.min() + (bins ** 4) / bins.max() ** 4 + np.sqrt(bins) + np.sqrt(available_spaces) + np.arange(len(bins))\n    return scores",
          "objective": 0.00765,
          "other_inf": null
     },
     {
          "algorithm": "The proposed algorithm calculates the score of each bin as a combination of its remaining capacity, the ratio of its current height to the maximum height, and the index of the bin in the list, where higher index indicates a later position in the list.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    normalized_remaining_capacities = np.minimum((bins - item) / item, 1)\n    scores = 1.5 * normalized_remaining_capacities / normalized_remaining_capacities.min() + 0.25 * (bins / bins.max()) ** 2 + 0.25 * (bins / item) ** 2 + 0.25 * np.arange(len(bins))\n    return scores",
          "objective": 0.00785,
          "other_inf": null
     },
     {
          "algorithm": "Calculate a weighted sum of the square of bin capacity, cumulative distance to the center with decay, square root of the number of times the bin has been used, and a random number.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    normalized_remaining_capacities = np.minimum((bins - item) / item, 1) / np.max((bins - item) / item)\n    distances_to_the_center = np.minimum(np.abs(bins - np.mean(bins)) / np.std(bins), 1)\n    cumulative_distances_to_the_center = np.cumsum(distances_to_the_center) * np.exp(-np.arange(len(bins)) / len(bins))\n    scores = (normalized_remaining_capacities ** 2) / normalized_remaining_capacities.min() + cumulative_distances_to_the_center + np.sqrt(np.arange(len(bins)) + 1)\n    return scores",
          "objective": 0.00795,
          "other_inf": null
     },
     {
          "algorithm": "Calculate score as a weighted sum of the bin's current capacity to the power of 2, the difference between the bin's capacity and the item size, the number of items that fit into the bin, and the reciprocal of the standard deviation of the bin's capacity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    remaining_capacities = np.minimum((bins - item) / item, 1)\n    scores = (remaining_capacities ** 2) / remaining_capacities.min() + (bins - item) / item + np.arange(len(bins)) + 1 / np.std(bins)\n    return scores",
          "objective": 0.00805,
          "other_inf": null
     },
     {
          "algorithm": "Prioritize bins with sufficient remaining capacity and a balanced distribution of items but penalizing higher indexed bins.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    normalized_remaining_capacities = np.minimum((bins - item) / item, 1)\n    bin_item_ratio = bins / item\n    scores = (normalized_remaining_capacities ** 2) / normalized_remaining_capacities.min() + (bin_item_ratio - 1) ** 2 / (bin_item_ratio - 1).max() - np.arange(len(bins))\n    return scores",
          "objective": 0.00815,
          "other_inf": null
     },
     {
          "algorithm": "Calculate a weighted sum of the geometric mean between the bin remaining capacity and itself to the power of 3, the bin index, and the bin's remaining capacity divided by its capacity to power of 2.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    normalized_remaining_capacities = np.minimum((bins - item) / item, 1)\n    scores = (np.sqrt(normalized_remaining_capacities * (normalized_remaining_capacities ** 3))) / (normalized_remaining_capacities.min() ** 2) + np.arange(len(bins)) + bins / bins.min() ** 2\n    return scores",
          "objective": 0.00825,
          "other_inf": null
     },
     {
          "algorithm": "Considering bins with sufficient capacity to accommodate the current item, assign the item to the bin with the maximum score estimated as a weighted sum of the bin's current capacity, the number of items that could fit into the bin, and the bin's index.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    normalized_remaining_capacities = np.minimum((bins - item) / item, 1)\n    bin_item_ratio = bins / item\n    scores = (normalized_remaining_capacities ** 3) / normalized_remaining_capacities.min() + bin_item_ratio / bin_item_ratio.min() + 0.3 * np.arange(len(bins))\n    return scores",
          "objective": 0.00835,
          "other_inf": null
     },
     {
          "algorithm": "Assign an item to the bin with the maximum score calculated as a weighted sum of the square of the bin's current capacity, the difference between the bin's capacity and the item size, the number of times the bin has been used, the distance to the center of bins, and the number of items that fit into the bin.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    remaining_capacities = np.minimum((bins - item) / item, 1)\n    distances_to_the_center = np.minimum(np.abs(bins - np.mean(bins)) / np.std(bins), 1)\n    scores = (remaining_capacities ** 2) / remaining_capacities.min() + np.arange(len(bins)) + np.sqrt(distances_to_the_center)\n    return scores",
          "objective": 0.00845,
          "other_inf": null
     },
     {
          "algorithm": "Compute a weighted sum of the bin's current size, the bin's capacity to the power of 3, the bin's remaining capacity to the power of 2, the cube root of the number of times the bin has been used, the cube root of the number of empty spaces in the bin, and the position of the bin in the list.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    remaining_capacities = np.minimum((bins - item) / item, 1)\n    available_spaces = bins - np.maximum((bins - item), 0)\n    scores = (remaining_capacities ** 2) / remaining_capacities.min() + (bins ** 3) / bins.max() ** 3 + np.cbrt(bins) + np.cbrt(available_spaces) + np.arange(len(bins))\n    return scores",
          "objective": 0.00855,
          "other_inf": null
     }
]