[
     {
          "algorithm": "My new algorithm reduces the strength of the logarithmic component with the power of the times the bin is used.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = bins / (bins - item) + np.log(bins) ** (np.arange(len(bins)) ** 1)\n    return scores",
          "objective": 0.01167,
          "other_inf": null
     },
     {
          "algorithm": "{Bins with higher score means that there is a higher probability of being assigned to the item.}",
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    remaining_capacities = bins - item\n    scores = 1.0 / ((bins / item) - np.floor(bins / item)) * (bins / item) ** 2 / (1.0 + np.exp(-(remaining_capacities / item)))\n    return scores",
          "objective": 0.01439,
          "other_inf": null
     },
     {
          "algorithm": "Prioritize bins that have the largest remaining capacity, while penalizing bins that have been partially used, based on a normalized difference between the bin's current capacity and the item's size.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = 1.0 / ((bins / item) - np.floor(bins / item)) * (bins / item) ** 2\n    return scores",
          "objective": 0.01479,
          "other_inf": null
     },
     {
          "algorithm": "Prioritize bins based on the inverse of the ratio of the bin's remaining capacity and the item's size, modified by the square root of the bin's total capacity and the remaining capacity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    remaining_capacities = bins - item\n    total_capacities = bins\n    scores = 1.0 / ((bins / item) - np.floor(bins / item)) + np.sqrt(total_capacities) + np.sqrt(remaining_capacities)\n    scores[bins < item] = -np.inf\n    return scores",
          "objective": 0.01539,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm adds a randomization step to the previous algorithm to enhance its robustness and efficiency.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = (bins - item) * 0.5 / ((bins / item) - np.floor(bins / item)) * (1.0 + np.square(np.exp(-(bins / item))))\n    return scores",
          "objective": 0.01549,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Assign the item to the bin with the maximum score, calculated by a weighted combination of the bin's remaining capacity, the inverse of the square root of the number of items in the bin, and the item's size, with weights adjusted by the square root of the bin's maximum capacity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    remaining_capacities = bins - item\n    num_items_in_bin = np.floor(bins / item)\n    weights = (np.sqrt(bins / max_capacity)) * (1.0 + np.exp(-(remaining_capacities / item))) / (np.sqrt(num_items_in_bin + 1))\n    scores = (0.5 + 0.5 * np.log(num_items_in_bin + 1)) * (bins - item) * 1.0 / ((bins / item) - np.floor(bins / item)) * weights\n    return scores",
          "objective": 0.0157,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm adds a randomization step to the previous algorithm to enhance its robustness and efficiency.",
          "code": "import numpy as np\nimport random\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    remaining_capacities = bins - item\n    partially_used_bins = np.where(np.logical_and(bins >= item, bins < max_capacity))[0]\n    num_partially_used_bins = len(partially_used_bins)\n    random_numbers = np.random.rand(len(bins))\n    scores = (bins - item) * 0.5 / ((bins / item) - np.floor(bins / item)) * (1.0 + np.square(np.exp(-(remaining_capacities / item)))) / (1.0 + np.sqrt(num_partially_used_bins)) * random_numbers\n    return scores",
          "objective": 0.0162,
          "other_inf": null
     },
     {
          "algorithm": "Prioritize bins based on a weighted combination of 1. the inverse of the ratio of the bin's remaining capacity to the item's size, 2. the square root of the remaining capacity of the bin, and 3. the inverse of the number of items that can fit into the bin.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    remaining_capacities = bins - item\n    scores = 1.0 / ((bins / item) - np.floor(bins / item)) + np.sqrt(remaining_capacities) + 1.0 / (remaining_capacities / item + 1)\n    scores[bins < item] = -np.inf\n    return scores",
          "objective": 0.01751,
          "other_inf": null
     },
     {
          "algorithm": "Score bins based on the bin's remaining capacity and the inverse of the number of partially used bins, weighted by the difference between the bin's capacity and the item's size.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    remaining_capacities = bins - item\n    partially_used_bins = np.where(np.logical_and(bins >= item, bins < max_capacity))[0]\n    num_partially_used_bins = 1\n    scores = (bins - item) * 1.0 / ((bins / item) - np.floor(bins / item)) * (1.0 + np.exp(-(remaining_capacities / item))) / (num_partially_used_bins + 1)\n    return scores",
          "objective": 0.01761,
          "other_inf": null
     },
     {
          "algorithm": "Prioritize bins based on a weighted combination of the ratio of the bin's current capacity to the item's size and the inverse of the number of partially used bins, considering the variance in the available bin capacities.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    remaining_capacities = bins - item\n    num_partially_used_bins = int(np.mean(bins >= item))\n    bin_capacity_variance = np.var(bins)\n    scores = (bins / item) * 1.0 / ((bins / item) - np.floor(bins / item)) * (num_partially_used_bins + 1) / (bin_capacity_variance + 1)\n    return scores",
          "objective": 0.01811,
          "other_inf": null
     },
     {
          "algorithm": "The proposed algorithm uses a weighted score that combines the bin's remaining capacity, the weighted inverse of the number of items in the bin, and the item's size, with the weights adjusted based on the score from the original algorithm.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    remaining_capacities = bins - item\n    partially_used_bins = np.where(np.logical_and(bins >= item, bins < max_capacity))[0]\n    num_partially_used_bins = len(partially_used_bins)\n    base_scores = (bins - item) * 1.0 / ((bins / item) - np.floor(bins / item)) * (1.0 + np.exp(-(remaining_capacities / item))) / (num_partially_used_bins + 1)\n    num_items_in_bin = np.floor(bins / item)\n    weights = 1.0 + np.log(num_items_in_bin + 1)\n    scores = base_scores * weights\n    return scores",
          "objective": 0.01821,
          "other_inf": null
     },
     {
          "algorithm": "Assign items to the bin with the highest score calculated by a weighted combination of the ratio of the bin's remaining capacity to the item's size and the inverse of the number of partially used bins, with a bonus for bins where the remaining capacity after assignment is less than a threshold.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    remaining_capacities = bins - item\n    partially_used_bins = np.where(np.logical_and(bins >= item, bins < max_capacity))[0]\n    num_partially_used_bins = len(partially_used_bins)\n    scores = (1.0 / ((bins / item) - np.floor(bins / item)) + 1.0 / (num_partially_used_bins + 1)) * (bins > max_capacity / 2)\n    scores[bins < item] = -np.inf\n    return scores",
          "objective": 0.01892,
          "other_inf": null
     },
     {
          "algorithm": "Prioritize bins considering their remaining capacity, the ratio of the item's size to remaining capacity, number of partially used bins, and variance in the available bin capacities.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    remaining_capacities = bins - item\n    num_partially_used_bins = int(np.mean(bins >= item))\n    bin_capacity_variance = np.var(bins)\n    bin_capacity_deviation = np.sum((remaining_capacities - np.mean(remaining_capacities))**2) / np.std(remaining_capacities)\n    scores = remaining_capacities * 0.5 / ((bins / item) - np.floor(bins / item)) * (num_partially_used_bins + 1) / (bin_capacity_variance + 1) * (1.0 + np.square(np.exp(-(bin_capacity_deviation / item))))\n    return scores",
          "objective": 0.01912,
          "other_inf": null
     },
     {
          "algorithm": "Prioritize bins that have a high remaining capacity and a low number of partially used bins, weighted by the difference between the bin's capacity and the item's size.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    remaining_capacities = bins - item\n    num_partially_used_bins = int(np.mean(bins >= item))\n    scores = (bins - item + 1.0 / num_partially_used_bins) * 1.0 / ((bins / item) - np.floor(bins / item)) * np.exp(-(remaining_capacities / item))\n    return scores",
          "objective": 0.02646,
          "other_inf": null
     },
     {
          "algorithm": "Assign item to bins using a linear weighted combination of: a bin's remaining capacity normalized by bin capacity variance, the weighted inverse of the number of items in the bin, and a normal distribution function of remaining capacity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    remaining_capacities = bins - item\n    partially_used_bins = np.where(np.logical_and(bins >= item, bins < max_capacity))[0]\n    num_partially_used_bins = len(partially_used_bins)\n    scores = (remaining_capacities / np.var(bins)) * 1.0 / ((bins / item) - np.floor(bins / item)) * (1.0 / (np.floor(bins / item) + 1)) * (1.0 + np.exp(-(remaining_capacities / item)))\n    return scores",
          "objective": 0.02696,
          "other_inf": null
     },
     {
          "algorithm": "Prioritize bins based on a weighted combination of 1. the inverse of the ratio of the bin's remaining capacity to the item's size, 2. the inverse of the number of partially used bins, and 3. the inverse of the square of the difference between the bin's remaining capacity and the item's size.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    remaining_capacities = bins - item\n    partially_used = remaining_capacities > 0\n    num_partially_used = partially_used.sum()\n    scores = 1.0 / ((bins / item) - np.floor(bins / item)) + 1.0 / (np.where(bins == max_capacity, 1, num_partially_used + 1)) + 1.0 / ((bins - item) ** 2 + 1)\n    scores[bins < item] = -np.inf\n    return scores",
          "objective": 0.02958,
          "other_inf": null
     },
     {
          "algorithm": "Score bins based on a weighted combination of the inverse of the ratio of the bin's remaining capacity to the item's size and the inverse of the difference between the bin's remaining capacity and the item's size.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    remaining_capacities = bins - item\n    scores = 1.0 / ((bins / item) - np.floor(bins / item)) + 1.0 / ((remaining_capacities - (max_capacity - item)) ** 2 + 1)\n    scores[bins < item] = -np.inf\n    return scores",
          "objective": 0.02988,
          "other_inf": null
     },
     {
          "algorithm": "A weighted combination of fractional-to-integer ratios between item size and bins' remaining capacity and bins' remaining capacity to the item size.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    if bins.size == 0:\n        return np.array([])\n    score1 = 1.0 / ((bins / item) - np.floor(bins / item))\n    score2 = 1.0 / ((item / bins) - np.floor(item / bins))\n    scores = 0.6 * score1 + 0.4 * score2\n    scores[np.where(bins < item)[0]] = -np.inf\n    return scores",
          "objective": 0.03028,
          "other_inf": null
     },
     {
          "algorithm": "Prioritize bins based on a weighted combination of 1. the inverse of the ratio of the bin's remaining capacity to the item's size, 2. the inverse of the number of partially used bins, and 3. the inverse of the square of the difference between the bin's remaining capacity and the item's size.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    remaining_capacities = bins - item\n    partially_used_bins = np.where(np.logical_and(bins >= item, bins < max_capacity))[0]\n    num_partially_used_bins = len(partially_used_bins)\n    scores = 1.0 / ((bins / item) - np.floor(bins / item)) + 1.0 / (np.where(bins == max_capacity, 1, num_partially_used_bins + 1)) + 1.0 / ((bins - item) ** 2 + 1)\n    scores[bins < item] = -np.inf\n    return scores",
          "objective": 0.03169,
          "other_inf": null
     },
     {
          "algorithm": "Score bins based on a weighted combination of the inverse of the ratio of the bin's remaining capacity to the item's size and the inverse of the number of partially used bins.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    remaining_capacities = bins - item\n    partially_used_bins = np.where(np.logical_and(bins >= item, bins < max_capacity))[0]\n    num_partially_used_bins = len(partially_used_bins)\n    scores = 1.0 / ((bins / item) - np.floor(bins / item)) + 1.0 / (np.where(bins == max_capacity, 1, num_partially_used_bins + 1))\n    scores[bins < item] = -np.inf\n    return scores",
          "objective": 0.032,
          "other_inf": null
     }
]