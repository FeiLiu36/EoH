[
     {
          "algorithm": "The new algorithm calculates the scores for each bin based on the square of the residual capacity of the bin multiplied by the cosine of the ratio between the item size and the residual capacity, divided by the logarithm of the position index of the bin plus a constant value of 4, and added by the exponential function of the product of the item size and the residual capacity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    constant_value = 4\n    residual_capacities = bins - item\n    index_weights = np.log(constant_value)\n    scores = (residual_capacities**2 * np.cos(item / residual_capacities)) / index_weights + np.exp(item * residual_capacities)\n    \n    return scores",
          "objective": 0.00714,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm calculates the scores for each bin based on a combination of factors including the remaining capacity, the item size, the number of used bins, and the position index of each bin. It also penalizes bins at maximum capacity and incentivizes the utilization of bins with more space and bins that have not been assigned items yet by considering the sizes of the items in the bins. The algorithm then assigns scores to each bin and returns an array of scores for assignment.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    num_bins_used = len(bins) - np.count_nonzero(bins == max_capacity)\n    item_weights = (item - bins) / (np.abs(bins - item) + 1)\n    \n    scores = np.zeros_like(bins, dtype=float)\n    for i in range(len(bins)):\n        if bins[i] == max_capacity:\n            scores[i] = -(i+1) * num_bins_used\n        else:\n            remaining_capacity = max_capacity - bins[i]\n            scores[i] = remaining_capacity * item_weights[i]\n    \n    scores[bins == max_capacity] = -(np.arange(len(bins))[bins == max_capacity] + 1) * num_bins_used\n    \n    return scores",
          "objective": 0.00765,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm calculates the scores for each bin based on the sum of the residual capacity of the bin and the sine of the ratio between the item size and the residual capacity, divided by the cube root of the position index of the bin plus a constant value of 2, and multiplied by the exponential function of the product of the item size and the residual capacity minus the logarithm of the product of the item size and the residual capacity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    constant_value = 2\n    residual_capacities = bins - item\n    index_weights = np.cbrt(np.arange(len(bins)) + constant_value)\n    scores = (residual_capacities + np.sin(item / residual_capacities)) / index_weights * np.exp(item * residual_capacities - np.log(item * residual_capacities))\n    \n    return scores",
          "objective": 0.00815,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm calculates the scores for each bin based on a modified version of the original score function, where the sine and exponential functions are used, and the indexing weights are squared before being used in the score calculation.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    constant_value = 2\n    residual_capacities = bins - item\n    index_weights = np.square(np.array(range(len(bins))) + constant_value) ** 2\n    scores = (residual_capacities + np.sin(item / residual_capacities)) / index_weights * np.exp(item * residual_capacities)\n    \n    return scores",
          "objective": 0.00875,
          "other_inf": null
     },
     {
          "algorithm": "\nThe new algorithm calculates the scores for each bin based on a combination of factors including the remaining capacity, the item size, the number of used bins, the position index of each bin, and the ratio of the remaining capacity to the item size. It also penalizes bins at maximum capacity and incentivizes the utilization of bins with more space and bins that have not been assigned items yet by considering the sizes of the items in the bins. The algorithm then assigns scores to each bin and returns an array of scores for assignment.\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    num_bins_used = len(bins) - np.count_nonzero(bins == max_capacity)\n    item_weights = np.divide((item - bins), np.abs(bins - item))\n    ratio = np.divide(bins, item)\n    indices = np.arange(len(bins))\n    \n    scores = np.zeros_like(bins, dtype=float)\n    mask = bins == max_capacity\n    scores[mask] = -np.multiply(np.arange(len(bins)), num_bins_used)[mask]\n    \n    remaining_capacity = max_capacity - bins\n    scores[~mask] = np.divide(np.multiply(remaining_capacity, item_weights), indices)[~mask]\n    \n    scores = scores + ratio * item\n    \n    return scores",
          "objective": 0.00895,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm calculates the scores for each bin based on a modified version of the original score function, where the logarithm function is applied to the index weights and the residual capacities are raised to the power of the item squared before being used in the score calculation.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    constant_value = 3\n    residual_capacities = bins - item\n    index_weights = np.log(np.array(range(len(bins))) + constant_value) ** 2\n    scores = (residual_capacities ** (item ** 2) + np.sin(item / residual_capacities)) / index_weights * np.exp(item * residual_capacities)\n    \n    return scores",
          "objective": 0.00906,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm calculates the scores for each bin based on the residual capacity of the bin multiplied by the sine of the ratio between the item size and the residual capacity, divided by the square root of the position index of the bin plus a constant value of 3, and subtracted by the logarithm of the product of the item size and the residual capacity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    residual_capacities = bins - item\n    index_weights = np.sqrt(np.arange(len(bins)) + 3)\n    scores = (residual_capacities * np.sin(item / residual_capacities))\n    scores /= index_weights\n    scores -= np.log(item * residual_capacities)\n    \n    return scores",
          "objective": 0.00966,
          "other_inf": null
     },
     {
          "algorithm": "\nNew Algorithm Description: The new algorithm calculates the scores for each bin based on a modified version of the original score function, where the sine and exponential functions are replaced with the square root and the logarithm functions, respectively, and the indexing weights are squared before being used in the score calculation.\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    constant_value = 2\n    residual_capacities = bins - item\n    index_weights = np.sqrt(np.array(range(len(bins))) + constant_value) ** 2\n    scores = (residual_capacities + np.sqrt(item / residual_capacities)) / index_weights * (item * residual_capacities - np.log(item * residual_capacities))\n    \n    return scores",
          "objective": 0.01026,
          "other_inf": null
     },
     {
          "algorithm": "The common backbone idea in the provided algorithms is to calculate scores for each bin based on a combination of the item size and the residual capacity of the bin, using mathematical functions like square root, cube root, cosine, exponential, and logarithm.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    constant_value = 2\n    residual_capacities = bins - item\n    index_weights = np.log(np.arange(len(bins)) + constant_value)\n    scores = (np.sqrt(item - residual_capacities) / index_weights) + (np.exp(item - residual_capacities) * np.cos(item / residual_capacities))\n    \n    return scores",
          "objective": 0.01238,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm calculates the scores for each bin based on the inverse of the residual capacities, where the exponential and cosine functions are used, and the indexing weights are cubed before being used in the score calculation.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    constant_value = 3\n    residual_capacities = bins - item\n    index_weights = np.power(np.array(range(len(bins))) + constant_value, 3)\n    scores = (1 / residual_capacities + np.cos(item / residual_capacities)) * np.exp(item * residual_capacities)\n    \n    return scores",
          "objective": 0.01248,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm calculates the scores for each bin based on the sum of the following factors: the square root of the product between the item size and the residual capacity of the bin, divided by the logarithm of the position index of the bin plus a constant value of 2; the cube root of the difference between the item size and the residual capacity, divided by the product of the position index of the bin and the constant value; the cosine of the ratio between the item size and the residual capacity, multiplied by the exponential of the product between the item size and the residual capacity minus the logarithm of the position index of the bin plus a constant value of 3.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    constant_value = 2\n    residual_capacities = bins - item\n    index_weights = np.log(np.arange(len(bins)) + constant_value)\n    scores = (np.sqrt(item * residual_capacities) / index_weights) + (np.cbrt(item - residual_capacities) / (index_weights * constant_value)) + (np.cos(item / residual_capacities) * np.exp((item * residual_capacities) - np.log(index_weights) + constant_value))\n    \n    return scores",
          "objective": 0.01288,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm calculates the scores for each bin based on the sum of the following factors: the square root of the product between the item size and the residual capacity of the bin, divided by the logarithm of the position index of the bin plus a constant value of 2; the cube root of the difference between the item size and the residual capacity, divided by the product of the position index of the bin and the constant value; the cosine of the ratio between the item size and the residual capacity, multiplied by the exponential of the product between the item size and the residual capacity minus the logarithm of the position index of the bin plus a constant value of 3.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    constant_value = 2\n    residual_capacities = bins - item\n    \n    index_weights = np.full(len(bins), constant_value)  # Simplified component\n    \n    scores = (np.sqrt(item * residual_capacities) / index_weights) + (np.cbrt(item - residual_capacities) / (index_weights * constant_value)) + (np.cos(item / residual_capacities) * np.exp((item * residual_capacities) - np.log(index_weights) + constant_value))\n    \n    return scores",
          "objective": 0.01318,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm calculates the scores for each bin based on a modified version of the original score function, where the cosine and logarithmic functions are used, and the indexing weights are cubed before being used in the score calculation.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    constant_value = 3\n    residual_capacities = bins - item\n    index_weights = np.cbrt(np.array(range(len(bins))) + constant_value) ** 3\n    scores = (residual_capacities + np.cos(item / residual_capacities)) / index_weights * (item * residual_capacities - np.log10(item * residual_capacities))\n    \n    return scores",
          "objective": 0.01388,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm is a modified version of the original score function, where the logarithmic function is removed and the residual capacities are squared before being used in the score calculation.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    constant_value = 3\n    residual_capacities = bins - item\n    index_weights = np.cbrt(np.array(range(len(bins))) + constant_value) ** 3\n    scores = (residual_capacities + np.cos(item / residual_capacities)) / index_weights * (item * residual_capacities)\n    \n    return scores",
          "objective": 0.01519,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm calculates the scores for each bin based on a modified version of the original score function, where the logarithmic and square root functions are replaced with the hyperbolic tangent and the exponential functions, respectively, and the indexing weights are cubed before being used in the score calculation.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    constant_value = 2\n    residual_capacities = bins - item\n    index_weights = (np.array(range(len(bins))) + constant_value) ** 3\n    scores = (residual_capacities + np.tanh(item / residual_capacities)) / index_weights * np.exp(item * residual_capacities - np.log(item * residual_capacities))\n    \n    return scores",
          "objective": 0.01902,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm calculates the scores for each bin based on the product of the remaining capacity and the logarithm of the bin index plus a constant value of 2, divided by the cosine of the ratio between the item size and the remaining capacity. The algorithm then assigns scores to each bin and returns an array of scores for assignment.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    constant_value = 2\n    remaining_capacities = bins - item\n    index_weights = np.log(np.arange(len(bins)) + 1 + constant_value)\n    scores = (remaining_capacities * index_weights) / np.cos(item / remaining_capacities)\n    \n    return scores",
          "objective": 0.01912,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm calculates the scores for each bin based on a combination of factors including the remaining capacity, the item size, the number of used bins, and the position index of each bin. It also penalizes bins at maximum capacity and incentivizes the utilization of bins with more space and bins that have not been assigned items yet by considering the sizes of the items in the bins. The algorithm then assigns scores to each bin and returns an array of scores for assignment.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    num_bins_used = len(bins) - np.count_nonzero(bins == max_capacity)\n    item_weights = (item - bins) / (np.abs(bins - item) + 1)\n    \n    scores = np.zeros_like(bins, dtype=float)\n    for i in range(len(bins)):\n        if bins[i] == max_capacity:\n            scores[i] = -(i+1) * num_bins_used\n        else:\n            remaining_capacity = max_capacity - bins[i]\n            index_weights = np.arange(len(bins))\n            scores[i] = remaining_capacity * item_weights[i] / index_weights[i]\n    \n    scores[bins == max_capacity] = -np.arange(len(bins))[bins == max_capacity] * num_bins_used\n    \n    return scores",
          "objective": 0.01932,
          "other_inf": null
     },
     {
          "algorithm": "My new algorithm calculates the scores for each bin based on a combination of factors including the remaining capacity, the item size, the number of used bins, and the position index of each bin. It also penalizes bins at maximum capacity and incentivizes the utilization of bins with more space and bins that have not been assigned items yet by considering the sizes of the items in the bins. The algorithm then assigns scores to each bin and returns an array of scores for assignment.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    num_bins_used = len(bins) - np.count_nonzero(bins == max_capacity)\n    item_weights = np.divide((item - bins), np.abs(bins - item))\n    indices = np.arange(len(bins))\n    \n    scores = np.zeros_like(bins, dtype=float)\n    mask = bins == max_capacity\n    scores[mask] = -np.multiply(np.arange(len(bins)), num_bins_used)[mask]\n    \n    remaining_capacity = max_capacity - bins\n    scores[~mask] = np.divide(np.multiply(remaining_capacity, item_weights), indices)[~mask]\n    \n    return scores",
          "objective": 0.01942,
          "other_inf": null
     },
     {
          "algorithm": "\nThe new algorithm will calculate the scores for each bin based on a combination of factors including the remaining capacity, the item size, the number of used bins, and the position index of each bin. It will penalize bins at maximum capacity and incentivize the utilization of bins with more space and bins that have not been assigned items yet by considering the sizes of the items in the bins. Additionally, it will also take into account the distance between each bin's index and the index of the last assigned bin to avoid clustering of assigned bins. The algorithm will assign scores to each bin and return an array of scores for assignment.\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    num_bins_used = len(bins) - np.count_nonzero(bins == max_capacity)\n    item_weights = (item - bins) / (np.abs(bins - item) + 1)\n    \n    scores = np.zeros_like(bins, dtype=float)\n    last_assigned_index = -1\n    \n    for i in range(len(bins)):\n        if bins[i] == max_capacity:\n            scores[i] = -(i+1) * num_bins_used\n        else:\n            remaining_capacity = max_capacity - bins[i]\n            distance_factor = np.abs(i - last_assigned_index)\n            scores[i] = remaining_capacity * item_weights[i] / (distance_factor + 1)\n    \n    scores[bins == max_capacity] = -(np.arange(len(bins))[bins == max_capacity] + 1) * num_bins_used\n    \n    return scores",
          "objective": 0.01972,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm calculates the scores for each bin based on the residual capacity of the bin multiplied by the sine of the ratio between the item size and the residual capacity, divided by the square root of the position index of the bin plus a constant value of 3, and subtracted by the logarithm of the product of the item size and the residual capacity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    constant_value = 3\n    \n    # Simplify calculation of residual_capacities\n    residual_capacities = bins - item\n    \n    # Simplify calculation of index_weights\n    index_weights = np.sqrt(np.arange(len(bins)))\n    \n    scores = (residual_capacities * np.sin(item / residual_capacities)) / index_weights - np.log(item * residual_capacities)\n    \n    return scores",
          "objective": 0.02455,
          "other_inf": null
     }
]