[
     {
          "algorithm": "New algorithm description: \nThe new algorithm assigns scores to bins based on a modified version of the previous algorithm. This algorithm includes an additional step to consider the size difference between the remaining capacity of a bin and the item size. \n\nNew algorithm main steps:\n1. Calculate the difference between the remaining capacity of each bin and a target capacity, which is defined as the maximum capacity divided by the square root of the item size.\n2. Calculate the penalty factor for each bin as follows:\n   a. If the remaining capacity is greater than the target capacity, set the penalty factor to 1.\n   b. If the remaining capacity is less than the target capacity, set the penalty factor to the square root of the item size divided by the remaining capacity.\n3. Calculate the scores for each bin as follows:\n   a. Divide the penalty factor by the proportional remaining capacity, considering a small value (e.g., 1e-12) to avoid division by zero.\n   b. Multiply the scores by the ratio of the remaining capacity to the square root of the item size, but only if the remaining capacity is greater than or equal to the item size.\n4. Return the scores for the bins for assignment.\n\nNew algorithm implementation:\n\n```",
          "code": "import numpy as np\n\ndef score(item, bins):\n    remaining_capacity = bins - item\n    target_capacity = np.mean(bins) / np.sqrt(item)\n    penalty_factor = np.where(remaining_capacity > target_capacity, 1, np.sqrt(item) / remaining_capacity)\n    scores = penalty_factor / (remaining_capacity / (np.cumsum(remaining_capacity) + 1e-12)) * np.where(remaining_capacity >= item, remaining_capacity / np.sqrt(item), 0)\n    return scores",
          "objective": 0.00956,
          "other_inf": null
     }
]