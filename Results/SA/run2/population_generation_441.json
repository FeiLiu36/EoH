[
     {
          "algorithm": "\nThe new algorithm calculates the score for each bin by taking the reciprocal of the sum of the cube root of the absolute differences between the remaining capacity of the bin and the item size, then raising it to a power equal to the square root of the item size, and finally normalizing the scores to ensure consistency and comparability across different bins.\n",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    remaining_capacity = bins - item\n    \n    absolute_diff = np.abs(remaining_capacity - item)\n    \n    sum_diff_cbrt = np.sum(np.cbrt(absolute_diff))\n    \n    scores = (1 / sum_diff_cbrt) ** np.sqrt(item)\n    \n    normalized_scores = (scores - np.min(scores)) / (np.max(scores) - np.min(scores))\n    \n    return scores",
          "objective": 0.04226,
          "other_inf": null
     }
]