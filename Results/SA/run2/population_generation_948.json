[
     {
          "algorithm": "New algorithm description:\n\nThe \"Modified Score Algorithm\" assigns scores to the bins based on a modified formula that takes into account both the remaining capacities of the bins and the number of items already present in each bin, aiming to prioritize bins with larger remaining capacities and minimize the number of used bins.\n\nNew algorithm code:\n```",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    # Calculate the remaining capacities of the bins\n    remaining_capacity = bins - item\n\n    # Calculate the score based on the remaining capacity and the number of items already present in the bin\n    scores = remaining_capacity * (1 - np.count_nonzero(bins) / bins.size)\n\n    # Minimize the score of bins with remaining capacity equal to the maximum capacity\n    max_capacity = np.max(bins)\n    scores[bins == max_capacity] = -np.inf\n\n    return scores",
          "objective": 0.04226,
          "other_inf": null
     }
]