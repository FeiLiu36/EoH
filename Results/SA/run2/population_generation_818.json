[
     {
          "algorithm": "Algorithm: The new algorithm assigns scores to each bin based on the sum of the rest capacities of each bin, the square root of the maximum capacity minus the item size, the cube root of the product of the difference between the current item's size and the minimum capacity among the bins, and a logarithmic value that is proportional to the item size and the number of bins.\n\nCode:\n",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    num_bins = len(bins)\n    \n    # Calculate the sum of the rest capacities of each bin\n    sum_rest_capacities = np.sum(bins)\n    \n    # Calculate the square root of the maximum capacity minus the item size\n    sqrt_max_minus_item = np.sqrt(np.max(bins) - item)\n    \n    # Calculate the minimum capacity among the bins\n    min_capacity = np.min(bins)\n    \n    # Calculate the difference between the current item's size and the minimum capacity\n    diff_item_min_capacity = item - min_capacity\n    \n    # Calculate the cube root of the product of the difference and the reciprocal of the sum of the rest capacities\n    cube_product_diff_reciprocal_sum = np.cbrt(diff_item_min_capacity * (1 / sum_rest_capacities))\n    \n    # Calculate the logarithmic value proportional to the item size and the number of bins\n    log_value = np.log(item * num_bins)\n    \n    # Calculate the scores based on the modified formula\n    scores = sum_rest_capacities + sqrt_max_minus_item + cube_product_diff_reciprocal_sum + log_value\n    \n    return scores",
          "objective": 0.04226,
          "other_inf": null
     }
]