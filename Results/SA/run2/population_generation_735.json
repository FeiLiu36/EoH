[
     {
          "algorithm": "The new algorithm assigns scores to the bins based on the logarithm of the item size, the logarithm of the average rest capacity of each bin, the ratio of the item size to the maximum capacity, and a penalty factor based on the difference between the item size and the rest capacity of each bin. The final scores are normalized to ensure self-consistency.",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    max_rest_capacity = np.max(bins)\n    max_capacity = np.max([item, max_rest_capacity])\n    avg_rest_capacity = np.mean(bins)\n\n    # Calculate the penalty factor dynamically based on the maximum capacity\n    penalty_factor = (max_capacity - bins) / max_capacity\n\n    # Calculate the logarithm of the item size and the logarithm of the average rest capacity of each bin\n    log_item = np.log(item)\n    log_avg_rest_capacity = np.log(avg_rest_capacity)\n\n    # Calculate the adjusted scores based on the logarithm of the item size, the logarithm of the average rest capacity of each bin,\n    # the ratio of the item size to the maximum capacity, and the penalty factor\n    ratio = item / max_capacity\n    adjusted_scores = log_item * log_avg_rest_capacity * ratio * penalty_factor\n\n    # Normalize the adjusted scores to ensure self-consistency\n    scores = adjusted_scores / np.sum(adjusted_scores)\n\n    return scores",
          "objective": 0.03984,
          "other_inf": null
     }
]