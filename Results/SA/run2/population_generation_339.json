[
     {
          "algorithm": "\nThe new algorithm calculates the score for each bin based on the remaining capacities of the bins, the ratio between the remaining capacity of each bin and the item size, and a penalty term that increases as the remaining capacities of the bins increase. The scores are then normalized to a range between 0 and 1.\n",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    remaining_capacity = bins - item\n    remaining_ratio = remaining_capacity / item\n\n    penalty = np.sum(remaining_capacity) / (bins.size * item)\n\n    scores = np.exp(-remaining_ratio * (remaining_capacity / penalty))\n\n    normalized_scores = (scores - np.min(scores)) / (np.max(scores) - np.min(scores))\n\n    return scores",
          "objective": 0.03984,
          "other_inf": null
     }
]