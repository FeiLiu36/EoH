[
     {
          "algorithm": "The new algorithm assigns scores to each bin based on the sum of the rest capacities of each bin, the difference between the maximum capacity and the item size, the square root of the product of the difference between the current item's size and the minimum capacity among the bins, and a constant value that is proportional to the item size and the number of bins.",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    num_bins = len(bins)\n    \n    # Calculate the sum of the rest capacities of each bin\n    sum_rest_capacities = np.sum(bins)\n    \n    # Calculate the difference between the maximum capacity and the item size\n    diff_max_capacity = np.max(bins) - item\n    \n    # Calculate the product of the difference and the reciprocal of the sum of the rest capacities\n    product_diff_reciprocal_sum = diff_max_capacity / sum_rest_capacities\n    \n    # Calculate the minimum capacity among the bins\n    min_capacity = np.min(bins)\n    \n    # Calculate the difference between the current item's size and the minimum capacity\n    diff_item_min_capacity = item - min_capacity\n    \n    # Calculate the constant value proportional to the item size and the number of bins\n    constant_value = item * num_bins\n    \n    # Calculate the product of the difference and constant value\n    product_diff_constant = diff_item_min_capacity * constant_value\n    \n    # Calculate the square root of the product of the difference and constant value\n    sqrt_product_diff_constant = np.sqrt(product_diff_constant)\n    \n    # Calculate the scores based on the modified formula\n    scores = product_diff_reciprocal_sum * sqrt_product_diff_constant\n    \n    return scores",
          "objective": 0.04226,
          "other_inf": null
     }
]