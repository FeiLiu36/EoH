[
     {
          "algorithm": "New algorithm description: The new algorithm calculates the score for each bin based on a combination of the ratio of remaining capacity to the maximum capacity, the difference between the remaining capacity and the average capacity, a penalty term that penalizes bins with a large remaining capacity compared to the item size, and a reward term that rewards bins with a small remaining capacity compared to the item size. The scores are then scaled based on the maximum capacity and the average capacity, similar to the previous algorithm. \n\nCode:\n\n",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    remaining_capacity = bins - item\n    max_capacity = np.max(bins)\n    avg_capacity = np.mean(bins)\n    \n    ratio_score = remaining_capacity / max_capacity  # Calculate ratio score based on the ratio of remaining capacity to maximum capacity\n    \n    penalty_score = np.maximum(0, remaining_capacity - avg_capacity)  # Calculate penalty score based on the difference between remaining capacity and average capacity\n    \n    reward_score = np.maximum(0, item - remaining_capacity)  # Calculate reward score based on the difference between item size and remaining capacity\n    \n    priority_score = max_capacity / np.log(bins + 2)  # Calculate priority score based on the maximum capacity of each bin with a logarithmic scale\n    \n    scaling_factor = max_capacity / (np.max(bins) + avg_capacity)  # Scaling factor based on the maximum capacity and average capacity\n    \n    scaled_penalty = penalty_score * 0.5  # Scale the penalty score\n    \n    scores = ratio_score + scaled_penalty + reward_score + priority_score + scaling_factor\n    \n    return scores",
          "objective": 0.03984,
          "other_inf": null
     }
]