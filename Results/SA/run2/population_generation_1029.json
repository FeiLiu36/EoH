[
     {
          "algorithm": "The Modified Bin Assignment Algorithm",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    scores = np.empty(len(bins))\n    remaining_capacity = bins - item\n    max_capacity = np.max(bins)\n    avg_capacity = np.mean(bins)\n    \n    penalty_score = np.square(remaining_capacity - avg_capacity)\n    \n    reward_score = remaining_capacity / (item * 0.5)\n    \n    priority_score = 1 / remaining_capacity\n    \n    scaling_factor = max_capacity - avg_capacity\n    \n    difference_score = np.abs(remaining_capacity - avg_capacity)\n    \n    scores = penalty_score + reward_score + priority_score + scaling_factor + difference_score\n    \n    sorted_indices = np.argsort(scores)[::-1]\n    sorted_bins = bins[sorted_indices]\n    \n    assigned_bins = []\n    for bin_capacity in sorted_bins:\n        if item <= bin_capacity:\n            assigned_bins.append(bin_capacity)\n            break\n    else:\n        assigned_bins.append(max_capacity)\n    \n    return scores",
          "objective": 0.03984,
          "other_inf": null
     }
]