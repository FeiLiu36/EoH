[
     {
          "algorithm": "Algorithm description: The new algorithm calculates the score for each bin based on a weighted combination of factors, including the reciprocal of the remaining capacity of the bins, the logarithm of the item size, and the scaled sum of the remaining capacities of the bins divided by the total capacity of all feasible bins. The algorithm adds an additional factor of the square root of the logarithm of the reciprocal of the item size.\n\nNew algorithm implementation:\n\n``` \nCode:\n",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    remaining_capacity = bins - item\n    reciprocal_scores = 1 / remaining_capacity\n    logarithmic_scores = np.log(item + 1)\n    scaled_sum = np.sum(remaining_capacity) / np.sum(bins)\n    sqrt_scores = np.sqrt(np.log(1 / item))\n    scores = (reciprocal_scores * logarithmic_scores * sqrt_scores) * scaled_sum\n    return scores",
          "objective": 0.04226,
          "other_inf": null
     }
]