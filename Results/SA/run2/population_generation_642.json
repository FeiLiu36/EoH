[
     {
          "algorithm": "New Algorithm Description: The new algorithm assigns scores to the bins based on their rest capacities and a modified version of the item-size ratio, adjusts the scores based on a scaling factor, and normalizes the scores to ensure self-consistency. It then assigns additional bonus scores to the bins based on their rest capacities squared minus a discount factor, and normalizes the bonus scores. Finally, it combines the adjusted scores and the normalized bonus scores to generate the final scores for bin assignment.\n\nNew Algorithm Code:\n\n```",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    scaling_factor = 0.5\n    discount_factor = 0.2\n\n    # Calculate the modified version of the item-size ratio\n    size_ratio = bins / np.sqrt(item)\n    \n    # Adjust the scores by multiplying with the rest capacities\n    adjusted_scores = size_ratio * bins\n\n    # Scale the adjusted scores to ensure self-consistency\n    scaled_scores = adjusted_scores / np.sum(adjusted_scores)\n\n    # Assign bonus scores based on the inverse of the squared rest capacities minus the discount factor\n    bonus_scores = 1 / ((bins ** 2) - discount_factor)\n\n    # Normalize the bonus scores to ensure self-consistency\n    normalized_bonus_scores = bonus_scores / np.sum(bonus_scores)\n\n    # Combine the scaled scores and normalized bonus scores\n    scores = scaling_factor * scaled_scores + normalized_bonus_scores\n\n    return scores",
          "objective": 0.03984,
          "other_inf": null
     }
]