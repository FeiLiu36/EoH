[
     {
          "algorithm": "New algorithm:\n\nThe new algorithm calculates the score for each bin by taking the sum of the product of the reciprocal of the difference between the item size and the rest capacity of each bin and the reciprocal of the maximum capacity of the bins, and then adds a small constant value to ensure non-zero scores. Finally, it divides each score by the sum of the rest capacities of all the bins to achieve a more equitable distribution of scores and assign items to bins more effectively.\n\nCode:\n\n",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    max_capacity = np.max(bins)\n    rest_capacity = max_capacity - bins\n    constant_value = 0.001    # Change the constant value as desired\n    \n    scores = np.sum((1 / (item - rest_capacity)) * (1 / max_capacity)) + constant_value\n    sum_rest_capacities = np.sum(rest_capacity)   # Sum of the rest capacities of all bins\n    \n    scores /= sum_rest_capacities\n    \n    return scores",
          "objective": 0.04226,
          "other_inf": null
     }
]