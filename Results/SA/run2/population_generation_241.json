[
     {
          "algorithm": "New algorithm description: \n\nThe new algorithm calculates the product of the log of the remaining capacity divided by the maximum capacity, and the squared differences between the remaining capacity and the maximum capacity for each bin (after deducting the item size), and assigns it to a variable called 'product_log'. \n\nNext, it calculates the cumulative sum of the 'product_log' array and assigns it to a variable called 'cumulative_sum'. \n\nThen, it calculates the scores for each bin by multiplying the 'cumulative_sum' array by the squared differences array. \n\nThe scores are then sorted in descending order and returned. \n\nFinally, a check is performed to ensure that no bin with a remaining capacity equal to the maximum capacity is used. \n\nCode:\n\n",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    max_capacity = np.max(bins)\n    remaining_capacity = bins - item\n\n    squared_differences = (remaining_capacity - max_capacity) ** 2\n    product_log = np.log(remaining_capacity / max_capacity)\n    cumulative_sum = np.cumsum(product_log)\n\n    scores = cumulative_sum * squared_differences\n    sorted_indices = np.argsort(scores)[::-1]\n    scores = scores[sorted_indices]\n\n    if remaining_capacity[int(sorted_indices[0])] == max_capacity:\n        scores[0] = 0\n\n    return scores",
          "objective": 0.04226,
          "other_inf": null
     }
]