[
     {
          "algorithm": "New algorithm: The new algorithm calculates the scores for the bins based on a combination of two factors: the difference between the bin capacity and the item size, and the remaining capacity of the bin after assigning the item. The algorithm assigns higher scores to bins with smaller differences and larger remaining capacities, while also considering a penalty factor for bins that are not used.\n\nPython Implementation:\n\n```",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    # Calculate the differences between the bin capacity and the item size\n    differences = bins - item\n    \n    # Calculate the remaining capacities of the bins after assigning the item\n    remaining_capacity = bins - np.minimum(differences, 0)\n    \n    # Calculate the penalty factor for bins that are not used\n    penalty = np.where(remaining_capacity == bins, 0.1, 1)\n    \n    # Calculate the modified scores for the bins\n    scores = (1 / (1 + np.abs(differences))) * np.sqrt(remaining_capacity) * penalty\n    \n    # Replace NaN values with a large negative value to avoid errors in assignment\n    scores[np.isnan(scores)] = -np.inf\n    \n    return scores",
          "objective": 0.03984,
          "other_inf": null
     }
]