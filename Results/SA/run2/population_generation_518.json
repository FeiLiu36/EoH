[
     {
          "algorithm": "The new algorithm calculates the scores for the bins based on the following steps:\n1. Calculate the ratio of the remaining capacity of each bin to the item size.\n2. Calculate the weights based on the inverse ratio of the remaining capacity to the item size.\n3. Scale the weights using a power function to maintain self-consistency and avoid extreme values.\n4. Calculate the penalty for bins with a higher ratio of item size to bin capacity.\n5. Calculate the penalty for bins that already have higher items assigned.\n6. Calculate the bonus for bins with remaining capacity close to their maximum capacity, based on the log of the remaining capacity.\n7. Calculate the scores by combining the weights, ratio penalty, higher item penalty, and near-maximum capacity bonus.\n8. Return the scores array.\n\nHere is the implementation of the new algorithm in Python:\n\n",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    remaining_capacity = bins - item\n    \n    # Calculate ratios of remaining capacity to item size\n    ratios = remaining_capacity / item\n    \n    # Calculate weights based on inverse ratios\n    weights = 1 / ratios\n    \n    # Scale weights using power function to maintain self-consistency\n    scaled_weights = weights ** 0.5\n    \n    # Calculate the penalty for bins with higher ratios of item size to bin capacity\n    ratio_penalty = np.where(bins != 0, item / bins, 0)\n    \n    # Penalty for bins that already have higher items assigned\n    higher_item_penalty = np.where(bins < item, 0.3 * item, 0)\n    \n    # Bonus for bins with remaining capacity close to their maximum capacity, based on the log of remaining capacity\n    near_max_capacity_bonus = np.where(remaining_capacity >= (np.max(bins) * 0.8), np.log(remaining_capacity), 0)\n    \n    scores = scaled_weights + ratio_penalty - higher_item_penalty + near_max_capacity_bonus\n    \n    return scores",
          "objective": 0.03924,
          "other_inf": null
     }
]