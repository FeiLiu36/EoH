[
     {
          "algorithm": "\nNew algorithm: The enhanced algorithm aims to optimize bin assignment by considering the remaining capacities of bins, minimizing the difference between capacities, and prioritizing bins with the smallest remaining capacity. The main steps are as follows:\n1. Initialize an empty array to store the scores for each bin.\n2. Calculate the remaining capacity of each bin by subtracting the item size from the rest capacities of feasible bins.\n3. Compute the maximum capacity and average capacity of all the bins.\n4. Calculate a ratio score for each bin by dividing its remaining capacity by the maximum capacity.\n5. Calculate a penalty score for each bin based on the difference between its remaining capacity and the average capacity, penalizing large differences.\n6. Calculate a reward score for each bin by taking the difference between the item size and the remaining capacity.\n7. Calculate a priority score for each bin by taking the reciprocal of its remaining capacity.\n8. Scale the penalty scores by multiplying them with a scaling factor based on the maximum capacity and the average capacity.\n9. Calculate a difference score for each bin based on the absolute difference between its remaining capacity and the average capacity.\n10. Compute the final score for each bin by summing up the ratio score, scaled penalty scores, reward score, priority score, scaling factor, and difference score.\n11. Return the scores for the bins for assignment.\n",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    scores = np.empty(len(bins))\n    remaining_capacity = bins - item\n    max_capacity = np.max(bins)\n    avg_capacity = np.mean(bins)\n    \n    ratio_score = remaining_capacity / max_capacity\n    \n    penalty_score = np.abs(remaining_capacity - avg_capacity)\n    penalty_score -= np.mean(penalty_score)  # Normalize penalty scores\n    \n    reward_score = np.maximum(0, item - remaining_capacity)\n    \n    priority_score = 1 / remaining_capacity\n    \n    scaling_factor = max_capacity / (np.max(bins) - avg_capacity)\n    \n    difference_score = np.abs(remaining_capacity - avg_capacity)\n    \n    scores = ratio_score + penalty_score + reward_score + priority_score + scaling_factor + difference_score\n    \n    return scores",
          "objective": 0.03984,
          "other_inf": null
     }
]