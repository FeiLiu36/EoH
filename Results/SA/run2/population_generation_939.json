[
     {
          "algorithm": "Algorithm description: \n\nIn my new algorithm, called the \"Modified Weighted Capacity Algorithm 2,\" I will assign scores to the bins based on a modified formula that takes into account both the remaining bin capacity and the number of items already present in the bin, with an added modification to consider the ratio between the remaining bin capacity and the item size. \n\nCode:\n\n```",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    # Calculate the ratio between the remaining bin capacity and the item size\n    ratio = bins / item\n    \n    # Calculate the weighted scores based on the ratio and the number of items already present\n    weighted_scores = ratio / (bins.size - np.count_nonzero(bins))\n    \n    # Adjust scores based on the number of used bins so far\n    num_used_bins = np.count_nonzero(bins < np.max(bins))\n    adjusted_scores = weighted_scores * (0.1 ** num_used_bins)\n    \n    scores = np.maximum(adjusted_scores, 0)\n\n    return scores",
          "objective": 0.04226,
          "other_inf": null
     }
]