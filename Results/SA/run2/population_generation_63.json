[
     {
          "algorithm": "\nThe new algorithm assigns a score to each bin based on its remaining capacity and the item size, and penalizes bins with a higher remaining capacity. It also introduces a penalty factor that increases exponentially as the remaining capacity increases beyond a certain threshold. Finally, it takes into account the deviation of each bin's remaining capacity from the average remaining capacity, and penalizes bins with larger deviations. However, in this modified algorithm, we will also consider the square root of the remaining capacity ratio and apply a power factor to the deviation penalty term to further emphasize the penalties for larger deviations from the average remaining capacity.\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    remaining_capacity_ratio = bins / item\n    average_remaining_capacity = np.mean(bins)\n    threshold = 2 # Adjust this threshold as needed\n    \n    deviation_penalty = (np.abs(bins - average_remaining_capacity) ** 2 * item) ** 1.5 # Penalize bins with larger deviations from the average remaining capacity\n    \n    scores = ((remaining_capacity_ratio ** 0.5) * (item / bins) - np.log10(bins) - threshold) * (item / average_remaining_capacity) - deviation_penalty\n    scores = np.where(scores < 0, 0, scores) # Set negative scores to 0\n    \n    return scores",
          "objective": 0.04226,
          "other_inf": null
     }
]