[
     {
          "algorithm": "New algorithm description: The modified algorithm assigns a score to each bin based on the ratio of remaining capacity to item size, penalizes bins with a deviation from the minimum remaining capacity, and gives a bonus to bins with a remaining capacity closer to the minimum remaining capacity. The algorithm also considers the maximum capacity of each bin, ensuring that bins with maximum capacity are not used. The modified algorithm performs an additional step of sorting the bins based on their scores in descending order before returning the scores.\n\nCode:\n\n```",
          "code": "import numpy as np\n\ndef score(item, bins):\n    remaining_capacity_ratio = bins / item\n    min_remaining_capacity = np.min(bins)\n    deviation = np.abs(bins - min_remaining_capacity)\n    deviation_penalty = deviation * item\n    bonus = (min_remaining_capacity - bins) / min_remaining_capacity\n    scores = (remaining_capacity_ratio - 1) * (item / min_remaining_capacity) - deviation_penalty + bonus\n    scores = np.where(bins == np.max(bins), 0, scores)\n    \n    sorted_indices = np.argsort(scores)[::-1]\n    scores = scores[sorted_indices]\n    \n    return scores",
          "objective": 0.04226,
          "other_inf": null
     }
]