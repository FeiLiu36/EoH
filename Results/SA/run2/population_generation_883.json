[
     {
          "algorithm": "My new algorithm calculates the scores for the bins based on the combination of three factors - a penalty factor, a ratio factor, and a bonus factor. The penalty factor penalizes bins that cannot accommodate the item, the ratio factor considers the ratio of the item size to the remaining capacity of each bin, and the bonus factor rewards bins with a higher remaining capacity. The scores are calculated using a modified formula, which is a modification of the previous formula.",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    num_bins = len(bins)\n    \n    # Calculate the penalty factor for bins that cannot accommodate the item\n    penalty_factor = np.where(bins < item, -np.inf, 1)\n    \n    # Calculate the ratio factor based on the item size and remaining capacity of each bin\n    ratio_factor = np.where(bins > item, item / bins, np.inf)\n    \n    # Calculate the bonus factor based on the remaining capacity of each bin\n    bonus_factor = bins / np.max(bins)\n    \n    # Calculate the scores based on the modified formula - Modified formula: penalty_factor * ratio_factor * bonus_factor (modification of the previous formula)\n    scores = (penalty_factor + 1) * ratio_factor * bonus_factor\n    \n    return scores",
          "objective": 0.03954,
          "other_inf": null
     }
]