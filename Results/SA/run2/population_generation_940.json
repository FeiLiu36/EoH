[
     {
          "algorithm": "Algorithm description: In my new algorithm, called the \"Modified Weighted Capacity Algorithm 3,\" I will assign scores to the bins based on a modified formula that combines the remaining bin capacity, the number of items already present in the bin, and the ratio between the remaining bin capacity and the item size. This modified algorithm aims to further optimize the bin selection process by considering the capacity utilization and the relative size of the remaining space in each bin.\n\nCode:\n\n```",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    # Calculate the ratio between the remaining bin capacity and the item size\n    ratio = bins / item\n    \n    # Calculate the weighted scores based on the ratio, the number of items already present, and capacity utilization\n    weighted_scores = ratio / (bins.size - np.count_nonzero(bins)) * (1 - bins/item)\n    \n    # Adjust scores based on the number of used bins so far\n    num_used_bins = np.count_nonzero(bins < np.max(bins))\n    adjusted_scores = weighted_scores * (0.1 ** num_used_bins)\n    \n    scores = np.maximum(adjusted_scores, 0)\n\n    return scores",
          "objective": 0.04095,
          "other_inf": null
     }
]