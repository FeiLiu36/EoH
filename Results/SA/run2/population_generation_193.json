[
     {
          "algorithm": "The new algorithm calculates the scores for each bin based on a combination of a polynomial function and an exponential function, which assigns higher scores to bins with larger remaining capacity and also penalizes bins with very low remaining capacity. The polynomial function is scaled by a factor of 1000 to further promote performance.\n\nHere is the implementation of the new algorithm:\n\n```",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    # Calculate the remaining capacity after assigning the item to each bin\n    remaining_capacity = bins - item\n    \n    # Calculate the scores for each bin using a combination of polynomial and exponential functions (scaled by 1000)\n    scores = 1000 * (1 - np.exp(-remaining_capacity)) + 0.001 * np.power(remaining_capacity, 3)\n    \n    # Sort the indices of bins in descending order based on the scores\n    sorted_indices = np.argsort(scores)[::-1]\n    \n    # Reorder the scores based on the sorted indices\n    scores = scores[sorted_indices]\n    \n    return scores",
          "objective": 0.04226,
          "other_inf": null
     }
]