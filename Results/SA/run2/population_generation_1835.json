[
     {
          "algorithm": "\nThe new algorithm assigns scores to the bins based on the product of the ratio of the item size to the remaining capacity and a penalty factor. The penalty factor penalizes bins with larger remaining capacities and larger maximum capacities. The scores are then adjusted based on the remaining capacity and normalized to fall within the range [0, 1]. The penalty factor is calculated using the formula: (remaining_capacity^2) / (max_capacity^2).\n",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    # Calculate the remaining capacity of the bins\n    remaining_capacity = bins - item\n    \n    # Calculate the ratio of item size to remaining capacity\n    ratio = item / remaining_capacity\n    \n    # Calculate the penalty factor for bins with larger remaining capacity and larger maximum capacity\n    penalty_factor = (remaining_capacity**2) / (bins**2)\n    \n    # Adjust the scores based on the remaining capacity\n    adjusted_scores = ratio * penalty_factor\n    \n    # Normalize the scores to fall within the range [0, 1]\n    min_score = np.min(adjusted_scores)\n    max_score = np.max(adjusted_scores)\n    scores = (adjusted_scores - min_score) / (max_score - min_score)\n    \n    return scores",
          "objective": 0.02334,
          "other_inf": null
     }
]