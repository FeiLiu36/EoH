[
     {
          "algorithm": "Algorithm description: The new algorithm calculates the score for each bin based on the remaining capacities of the bins using a modified formula that considers the square root of the ratio of the remaining capacity to the item size, as well as the exponential function of the ratio of the item size to the remaining capacity. The scores are then normalized to a range between 0 and 1.\n\nCode:\n",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    remaining_capacity = bins - item\n    \n    sqrt_ratio = np.sqrt(remaining_capacity / item)\n    exp_ratio = np.exp(item / remaining_capacity)\n    \n    scores = sqrt_ratio * exp_ratio\n    \n    normalized_scores = (scores - np.min(scores)) / (np.max(scores) - np.min(scores))\n    \n    return scores",
          "objective": 0.03924,
          "other_inf": null
     }
]