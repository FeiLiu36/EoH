[
     {
          "algorithm": "\n  \"description\": \"My new algorithm calculates the score for each bin based on the remaining capacities and the ratio of the current item size to the bin capacity. The score is adjusted based on a logarithmic transformation of the ratio and a sigmoid transformation of the remaining capacities, followed by a multiplication with a factor that increases as the bin index increases. The scores are returned in descending order.\"\n",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    remaining_capacity = bins - item\n    ratio = item / bins\n\n    # Constants for adjusting importance of each term in the scoring formula\n    logarithmic_factor = 0.5\n    sigmoid_factor = 0.6\n\n    logarithmic_term = logarithmic_factor * np.log(ratio + 1)\n    sigmoid_term = sigmoid_factor * (1 / (1 + np.exp(-remaining_capacity)))\n\n    scores = (logarithmic_term + sigmoid_term) * (np.arange(len(bins))/(len(bins)-1)) + 1\n\n    sorted_indices = np.argsort(scores)[::-1]\n    scores = scores[sorted_indices]\n\n    return scores",
          "objective": 0.04226,
          "other_inf": null
     }
]