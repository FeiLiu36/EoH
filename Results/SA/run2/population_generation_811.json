[
     {
          "algorithm": "The new algorithm calculates the score for each bin by taking the reciprocal of the sum of the absolute differences between the rest capacities of each bin and the maximum capacity, multiplied by the logarithm of the item size divided by the logarithm of the maximum capacity of any bin, and finally multiplying it with a constant value that is a function of the item size and the number of bins.",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    num_bins = len(bins)\n    \n    # Calculate the sum of absolute differences between the rest capacities of each bin and the maximum capacity\n    diff_capacity = np.abs(bins - np.max(bins))\n    \n    # Calculate the reciprocal of the sum of absolute differences\n    rec_diff = 1 / np.sum(diff_capacity)\n    \n    # Calculate the logarithm of the item size divided by the logarithm of the maximum capacity of any bin\n    log_ratio = np.log(item) / np.log(np.max(bins))\n    \n    # Calculate the constant value based on item size and number of bins\n    constant_value = np.exp(-item / num_bins)\n    \n    # Calculate the scores based on the modified formula and the constant value\n    scores = rec_diff * log_ratio * constant_value\n    \n    return scores",
          "objective": 0.04226,
          "other_inf": null
     }
]