[
     {
          "algorithm": "New algorithm description:\n\nIn the new algorithm, we modify the scoring function by introducing a penalty for bins with higher remaining capacity, providing a bonus for bins with a smaller average remaining capacity, incorporating a penalty for bins that are close to their maximum capacity, and introducing an additional penalty for bins with smaller remaining capacity compared to the maximum capacity. We also give a higher weight to the base scores and adjust the penalties and bonuses to have a greater impact on the final scores. The final scores for the bins are calculated by combining the adjusted base scores, remaining capacity penalty, average remaining capacity bonus, and utilization penalty. For performance optimization, we vectorize the calculations using numpy.\n\nCode:\n```",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    num_bins = len(bins)\n    \n    # Calculate base scores with higher weight\n    base_scores = 2 - bins / item\n    \n    # Calculate penalty for bins with higher remaining capacity\n    remaining_capacity_penalty = np.maximum(0, (bins - item) / np.max(bins))\n    \n    # Calculate bonus for bins with a smaller average remaining capacity\n    average_remaining_capacity = (np.sum(bins) - bins) / (num_bins - 1)\n    smaller_average_bonus = np.maximum(0, (average_remaining_capacity - bins) / average_remaining_capacity)\n    \n    # Calculate penalty for bins that are close to their maximum capacity with higher weight\n    utilization_penalty = np.maximum(0, (1.3 - bins / np.max(bins)) * np.where((bins >= 0.8 * np.max(bins)), 0.5, 0))\n    \n    # Calculate penalty for bins with smaller remaining capacity compared to the maximum capacity\n    capacity_ratio_penalty = np.maximum(0, 1 - bins / np.max(bins))\n    \n    # Calculate final scores by combining adjusted base scores, penalties, and bonuses\n    scores = base_scores - 0.5 * remaining_capacity_penalty + 0.5 * smaller_average_bonus - utilization_penalty - 0.3 * capacity_ratio_penalty\n    \n    return scores",
          "objective": 0.03984,
          "other_inf": null
     }
]