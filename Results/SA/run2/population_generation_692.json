[
     {
          "algorithm": "\nNew algorithm description:\nThe new algorithm calculates the scores for the bins based on the ratio of the sum of the rest capacities to the maximum capacity, penalizes bins with rest capacities less than a certain fraction of the maximum capacity, and adjusts the scores based on the difference between the rest capacity and the item size. The final scores are then normalized to ensure self-consistency.\n\nMain steps of the algorithm:\n1. Calculate the maximum rest capacity among the bins.\n2. Calculate the maximum capacity by taking the maximum between the item size and the maximum rest capacity.\n3. Calculate the penalty fraction by dividing the maximum rest capacity by the maximum capacity.\n4. Calculate the ratio of the sum of the rest capacities to the maximum capacity.\n5. Penalize bins with rest capacities less than the penalty fraction times the maximum capacity by setting their scores to zero.\n6. Calculate the adjusted scores by subtracting the item size from each bin's rest capacity and assign zero score to bins that would exceed their maximum capacity if the item was assigned to them.\n7. Combine the adjusted scores and the rest capacity ratio scores by multiplying them.\n8. Normalize the final scores to ensure self-consistency by dividing them by the sum of all scores.\n",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    max_rest_capacity = np.max(bins)\n    max_capacity = np.max([item, max_rest_capacity])\n\n    # Calculate the penalty fraction dynamically based on the maximum capacity\n    penalty_fraction = max_rest_capacity / max_capacity\n\n    # Calculate the ratio of the sum of rest capacities to the maximum capacity\n    total_rest_capacity_ratio = np.sum(bins) / max_capacity\n\n    # Penalize bins with rest capacities less than a fraction of the maximum capacity by reducing their scores to zero\n    bins[bins <= penalty_fraction * max_capacity] = 0\n\n    # Calculate the adjusted scores based on the difference between the rest capacity and the item size\n    adjusted_scores = bins - item\n    adjusted_scores[bins + item > max_capacity] = 0\n\n    # Combine the adjusted scores and the rest capacity ratio scores\n    scores = adjusted_scores * total_rest_capacity_ratio\n\n    # Normalize the final scores to ensure self-consistency\n    scores /= np.sum(scores)\n\n    return scores",
          "objective": 0.04226,
          "other_inf": null
     }
]