[
     {
          "algorithm": "Modified Weighted Capacity Difference Score Algorithm",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    # Calculate the remaining capacities of the bins\n    remaining_capacity = bins - item\n\n    # Calculate the maximum capacity among the bins\n    max_capacity = np.max(bins)\n\n    # Calculate the average capacity of the bins\n    avg_capacity = np.mean(bins)\n\n    # Calculate the difference between the remaining capacity of each bin and the average capacity\n    diff_capacity = remaining_capacity - avg_capacity\n\n    # Calculate the weight for each bin based on the difference in capacities\n    weights = np.exp(-diff_capacity)\n\n    # Calculate the score based on the weighted capacity differences, the maximum capacity, and the current item size\n    scores = np.exp((remaining_capacity - max_capacity) * item) * weights\n\n    # Minimize the score of bins with remaining capacity equal to the maximum capacity\n    scores[bins == max_capacity] = -np.inf\n\n    return scores",
          "objective": 0.04749,
          "other_inf": null
     }
]