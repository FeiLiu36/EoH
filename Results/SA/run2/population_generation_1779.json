[
     {
          "algorithm": "New algorithm description: The new algorithm calculates the scores for the bins by taking the negative square root of the remaining capacities of the bins after assigning the item, and then multiplying it by a penalty factor based on the remaining capacities. Finally, it sets the scores of bins that are not used to a large negative value.\n\nCode:\n\n```",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    # Calculate the remaining capacities of the bins after assigning the item\n    remaining_capacity = bins - item\n    \n    # Calculate the penalty factor based on the remaining capacities\n    penalty_factor = (bins - remaining_capacity) / bins + 1\n    \n    # Calculate the scores for the bins based on the negative square root of the remaining capacities and the penalty factor\n    scores = -np.sqrt(remaining_capacity) * penalty_factor\n    \n    # Set the scores of bins that are not used to a large negative value\n    scores[remaining_capacity >= bins] = -np.inf\n    \n    return scores",
          "objective": 0.03984,
          "other_inf": null
     }
]