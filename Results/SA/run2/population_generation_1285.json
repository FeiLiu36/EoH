[
     {
          "algorithm": "Algorithm description: The new algorithm is a modified version of the original algorithm with the main steps as follows:\n\n1. Calculate the natural logarithm of the bin rest capacity divided by the item size.\n2. Raise the values obtained in step 1 to the power of 3.\n3. Calculate the square root of the sum of the values obtained in step 2 and the absolute difference between the bin rest capacity and the item size.\n4. Take the reciprocal of the square root values.\n5. Scale the reciprocal values to be between 0 and 1.\n6. Multiply the bin rest capacity with the scaled values obtained in step 5.\n7. Return the calculated scores for each bin.\n\nCode:\n\n```\n",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    logarithm_values = np.log(bins / item)  # Step 1\n    raised_values = logarithm_values ** 3  # Step 2\n    absolute_difference = np.sqrt(raised_values + np.abs(bins - item))  # Step 3\n    reciprocal_difference = 1 / absolute_difference  # Step 4\n    scaled_values = (reciprocal_difference - np.min(reciprocal_difference)) / (np.max(reciprocal_difference) - np.min(reciprocal_difference))  # Step 5\n    scores = bins * scaled_values  # Step 6\n\n    return scores",
          "objective": 0.03984,
          "other_inf": null
     }
]