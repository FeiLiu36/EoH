[
     {
          "algorithm": "Algorithm description: The new algorithm calculates the score for each bin by dividing the rest capacity of each bin by the maximum capacity, adding a small constant value to ensure non-zero scores, multiplying each score by a weight that is inversely proportional to the bin capacity, and finally normalizing the scores by dividing them by the sum of the rest capacities of all the bins to achieve a more equitable distribution of scores and assign items to bins more effectively.\n\nCode:\n\n```",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    max_capacity = np.max(bins)\n    rest_capacity = max_capacity - bins\n    constant_value = 0.001  # Change the constant value as desired\n    \n    scores = rest_capacity / max_capacity  # Calculating the initial scores\n    scores += constant_value  # Adding constant value to ensure non-zero scores\n    \n    weights = 1 / bins  # Computing weights inversely proportional to bin capacity\n    scores *= weights  # Multiplying scores by the weights\n    \n    sum_rest_capacities = np.sum(rest_capacity)  # Sum of the rest capacities of all bins\n    scores /= sum_rest_capacities  # Normalizing scores by dividing by the sum of rest capacities\n    \n    return scores",
          "objective": 0.03984,
          "other_inf": null
     }
]