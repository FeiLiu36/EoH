[
     {
          "algorithm": "Algorithm Description:\n\nThe \"Modified Capacity Ratio Algorithm 3.0\" assigns scores to the bins based on a modified formula that incorporates the ratio between the remaining bin capacity and the item size, the capacity utilization, the number of items already present in the bin, the size of the items present in the bin, as well as the variance of item sizes in the bin. This algorithm aims to optimize the bin selection process by considering the relative capacity and size while also accounting for the distribution of item sizes within each bin.\n\nCode:\n\n",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    # Calculate the ratio between the remaining bin capacity and the item size\n    ratio = bins / item\n    \n    # Calculate the weighted scores based on the ratio, the number of items already present, capacity utilization, item sizes present, and variance of item sizes\n    weighted_scores = (ratio * (bins.size - np.count_nonzero(bins)) / np.sum(bins)) * np.count_nonzero(bins / np.max(bins)) * np.sum(bins / item) * np.std(bins / item)\n\n    # Adjust the scores based on the number of used bins so far\n    num_used_bins = np.count_nonzero(bins < np.max(bins))\n    adjusted_scores = weighted_scores * (0.1 ** num_used_bins)\n    \n    scores = np.maximum(adjusted_scores, 0)\n\n    return scores",
          "objective": 0.04226,
          "other_inf": null
     }
]