[
     {
          "algorithm": "New algorithm description: The new algorithm calculates the score for each bin based on the ratio of remaining capacity to the maximum capacity, a penalty term that penalizes bins with a large remaining capacity compared to the item size, and a reward term that rewards bins with a small remaining capacity compared to the item size. The scores are then scaled based on the maximum capacity, the average capacity, and the difference between the remaining capacity of a bin and the average capacity. The new algorithm also introduces a priority factor that prioritizes bins with larger remaining capacities and assigns them higher scores.\n\nCode:\n\n```",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    remaining_capacity = bins - item\n    max_capacity = np.max(bins)\n    avg_capacity = np.mean(bins)\n    \n    ratio_score = remaining_capacity / max_capacity  # Calculate ratio score based on the ratio of remaining capacity to maximum capacity\n    \n    penalty_score = np.maximum(0, remaining_capacity - avg_capacity)  # Calculate penalty score based on the difference between remaining capacity and average capacity\n    \n    reward_score = np.maximum(0, item - remaining_capacity)  # Calculate reward score based on the difference between item size and remaining capacity\n    \n    penalty_factor = np.exp(-np.abs(remaining_capacity - avg_capacity) / avg_capacity)  # Penalty factor that penalizes bins with a large difference in remaining capacity compared to the average capacity\n    \n    priority_score = remaining_capacity / max_capacity  # Priority score that prioritizes bins with larger remaining capacities\n    \n    scaling_factor = max_capacity / (np.max(bins) + avg_capacity)  # Scaling factor based on the maximum capacity and average capacity\n    \n    difference_score = np.abs(remaining_capacity - avg_capacity)  # Difference score based on the difference between remaining capacity and average capacity\n    \n    scaled_penalty = penalty_score * penalty_factor * 0.5  # Scale the penalty score\n    \n    scores = ratio_score + scaled_penalty + reward_score + priority_score + scaling_factor + difference_score\n    \n    return scores",
          "objective": 0.03984,
          "other_inf": null
     }
]