[
     {
          "algorithm": "The new algorithm calculates the score for each bin based on the remaining capacity, the size of the item, and the ratio between the remaining capacity and the item size, prioritizing bins with smaller remaining capacities and larger ratios. If the remaining capacity of a bin is greater than or equal to the maximum capacity minus the item size or the remaining capacity is greater than or equal to the item, the score is set to -np.inf. Otherwise, the score is (remaining_capacity + 1) / (item - remaining_capacity + 1) if remaining_capacity is greater than or equal to item, or 1 / (item - remaining_capacity + 1) otherwise.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = np.zeros_like(bins, dtype=float)\n    \n    for i, remaining_capacity in enumerate(bins):\n        if remaining_capacity >= (max_capacity - item) or remaining_capacity >= item:\n            scores[i] = -np.inf\n        else:\n            scores[i] = (remaining_capacity + 1) / (item - remaining_capacity + 1)\n    \n    return scores",
          "objective": 0.04226,
          "other_inf": null
     }
]