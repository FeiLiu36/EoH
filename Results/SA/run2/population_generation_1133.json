[
     {
          "algorithm": "The new algorithm involves calculating a score for each bin by dividing the remaining capacity of each bin after assigning the item by the maximum remaining capacity, multiplying the result by a fixed scaling factor, subtracting a penalty term based on the difference between the remaining capacity and the maximum remaining capacity multiplied by a fixed scaling factor, and finally multiplying the score by a weight factor that is based on the ratio between the item size and the bin capacity.",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    # Calculate the remaining capacity\n    remaining_capacity = bins - item\n\n    # Get the maximum remaining capacity\n    max_remaining_capacity = np.max(remaining_capacity)\n\n    # Calculate the scaling factor for score calculation\n    scaling_factor = 0.5\n\n    # Calculate the penalty term to penalize bins with large remaining capacities\n    penalty_term = (remaining_capacity - max_remaining_capacity) * scaling_factor\n\n    # Calculate the scores for each bin\n    scores = ((remaining_capacity / max_remaining_capacity) - penalty_term) * (item / bins)\n\n    return scores",
          "objective": 0.03984,
          "other_inf": null
     }
]