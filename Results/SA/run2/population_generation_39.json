[
     {
          "algorithm": "\nThe new algorithm scores each bin based on the remaining capacity, priority factor, and a modified penalty factor. It prioritizes bins with larger remaining capacities and adjusts the score based on the priority factor and modified penalty factor. Bins with remaining capacity less than the item size are assigned a low score. The modified penalty factor is calculated as the priority factor divided by the natural logarithm of the remaining capacity. The algorithm then adds a penalty to bins with remaining capacity less than half of the maximum remaining capacity.\n",
          "code": "import numpy as np\nimport math\n\ndef score(item, bins):\n    max_item_size = item\n    max_remaining_capacity = np.max(bins)\n    priority_factor = max_remaining_capacity / max_item_size\n    penalty_factor = priority_factor / np.log(bins)\n    \n    scores = np.zeros(len(bins), dtype=np.float64)\n    \n    low_capacity_bins = bins < item\n    scores[low_capacity_bins] = -np.inf\n    scores[~low_capacity_bins] = bins[~low_capacity_bins] * priority_factor - np.square(item)\n    scores[~low_capacity_bins] = np.sqrt(scores[~low_capacity_bins]) * penalty_factor[~low_capacity_bins]\n\n    half_max_remaining_capacity = max_remaining_capacity / 2\n    penalty = np.ones(len(bins), dtype=np.float64) * -np.inf\n    penalty[bins < half_max_remaining_capacity] = -np.square(max_remaining_capacity - bins[bins < half_max_remaining_capacity])\n    \n    scores += penalty\n    \n    return scores",
          "objective": 0.04689,
          "other_inf": null
     }
]