[
     {
          "algorithm": "# New algorithm description:\nThe modified algorithm calculates the scores for each bin based on a sigmoid function, where the scores are determined by the sigmoid of the remaining capacity divided by the item size, with a constant added to avoid division by zero, and scaled by a factor. The scores are then sorted in descending order before returning them.\n\n# New algorithm implementation:\n",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    # Calculate the remaining capacity after assigning the item to each bin\n    remaining_capacity = bins - item\n    \n    # Set a constant to avoid division by zero\n    c = 1e-10\n    \n    # Calculate the scores for each bin using a sigmoid function (scaled by a factor)\n    scores = 1 / (1 + np.exp(-(remaining_capacity + c)/item)) * 1000\n    \n    # Sort the indices of bins in descending order based on the scores\n    sorted_indices = np.argsort(scores)[::-1]\n    \n    # Reorder the scores based on the sorted indices\n    scores = scores[sorted_indices]\n    \n    return scores",
          "objective": 0.04226,
          "other_inf": null
     }
]