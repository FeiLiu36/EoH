[
     {
          "algorithm": "\nMy new algorithm, called the \"Modified Weighted Capacity Algorithm,\" assigns scores to the bins based on a modified weighted sum of the remaining bin capacity and the number of items already present in the bin. First, it calculates the weighted scores by dividing the remaining bin capacity by the size of the bin subtracted by the number of items already present. Then, it adjusts the scores based on the number of used bins by multiplying the weighted scores by a factor of 0.1 raised to the power of the number of used bins. Finally, it takes the maximum between the adjusted scores and 0 to ensure non-negative scores for the bins.\n",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    # Calculate the weighted scores based on the remaining bin capacity and the number of items already present\n    weighted_scores = bins / (bins.size - np.count_nonzero(bins))\n    \n    # Adjust scores based on the number of used bins so far\n    num_used_bins = np.count_nonzero(bins < np.max(bins))\n    adjusted_scores = weighted_scores * (0.1 ** num_used_bins)\n    \n    scores = np.maximum(adjusted_scores, 0)\n\n    return scores",
          "objective": 0.04226,
          "other_inf": null
     }
]