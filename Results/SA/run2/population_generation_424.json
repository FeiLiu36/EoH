[
     {
          "algorithm": "New algorithm description: The new algorithm calculates the score for each bin by dividing the remaining capacity of the bin (after assigning the current item) by the square of the item size, then subtracting the penalty factor based on the difference between the remaining capacity and the item size. The scores are then multiplied by a weight based on the logarithm of the item size divided by the remaining capacity, and finally, the scores are normalized to ensure consistency and comparability across different bins.\n\nCode:\n",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    remaining_capacity = bins - item\n    difference_capacity = remaining_capacity - item\n    \n    scores = (remaining_capacity / (item ** 2)) - difference_capacity\n    \n    weight = np.log(item) / remaining_capacity\n    scores *= weight\n    \n    normalized_scores = (scores - np.min(scores)) / (np.max(scores) - np.min(scores))\n    \n    return scores",
          "objective": 0.03984,
          "other_inf": null
     }
]