[
     {
          "algorithm": "Algorithm description:\nThe new algorithm assigns scores to the bins based on a combination of the penalty factor, the proximity factor, and a factor that considers the ratio of the item size to the remaining capacity of the bin, while also taking into account the maximum capacity of each bin. Additionally, the algorithm uses a modified proximity factor that takes into account the difference between the remaining capacity of each bin and the maximum capacity of the bin. The new algorithm also introduces a weight factor that can be adjusted to prioritize certain factors over others.\n\nCode:\n```",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray, weight_factor: float = 1) -> np.ndarray:\n    num_bins = len(bins)\n    \n    # Calculate the penalty factor for bins nearing their maximum capacity\n    penalty_factor = np.where(bins >= 0.9 * np.max(bins), -np.inf, 1)\n    \n    # Calculate the proximity factor based on the difference between each bin's capacity and the mean capacity\n    proximity_factor = np.exp(-np.abs(bins - np.mean(bins)))\n    \n    # Calculate the modified proximity factor based on the difference between remaining capacity and maximum capacity of each bin\n    modified_proximity_factor = np.exp(-np.abs(bins - (1 - bins / np.max(bins))))\n    \n    # Calculate the ratio factor based on the item size and remaining capacity of each bin\n    ratio_factor = np.where(bins > item, item / bins, np.inf)\n    \n    # Calculate the scores based on the modified formula and weight factor\n    scores = weight_factor * (penalty_factor * proximity_factor * modified_proximity_factor * ratio_factor)\n    \n    return scores",
          "objective": 0.03984,
          "other_inf": null
     }
]