[
     {
          "algorithm": "The new algorithm calculates the score for each bin based on a combination of factors, including a constraint factor, a ratio factor, and a bonus factor. The constraint factor penalizes bins that cannot accommodate the item, the ratio factor considers the ratio of the item size to the remaining capacity of each bin, and the bonus factor rewards bins with a higher remaining capacity. The scores are calculated using a modified formula that combines these factors, and the bins with the maximum scores are selected for assignment.",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    num_bins = len(bins)\n    \n    # Calculate the constraint factor for bins that cannot accommodate the item\n    constraint_factor = np.where(bins < item, -np.inf, 1)\n    \n    # Calculate the ratio factor based on the item size and remaining capacity of each bin\n    ratio_factor = np.where(bins > item, item / bins, np.inf)\n    \n    # Calculate the bonus factor based on the remaining capacity of each bin\n    bonus_factor = bins / np.max(bins)\n    \n    # Calculate the scores based on the modified formula - Modified formula: constraint_factor * ratio_factor * bonus_factor\n    scores = constraint_factor * ratio_factor * bonus_factor\n    \n    return scores",
          "objective": 0.03954,
          "other_inf": null
     }
]