[
     {
          "algorithm": "Algorithm description: Modified Scaling Bin Assignment Algorithm (Version 2)\n\n1. Calculate the remaining capacity of each bin: 'remaining_capacity' = 'bins' - 'item'.\n2. Calculate the maximum capacity among all bins: 'max_capacity' = maximum value of 'bins'.\n3. Calculate the average capacity among all bins: 'avg_capacity' = average value of 'bins'.\n4. Calculate the penalty score for each bin: 'penalty_score' = square of the difference between 'remaining_capacity' and 'avg_capacity'.\n5. Calculate the reward score for each bin: 'reward_score' = 'remaining_capacity' divided by ('item' multiplied by 'max_capacity').\n6. Calculate the scaling factor: 'scaling_factor' = 'max_capacity' divided by 'avg_capacity'.\n7. Calculate the difference score for each bin: 'difference_score' = absolute difference between 'remaining_capacity' and 'avg_capacity'.\n8. Calculate the overall score for each bin: 'scores' = 'penalty_score' + 'reward_score' + 'scaling_factor' + 'difference_score'.\n9. Sort the bins based on their scores in ascending order: 'sorted_indices' = indices of 'scores' in ascending order, 'sorted_bins' = 'bins' sorted based on 'sorted_indices'.\n10. Assign the item to the bin with the maximum score: For each bin capacity in 'sorted_bins', if 'item' is less than or equal to the bin capacity, add the bin capacity to 'assigned_bins' and exit the loop. If no bin has enough capacity, add 'max_capacity' to 'assigned_bins'.\n11. Return the scores of the bins for assignment: 'scores'.\n\nCode:\n```",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    remaining_capacity = bins - item\n    max_capacity = np.max(bins)\n    avg_capacity = np.mean(bins)\n    \n    penalty_score = np.square(remaining_capacity - avg_capacity)\n    \n    reward_score = remaining_capacity / (item * max_capacity)\n    \n    scaling_factor = max_capacity / avg_capacity\n    \n    difference_score = np.abs(remaining_capacity - avg_capacity)\n    \n    scores = penalty_score + reward_score + scaling_factor + difference_score\n    \n    sorted_indices = np.argsort(scores)\n    sorted_bins = bins[sorted_indices]\n    \n    assigned_bins = []\n    for bin_capacity in sorted_bins:\n        if item <= bin_capacity:\n            assigned_bins.append(bin_capacity)\n            break\n    else:\n        assigned_bins.append(max_capacity)\n    \n    return scores",
          "objective": 0.03984,
          "other_inf": null
     }
]