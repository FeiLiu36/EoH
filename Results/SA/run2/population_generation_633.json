[
     {
          "algorithm": "New Algorithm Description: The new algorithm assigns initial scores to the bins based on the ratio of their rest capacities to the maximum rest capacity, and adjusts the scores based on a penalty factor. It then normalizes the scores to ensure self-consistency, and assigns additional bonus scores to the bins based on the inverse of their rest capacities.\n\nNew Algorithm Code:\n\n```",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    penalty_factor = 0.15\n\n    # Calculate the rest capacity ratios\n    rest_capacity_ratios = bins / np.max(bins)\n\n    # Adjust the rest capacity ratios with a penalty factor\n    adjusted_rest_capacities = rest_capacity_ratios - (penalty_factor * (1 - rest_capacity_ratios))\n\n    # Calculate the scores by taking the inverse of the adjusted rest capacities\n    scores = 1 / adjusted_rest_capacities\n\n    # Normalize the scores\n    scores = scores / np.sum(scores)\n\n    # Add bonus scores based on the inverse of the rest capacities\n    bonus_scores = scores + (1 / bins)\n\n    return scores",
          "objective": 0.04045,
          "other_inf": null
     }
]