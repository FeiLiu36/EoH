[
     {
          "algorithm": "The new algorithm is called the \"Weighted Score Algorithm.\" It calculates scores for the bins based on different weighted factors including a penalty factor, a capacity factor, and a bonus factor. The penalty factor penalizes bins that cannot accommodate the item, the capacity factor considers the remaining capacity of each bin, and the bonus factor rewards bins with a higher remaining capacity. The scores are calculated using a modified formula that incorporates the weighted factors and ensures self-consistency.\n\nCode:\n```",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    # Define the weight for each factor\n    penalty_weight = 0.7\n    capacity_weight = 0.2\n    bonus_weight = 0.1\n    \n    # Calculate the penalty factor\n    penalty_factor = item / bins\n    penalty_factor = np.where(bins < item, np.inf, penalty_factor)\n    \n    # Calculate the capacity factor\n    capacity_factor = bins / np.max(bins)\n    \n    # Calculate the bonus factor\n    bonus_factor = 1 / capacity_factor\n    \n    # Calculate the weighted scores\n    scores = (penalty_weight * penalty_factor) + (capacity_weight * capacity_factor) + (bonus_weight * bonus_factor)\n    \n    return scores",
          "objective": 0.03984,
          "other_inf": null
     }
]