[
     {
          "algorithm": "The new algorithm assigns scores to the bins based on the sum of the inverse of the rest capacity and a penalty factor that includes the item size, the rest capacity, and the maximum capacity of each bin. The penalty factor is calculated by taking the square root of the product of the item size and the sum of the rest capacity and the maximum capacity of each bin. The final scores are adjusted to ensure self-consistency by normalizing them to the sum of the adjusted scores, and the output scores are sorted in descending order.",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    # Calculate the inverse of the rest capacity of each bin\n    inverse_capacity = 1 / bins\n\n    # Calculate the sum of the rest capacity and the maximum capacity of each bin\n    sum_capacity = bins + np.max(bins)\n\n    # Calculate the penalty factor based on the item size, rest capacity, and maximum capacity of each bin\n    penalty_factor = np.sqrt(item * sum_capacity)\n\n    # Calculate the adjusted scores based on the inverse capacity and the penalty factor\n    adjusted_scores = inverse_capacity * penalty_factor\n\n    # Normalize the adjusted scores to ensure self-consistency\n    scores = adjusted_scores / np.sum(adjusted_scores)\n\n    # Sort the scores in descending order\n    scores = np.sort(scores)[::-1]\n\n    return scores",
          "objective": 0.04226,
          "other_inf": null
     }
]