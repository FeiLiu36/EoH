[
     {
          "algorithm": "New algorithm description: The new algorithm assigns scores to the bins based on a modified ratio of the inverse of the logarithm of the item size to the logarithm of the rest capacities of each bin, multiplied by a penalty factor based on the logarithm of the inverse of the rest capacity of each bin. The final scores are adjusted to ensure self-consistency by normalizing them to the sum of the adjusted scores.\n\nCode:\n\n",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    inverse_item_size = 1 / item\n    \n    # Calculate the penalty factor dynamically based on the logarithm of the inverse of the rest capacity of each bin\n    penalty_factor = np.log(1 / bins)\n    \n    # Calculate the adjusted scores based on the modified ratio of the inverse of the logarithm of the item size to the logarithm of the rest capacities of each bin\n    adjusted_scores = (inverse_item_size ** 2) / np.log(bins) * penalty_factor\n    \n    # Normalize the adjusted scores to ensure self-consistency\n    scores = adjusted_scores / np.sum(adjusted_scores)\n    \n    return scores",
          "objective": 0.05111,
          "other_inf": null
     }
]