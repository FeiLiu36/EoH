[
     {
          "algorithm": "The new algorithm assigns scores to the bins based on the product of the logarithm of the rest capacity of each bin, a penalty factor that accounts for the fourth power of the ratio of the item size to the rest capacity of each bin divided by the maximum item size, and a scaling factor based on the fourth power of the deviation of the rest capacities from the average rest capacity of all bins. The final scores are adjusted to ensure self-consistency by normalizing them to the sum of the adjusted scores.",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    # Calculate the logarithm of the rest capacity of each bin\n    log_bins = np.log(bins)\n    \n    # Calculate the fourth power of the ratio of the item size to the rest capacities of each bin\n    ratio = item / bins\n    ratio_fourth = np.power(ratio, 4)\n    \n    # Calculate the penalty factor based on the ratio fourth power divided by the maximum item size\n    penalty_factor = ratio_fourth / np.max(ratio_fourth)\n    \n    # Calculate the fourth power of the deviation of the rest capacities from the average capacity\n    avg_capacity = np.mean(bins)\n    deviation = np.abs(bins - avg_capacity)\n    deviation_fourth = np.power(deviation, 4)\n    \n    # Calculate the scaling factor based on the deviation fourth power\n    scaling_factor = 1 + deviation_fourth / np.max(deviation_fourth)\n    \n    # Calculate the adjusted scores based on the logarithm of the bins, the penalty factor, and the scaling factor\n    adjusted_scores = log_bins * penalty_factor * scaling_factor\n    \n    # Normalize the adjusted scores to ensure self-consistency\n    scores = adjusted_scores / np.sum(adjusted_scores)\n    \n    return scores",
          "objective": 0.03984,
          "other_inf": null
     }
]