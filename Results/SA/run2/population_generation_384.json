[
     {
          "algorithm": "New Algorithm Description: Create a modified version of the algorithm that assigns a score to each bin based on a combination of the remaining capacity and the ratio of the item size to the remaining capacity, with a higher weight placed on the ratio for bins with higher remaining capacities. The score is then adjusted based on the sum of remaining capacities, the maximum remaining capacity, and a weighting factor.\n\nNew Algorithm Code:\n\n```",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    remaining_capacity = bins - item\n    ratio_capacity = item / remaining_capacity\n    \n    # Calculate the weighting factor based on remaining capacities\n    sum_remaining_capacity = np.sum(remaining_capacity)\n    max_remaining_capacity = np.max(remaining_capacity)\n    weighting_factor = (remaining_capacity / sum_remaining_capacity) * max_remaining_capacity\n    \n    scores = ratio_capacity + weighting_factor\n    \n    sorted_scores = np.sort(scores)[::-1]\n    \n    return scores",
          "objective": 0.03984,
          "other_inf": null
     }
]