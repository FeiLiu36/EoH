[
     {
          "algorithm": "The new algorithm calculates the score for each bin by dividing the rest capacity of the bin by the maximum bin capacity, scaling it by a factor of (1 - item_size / max_capacity), taking the absolute cube root of the scaled score, and finally multiplying it by a factor of (item_size / max_capacity) raised to the power of 0.5.\n\nMain steps:\n1. Calculate the maximum capacity of the bins.\n2. Calculate the rest capacity of each bin by subtracting the item size from the bins.\n3. Calculate the scaling factor by subtracting the item size divided by the maximum capacity from 1.\n4. Calculate the scores for the bins by dividing the rest capacity by the maximum capacity, scaling it by the scaling factor, taking the absolute cube root, and multiplying it by (item_size / max_capacity) raised to the power of 0.5.\n5. Return the scores as a numpy array.\n\nHere's the implementation of the new algorithm:\n\n```",
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    rest_capacity = max_capacity - bins\n    scaling_factor = 1 - item / max_capacity\n    scores = np.abs((rest_capacity / max_capacity) * scaling_factor) ** (1/3) * (item / max_capacity) ** 0.5\n    return scores",
          "objective": 0.03984,
          "other_inf": null
     }
]