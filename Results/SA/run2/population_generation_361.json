[
     {
          "algorithm": "\nCreate a modified version of the algorithm that assigns a score to each bin based on the remaining capacities of the bins, the difference between the maximum capacity and the remaining capacity, and the square root of the item size to the remaining capacity ratio. The score for each bin is then multiplied by a weighting factor based on the ratio of the item size to the maximum capacity of the bins. The scores are then normalized to a range between 0 and 1.\n",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    remaining_capacity = bins - item\n    max_capacity = np.max(bins)\n    diff_capacity = max_capacity - remaining_capacity\n    ratio = np.sqrt(item / remaining_capacity)\n    \n    weighting_factor = item / max_capacity\n    scores = remaining_capacity * diff_capacity * ratio * weighting_factor\n    \n    normalized_scores = (scores - np.min(scores)) / (np.max(scores) - np.min(scores))\n    return scores",
          "objective": 0.01982,
          "other_inf": null
     }
]