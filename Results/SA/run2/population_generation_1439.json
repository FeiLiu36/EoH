[
     {
          "algorithm": "The new algorithm assigns a score to each bin based on the sum of the rest capacities of all the bins, the absolute difference between the rest capacity of each bin and the item size, divided by the logarithm of the absolute difference plus one, and the Euclidean distance between the rest capacities and the item size. The scores are then modified by a function that promotes the assignment of items to bins with higher modified scores. Finally, the scores are normalized by dividing them by the sum of the modified scores plus the total number of bins.",
          "code": "import numpy as np\nimport math\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    differences = np.abs(bins - item)  # Computing the absolute differences between rest capacity and item size\n    \n    euclidean_dist = np.sqrt(np.power(bins, 2) + np.power(differences, 2))  # Euclidean distance between rest capacities and item size\n    \n    modified_scores = (np.power(bins, 2) + differences + euclidean_dist) / (np.log(differences + 1))  # Modifying scores using sum of squares, log, and Euclidean distance\n    \n    modified_scores = np.exp(modified_scores) + bins  # Promoting assignment to bins with higher modified scores\n    \n    sum_modified_scores = np.sum(modified_scores)  # Sum of the modified scores\n    \n    scores = modified_scores / (sum_modified_scores + len(bins))  # Normalizing scores by dividing by the sum of modified scores plus number of bins\n    \n    return scores",
          "objective": 0.02988,
          "other_inf": null
     }
]