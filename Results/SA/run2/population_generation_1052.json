[
     {
          "algorithm": "The new algorithm calculates a score for each bin based on the bin's remaining capacity relative to the item size, the bin's average capacity, the deviation of the remaining capacity from the average capacity, and the bin's current usage percentage. The algorithm then sorts the bins based on their scores, and the item is assigned to the bin with the maximum score. If two or more bins have the same maximum score, the bin with the smallest remaining capacity is chosen.",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    remaining_capacity = bins - item\n    avg_capacity = np.mean(bins)\n    usage_percentage = (bins - remaining_capacity) / bins\n\n    deviation_score = np.abs(remaining_capacity - avg_capacity)\n    percentage_score = remaining_capacity / item\n    usage_score = np.exp(-5 * usage_percentage)\n    \n    scores = deviation_score + percentage_score + usage_score\n    \n    sorted_indices = np.lexsort((bins, scores))\n    sorted_bins = bins[sorted_indices]\n    \n    assigned_bins = np.where(sorted_bins >= item, sorted_bins, np.inf)\n    \n    return scores",
          "objective": 0.03984,
          "other_inf": null
     }
]