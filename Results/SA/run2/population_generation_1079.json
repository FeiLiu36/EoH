[
     {
          "algorithm": "",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    # Calculate the remaining capacity\n    remaining_capacity = bins - item\n    \n    # Calculate the weight for the remaining capacity\n    remaining_weight = np.exp(-(remaining_capacity) / (np.max(bins) - item))\n    \n    # Calculate the weight for the ratio of remaining capacity to item size\n    ratio_weight = 1 - np.abs(remaining_capacity) / item\n    \n    # Initialize a array to store the scores\n    scores = np.zeros_like(bins)\n        \n    # Calculate the scores for each bin\n    scores[bins >= item] = np.multiply(remaining_weight[bins >= item], ratio_weight[bins >= item])\n    \n    return scores",
          "objective": 0.04095,
          "other_inf": null
     }
]