[
     {
          "algorithm": "The new algorithm is called Modified Weighted Capacity Ratio Score Algorithm.\n\n1. Calculate the remaining capacities of the bins: `remaining_capacity = bins - item`\n2. Calculate the maximum capacity among the bins: `max_capacity = np.max(bins)`\n3. Calculate the average capacity of the bins: `avg_capacity = np.mean(bins)`\n4. Calculate the ratio of the remaining capacity of each bin to the maximum capacity: `capacity_ratio = remaining_capacity / max_capacity`\n5. Calculate the difference between the remaining capacity of each bin and the average capacity: `diff_capacity = remaining_capacity - avg_capacity`\n6. Calculate the weight for each bin based on the difference in capacities: `weights = np.exp(-diff_capacity)`\n7. Calculate the score based on the weighted capacity differences, the capacity ratio, and the current item size: `scores = np.exp((capacity_ratio - 1) * item) * weights`\n8. Minimize the score of bins with remaining capacity equal to the maximum capacity: `scores[remaining_capacity == max_capacity] = -np.inf`\n9. Return the scores for the bins: `return scores`\n\nHere's the implementation of the new score function:\n\n```",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    # Calculate the remaining capacities of the bins\n    remaining_capacity = bins - item\n\n    # Calculate the maximum capacity among the bins\n    max_capacity = np.max(bins)\n\n    # Calculate the average capacity of the bins\n    avg_capacity = np.mean(bins)\n\n    # Calculate the ratio of the remaining capacity of each bin to the maximum capacity\n    capacity_ratio = remaining_capacity / max_capacity\n\n    # Calculate the difference between the remaining capacity of each bin and the average capacity\n    diff_capacity = remaining_capacity - avg_capacity\n\n    # Calculate the weight for each bin based on the difference in capacities\n    weights = np.exp(-diff_capacity)\n\n    # Calculate the score based on the weighted capacity differences, the capacity ratio, and the current item size\n    scores = np.exp((capacity_ratio - 1) * item) * weights\n\n    # Minimize the score of bins with remaining capacity equal to the maximum capacity\n    scores[remaining_capacity == max_capacity] = -np.inf\n\n    return scores",
          "objective": 0.03984,
          "other_inf": null
     }
]