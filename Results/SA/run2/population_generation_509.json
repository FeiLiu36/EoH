[
     {
          "algorithm": "New algorithm description:\n1. Calculate the remaining capacity of each bin by subtracting the item size from the rest capacities of the bins.\n2. Calculate the weights based on an exponential transformation of the ratio of remaining capacity to item size.\n3. Normalize the weights within [0, 1] to maintain self-consistency.\n4. Penalize bins with remaining capacity less than 20% of the maximum capacity.\n5. Calculate the ratio of item size to bin capacity squared and penalize higher ratios.\n6. Penalize bins that already have higher items assigned.\n7. Provide a bonus for bins with remaining capacity close to their maximum capacity.\n8. Calculate the scores by combining the weights, penalties, and bonuses.\n9. Return the scores.\n\nImplementation of the modified algorithm:\n\n```",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    remaining_capacity = bins - item\n    \n    # Calculate weights based on an exponential transformation of the ratio of remaining capacity to item size\n    weights = np.exp(-remaining_capacity / item)\n    \n    # Normalize weights within [0, 1] to maintain self-consistency\n    weights = weights / np.sum(weights)\n    \n    # Penalty for bins with remaining capacity less than 20% of maximum capacity\n    near_full_capacity_penalty = np.where(remaining_capacity < (np.max(bins) * 0.2), np.max(bins), 0)\n    \n    # Calculate the ratio of item size to bin capacity squared and penalize higher ratios\n    ratio_penalty = np.where(bins != 0, np.power(item / bins, 2), 0)\n    \n    # Penalty for bins that already have higher items assigned\n    higher_item_penalty = np.where(bins < item, 0.3 * item, 0)\n    \n    # Bonus for bins with remaining capacity close to their maximum capacity\n    near_max_capacity_bonus = np.where(remaining_capacity >= (np.max(bins) * 0.8), 0.15 * np.max(bins), 0)\n    \n    scores = weights + near_full_capacity_penalty + ratio_penalty - higher_item_penalty - near_max_capacity_bonus\n    \n    return scores",
          "objective": 0.03984,
          "other_inf": null
     }
]