[
     {
          "algorithm": "New Algorithm Description: The scoring function assigns scores to bins based on the remaining capacities of each bin and a weight that is a function of both the remaining capacity and the item size. Bins with remaining capacity closer to the item size and less than the item size will receive higher scores, while bins with larger remaining capacities will receive lower scores. The final scores for the bins are normalized to ensure they sum up to 1.\n\nNew Algorithm Implementation:\n\n```\nCode:\n\n",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    num_bins = len(bins)\n\n    # Calculate differences between remaining capacity and the item size\n    diff = bins - item\n\n    # Calculate weights based on the product of differences and item size\n    weights = np.abs(diff) * item\n\n    # Set weights of bins with remaining capacity greater than item size to 0\n    weights[diff >= 0] = 0\n\n    # Multiply scores with weights\n    scores = weights\n\n    # Adjust scores to ensure they sum up to 1\n    scores = scores / np.sum(scores)\n\n    return scores",
          "objective": 0.04226,
          "other_inf": null
     }
]