[
     {
          "algorithm": "The new algorithm assigns scores to the bins based on the ratio of the square root of the item size to the remaining capacity, taking into account a penalty factor that incorporates information about both the remaining capacity and the maximum capacity. The scores are then modified to give more weight to bins with smaller remaining capacities, and are normalized to fall within the range [0, 1].\n\nHere's the implementation of the new algorithm in Python:\n\n```",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    # Calculate the remaining capacity of the bins\n    remaining_capacity = bins - item\n    \n    # Calculate the ratio of square root of item size to remaining capacity\n    ratio = np.sqrt(item) / remaining_capacity\n    \n    # Calculate the penalty factor that takes into account remaining capacity and maximum capacity, with extra penalty for smaller remaining capacities\n    penalty_factor = (remaining_capacity**2) / (bins**2 + remaining_capacity)\n    \n    # Adjust the scores to give more weight to bins with smaller remaining capacities\n    scores = ratio * penalty_factor\n    \n    # Normalize the scores to fall within the range [0, 1]\n    min_score = np.min(scores)\n    max_score = np.max(scores)\n    normalized_scores = (scores - min_score) / (max_score - min_score)\n    \n    return scores",
          "objective": 0.0156,
          "other_inf": null
     }
]