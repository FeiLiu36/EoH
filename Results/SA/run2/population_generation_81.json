[
     {
          "algorithm": "The new algorithm assigns a score to each bin based on the ratio of remaining capacity to item size, penalizing bins with a deviation from the average remaining capacity and favoring bins with a lower remaining capacity. The algorithm also takes into account the maximum capacity of each bin, ensuring that bins with maximum capacity are not used. The modified algorithm performs an additional step of sorting the bins based on their scores in descending order before returning the scores.\n\n```\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    remaining_capacity_ratio = bins / item\n    average_remaining_capacity = np.mean(bins)\n    deviation = np.abs(bins - average_remaining_capacity)\n    deviation_penalty = deviation * item\n    scores = (remaining_capacity_ratio - 1) * (item / average_remaining_capacity) - deviation_penalty\n    scores = np.maximum(scores, 0)\n    \n    max_capacity_mask = bins == np.max(bins)\n    scores[max_capacity_mask] = 0\n    \n    sorted_indices = np.argsort(scores)[::-1]\n    scores = scores[sorted_indices]\n    \n    return scores",
          "objective": 0.04226,
          "other_inf": null
     }
]