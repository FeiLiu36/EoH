[
     {
          "algorithm": "Algorithm:\nThe new algorithm assigns scores to the bins based on the product of the ratio of the logarithm of the item size to the rest capacity of each bin, and a penalty factor based on the logarithm of the inverse of the rest capacity of each bin. The final scores are adjusted to ensure self-consistency by normalizing them to the sum of the adjusted scores.\n\nCode:\n",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    logarithm_item_size = np.log(item)\n    \n    # Calculate the penalty factor dynamically based on the logarithm of the inverse of the rest capacity of each bin\n    penalty_factor = np.log(1 / bins)\n    \n    # Calculate the adjusted scores based on the product of the ratio of the logarithm of the item size to the rest capacities of each bin, and the penalty factor\n    adjusted_scores = (logarithm_item_size / bins) * penalty_factor\n    \n    # Normalize the adjusted scores to ensure self-consistency\n    scores = adjusted_scores / np.sum(adjusted_scores)\n    \n    return scores",
          "objective": 0.03984,
          "other_inf": null
     }
]