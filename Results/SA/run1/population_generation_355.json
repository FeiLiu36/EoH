[
     {
          "algorithm": "New algorithm description: The new algorithm calculates the score for each bin by taking the reciprocal of the ratio of the rest capacity of the bin to the item size, adding a penalty factor that is proportional to the difference between the item size and the rest capacity of the bin, and then multiplying the result by the ratio of the rest capacity of the bin to the maximum capacity.\n\nCode:\n\nCode:\n",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    # Calculate the maximum capacity of the bins\n    max_capacity = np.max(bins)\n    \n    # Calculate the ratio of the rest capacity of each bin to the maximum capacity\n    ratios = bins / max_capacity\n    \n    # Calculate the difference between the item size and the rest capacity of each bin\n    differences = item - bins\n    \n    # Calculate the penalty factor proportional to the difference between the item size and the rest capacity of the bin\n    penalty_factor = 0.1 * differences\n    \n    # Calculate the scores for each bin by taking the reciprocal of the ratio of the rest capacity of the bin to the item size, adding the penalty factor, and then multiplying by the ratio of the rest capacity of the bin to the maximum capacity.\n    scores = (1 / (ratios * item) + penalty_factor) * ratios\n    \n    return scores",
          "objective": 0.03984,
          "other_inf": null
     }
]