[
     {
          "algorithm": "The new algorithm calculates the score for each bin as the ratio of the rest capacity of the bin to the maximum capacity of the bin, divided by the sum of these ratios. It then adds a penalty term to the scores for bins that will reach their maximum capacity after the assignment of the item. Finally, it normalizes the scores to ensure they sum up to 1.",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    max_capacity = np.max(bins)\n    rest_capacity = max_capacity - bins\n    scores = rest_capacity / max_capacity\n    \n    penalty = np.zeros_like(bins)\n    penalty[bins == item] = 1\n    \n    bins_capacity_after_assignment = bins - item\n    penalty[bins_capacity_after_assignment == max_capacity] += 1\n    \n    scores += penalty\n    scores /= np.sum(scores)\n    \n    return scores",
          "objective": 0.03984,
          "other_inf": null
     }
]