[
     {
          "algorithm": "New algorithm: The new algorithm calculates the score for each bin by taking the logarithm of the ratio between the item size and the rest capacity of each bin, adds a constant value to avoid zero score bins, and then multiplies it by the logarithm of the maximum capacity.\n\nCode:\n",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    # Calculate the maximum capacity of the bins\n    max_capacity = np.max(bins)\n    \n    # Calculate the ratio between the item size and the rest capacity of each bin\n    ratio = item / bins\n    \n    # Calculate the logarithm of the ratio\n    log_ratio = np.log(ratio)\n\n    # Add a constant value to avoid zero score bins\n    constant_score = 0.1\n    \n    # Multiply the logarithm of the ratio by the logarithm of the maximum capacity and add the constant value\n    scores = (log_ratio * np.log(max_capacity)) + constant_score\n    \n    return scores",
          "objective": 0.03984,
          "other_inf": null
     }
]