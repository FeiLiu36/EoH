[
     {
          "algorithm": "The new algorithm calculates the score for each bin by taking the square root of the ratio of the rest capacity of the bin to the maximum capacity, multiplies it by the square root of the inverse ratio of the item size to the rest capacity of the bin, and adds a constant factor to the score which is inversely proportional to the ratio of the item size to the maximum capacity.",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    # Calculate the maximum capacity of the bins\n    max_capacity = np.max(bins)\n\n    # Calculate the ratio of the rest capacity of each bin to the maximum capacity\n    ratios = bins / max_capacity\n\n    # Calculate the square root of the ratio of the rest capacity of each bin to the maximum capacity\n    sqrt_ratios = np.sqrt(ratios)\n\n    # Calculate the inverse ratio of the item size to the rest capacity of each bin\n    inverse_ratios = item / bins\n\n    # Calculate the square root of the inverse ratio of the item size to the rest capacity of each bin\n    sqrt_inverse_ratios = np.sqrt(inverse_ratios)\n\n    # Calculate the score for each bin by taking the square root of the ratio of the rest capacity of the bin to the maximum capacity\n    # and multiplying it by the square root of the inverse ratio of the item size to the rest capacity of the bin\n    scores = sqrt_ratios * sqrt_inverse_ratios\n\n    # Calculate the ratio of the item size to the maximum capacity\n    item_ratio = item / max_capacity\n\n    # Add a constant factor to the scores which is inversely proportional to the ratio of the item size to the maximum capacity\n    scores += 1 / item_ratio\n\n    return scores",
          "objective": 0.04266,
          "other_inf": null
     }
]