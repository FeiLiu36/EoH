[
     {
          "algorithm": "The new algorithm calculates the scores for the bins by taking the product of the reciprocal of the square root of the ratio between the remaining capacity and the item size plus a constant, the exponential function raised to the power of the sum of the remaining capacities of all bins divided by the maximum remaining capacity plus a constant, and the reciprocal of the weights squared, then adding the maximum score across all bins plus the sum of remaining capacities, and finally subtracting the product of the item size and the maximum remaining capacity divided by the sum of remaining capacities.\n\nHere is the Python implementation of the new algorithm as a function named score:\n\n``` \n",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    \"\"\"The new algorithm calculates the scores for the bins by taking the product of the reciprocal of the square root of the ratio between the remaining capacity and the item size plus a constant,\n    the exponential function raised to the power of the sum of the remaining capacities of all bins divided by the maximum remaining capacity plus a constant,\n    and the reciprocal of the weights squared,\n    then adding the maximum score across all bins plus the sum of remaining capacities,\n    and finally subtracting the product of the item size and the maximum remaining capacity divided by the sum of remaining capacities.\"\"\"\n\n    # Calculate the remaining capacity of each bin\n    remaining_capacity = bins - item\n\n    # Calculate the maximum remaining capacity\n    max_remaining_capacity = np.max(remaining_capacity)\n\n    # Calculate the ratio between the remaining capacity and the item size plus a constant\n    ratio = remaining_capacity / (item + 1e-10)\n\n    # Calculate the reciprocal of the square root of the ratio\n    reciprocal_square_root_ratio = 1 / np.sqrt(ratio)\n\n    # Calculate the exponential function raised to the power of the sum of the remaining capacities divided by the maximum remaining capacity plus a constant\n    exponential_function = np.exp(np.sum(remaining_capacity) / (max_remaining_capacity + 1e-10))\n\n    # Calculate the reciprocal of the weights squared\n    reciprocal_weights_squared = 1 / np.power(np.arange(1, len(bins) + 1), 2)\n\n    # Calculate the product of the reciprocal of the square root of the ratio, the exponential function, and the reciprocal of the weights squared\n    product = reciprocal_square_root_ratio * exponential_function * reciprocal_weights_squared\n\n    # Add the maximum score across all bins plus the sum of remaining capacities\n    scores = product + np.max(product) + np.sum(remaining_capacity)\n\n    # Subtract the product of the item size and the maximum remaining capacity divided by the sum of remaining capacities\n    scores -= (item * max_remaining_capacity) / np.sum(remaining_capacity)\n\n    return scores",
          "objective": 0.04226,
          "other_inf": null
     }
]