[
     {
          "algorithm": "new algorithm description: \n\nThe new algorithm calculates the scores for the bins by taking the exponent of the negative difference between the logarithm of the remaining capacity of each bin and the logarithm of the item size, divides it by the logarithm of the bin capacity, subtracts the minimum value across all bins from the obtained scores, adds the maximum value across all bins to the scores, and finally normalizes the scores by dividing them by the maximum score.\n\nnew algorithm implementation:\n\n```\nCode:\n",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    \"\"\"The new algorithm calculates the scores for the bins by taking the exponent of the negative difference between the logarithm of the remaining capacity of each bin and the logarithm of the item size, divides it by the logarithm of the bin capacity, subtracts the minimum value across all bins from the obtained scores, adds the maximum value across all bins to the scores, and finally normalizes the scores by dividing them by the maximum score.\"\"\"\n\n    # Calculate the logarithm of the remaining capacity of each bin\n    log_capacity = np.log(bins)\n\n    # Calculate the logarithm of the item size\n    log_item = np.log(item)\n\n    # Calculate the negative difference between the logarithm of the remaining capacity and the logarithm of the item size\n    diff = -(log_capacity - log_item)\n\n    # Calculate the exponent of the negative difference\n    exponent = np.exp(diff)\n\n    # Calculate the logarithm of the bin capacity\n    log_bin_capacity = np.log(bins)\n\n    # Calculate the scores by dividing the exponent by the logarithm of the bin capacity\n    scores = exponent / log_bin_capacity\n\n    # Subtract the minimum value across all bins from the scores\n    scores -= np.min(scores)\n\n    # Add the maximum value across all bins to the scores\n    scores += np.max(scores)\n\n    # Normalize the scores by dividing them by the maximum score\n    scores /= np.max(scores)\n\n    return scores",
          "objective": 0.03984,
          "other_inf": null
     }
]