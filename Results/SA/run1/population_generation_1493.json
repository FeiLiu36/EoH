[
     {
          "algorithm": "The new algorithm calculates the score for each bin based on a combination of exponential terms, logarithmic terms, and penalty terms that take into account the ratio between the difference of each bin's capacity and the item size, the difference between the bin's capacity and the maximum capacity, and the difference between the bin's capacity and the item size. It also includes a term that penalizes bins with capacities much smaller than the item size and a term that emphasizes bins with capacities closer to the item size.\n\n```",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    max_capacity = np.max(bins)\n    alpha = 0.1\n    n = 5\n\n    sorted_bins = np.sort(bins)\n    \n    quadratic_term = np.zeros_like(bins)\n    quadratic_term[:n] = alpha * (bins[:n] ** 2)  # Quadratic term\n\n    ratio_term = (bins ** 2 + 1) / ((item - bins) + 1)  # Ratio term\n\n    capacity_term = bins / max_capacity  # Capacity term\n    \n    penalty_term = np.exp((bins - max_capacity) / max_capacity)  # Penalty term\n\n    exponential_term = np.exp(-(bins - item) / (0.5 * item))  # Exponential term\n\n    logarithmic_term = np.log(bins / item)  # Logarithmic term\n\n    scores = (\n        quadratic_term + ratio_term + capacity_term - penalty_term + exponential_term + logarithmic_term\n    )\n\n    sorted_scores = np.sort(scores)[::-1]\n    \n    return scores",
          "objective": 0.01097,
          "other_inf": null
     }
]