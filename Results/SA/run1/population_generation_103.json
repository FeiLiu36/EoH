[
     {
          "algorithm": "The new algorithm selects the bin with the maximum remaining capacity after the item is assigned as the primary bin, and calculates the scores for the other bins based on the bin capacities divided by the square root of the primary bin capacity, the exponential of the sum of the bin capacities divided by the primary bin capacity multiplied by the item size squared plus 1, and the exponential of the sum of the bin capacities minus the primary bin capacity divided by the square root of the item size plus 1. The scores are then multiplied together with the product term and the exponential of the primary bin capacity minus the sum of bin capacities.\n\nYou may modify the existing algorithm by adding the following steps:\n\n1. Calculate the maximum remaining capacity of each bin after assigning the item.\n2. Find the bin with the maximum remaining capacity and assign it as the primary bin.\n3. Initialize an empty array to store the scores for each bin.\n4. For each bin, calculate the score using the following formula:\n   - Divide the bin capacity by the square root of the primary bin capacity.\n   - Take the exponential of the sum of the bin capacities divided by the primary bin capacity multiplied by the item size squared plus 1.\n   - Take the exponential of the sum of the bin capacities minus the primary bin capacity divided by the square root of the item size plus 1.\n   - Multiply the above terms together with the product term and the exponential of the primary bin capacity minus the sum of bin capacities.\n   - Store the calculated score in the array of scores.\n5. Return the array of scores.\n\nHere's the implementation of the modified algorithm in Python:\n\n```",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    max_remaining_capacity = np.max(bins) - item\n    primary_bin_capacity = bins - item\n\n    scores = np.exp((np.sum(bins) / primary_bin_capacity) * (np.square(item) + 1))\n    scores *= np.exp((np.sum(bins) - primary_bin_capacity) / np.sqrt(item + 1))\n    scores *= np.prod(bins / np.sqrt(primary_bin_capacity))\n    scores *= np.exp(primary_bin_capacity - np.sum(bins))\n\n    return scores",
          "objective": 0.04226,
          "other_inf": null
     }
]