[
     {
          "algorithm": "The Modified Enhanced Score Function Algorithm assigns a score to each bin by considering six factors: a ratio term, a capacity term, a penalty term, a bonus term, a similarity term, and a similarity penalty term. The ratio term is the ratio of the inverse of the difference between the item and the bin size and the square of the capacity plus 1. The capacity term remains the same as before. The penalty term penalizes bins that are close to maximum capacity. The bonus term rewards bins that have capacities significantly larger than the item. The similarity term takes into account the similarity between the item and the bins by calculating the absolute difference between the item and each bin and dividing it by the maximum capacity. The similarity penalty term penalizes bins that have a similarity value above a certain threshold. The scores are then sorted in descending order.",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    max_capacity = np.max(bins)\n    num_bins = bins.shape[0]\n    \n    difference = item - bins\n    \n    # Ratio term\n    ratio_term = (1 / (difference / (bins**2 + 1)))\n    \n    # Capacity term\n    capacity_term = 1 - bins / max_capacity\n    \n    # Penalty term\n    penalty_term = ((bins - max_capacity) / max_capacity) ** 2\n    \n    # Bonus term\n    bonus_term = ((max_capacity - bins) / max_capacity) ** 2\n    \n    # Similarity term\n    similarity_term = np.abs(item - bins) / max_capacity\n    \n    # Similarity penalty term\n    similarity_penalty_term = np.where(similarity_term > 0.5, -0.1, 0)\n    \n    # Calculate scores\n    scores = ratio_term + capacity_term - penalty_term + bonus_term - similarity_term + similarity_penalty_term\n    \n    # Sort scores in descending order\n    sorted_scores = np.sort(scores)[::-1]\n    \n    return scores",
          "objective": 0.01378,
          "other_inf": null
     }
]