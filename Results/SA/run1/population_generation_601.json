[
     {
          "algorithm": "The new algorithm calculates the scores for the bins by taking the product of the exponential function raised to the power of the ratio between the item size and the remaining capacity minus a constant, the reciprocal of the weights squared, and the ratio between the sum of the remaining capacities of all bins and the maximum remaining capacity plus a constant, then adding the maximum score across all bins plus the sum of remaining capacities, and finally subtracting the product of the item size and the maximum remaining capacity divided by the sum of remaining capacities.\n\nHere is the Python implementation of the new algorithm:\n\n```",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    \"\"\"The new algorithm calculates the scores for the bins by taking the product of the exponential function raised to the power of the ratio between the item size and the remaining capacity minus a constant,\n    the reciprocal of the weights squared,\n    and the ratio between the sum of the remaining capacities of all bins and the maximum remaining capacity plus a constant,\n    then adding the maximum score across all bins plus the sum of remaining capacities,\n    and finally subtracting the product of the item size and the maximum remaining capacity divided by the sum of remaining capacities.\"\"\"\n\n    # Calculate the remaining capacity of each bin\n    remaining_capacity = bins - item\n\n    # Calculate the maximum remaining capacity\n    max_remaining_capacity = np.max(remaining_capacity)\n\n    # Calculate the ratio between the item size and the remaining capacity minus a constant\n    ratio = item / (remaining_capacity - 1e-10)\n\n    # Calculate the exponential function raised to the power of the ratio\n    exponential_function = np.exp(ratio)\n\n    # Calculate the reciprocal of the weights squared\n    reciprocal_weights_squared = 1 / np.power(np.arange(1, len(bins) + 1), 2)\n\n    # Calculate the ratio between the sum of the remaining capacities of all bins and the maximum remaining capacity plus a constant\n    capacity_ratio = np.sum(remaining_capacity) / (max_remaining_capacity + 1e-10)\n\n    # Calculate the product of the exponential function, the reciprocal of the weights squared, and the capacity ratio\n    product = exponential_function * reciprocal_weights_squared * capacity_ratio\n\n    # Add the maximum score across all bins plus the sum of remaining capacities\n    scores = product + np.max(product) + np.sum(remaining_capacity)\n\n    # Subtract the product of the item size and the maximum remaining capacity divided by the sum of remaining capacities\n    scores -= (item * max_remaining_capacity) / np.sum(remaining_capacity)\n\n    return scores",
          "objective": 0.0486,
          "other_inf": null
     }
]