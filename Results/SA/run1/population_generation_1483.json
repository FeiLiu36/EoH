[
     {
          "algorithm": "The new algorithm considers a modified exponential term that takes into account the ratio between the difference of each bin's capacity and the item size and a polynomial term that emphasizes bins with capacities closer to the item size. The algorithm also includes a penalty term that penalizes bins with a capacity greater than the maximum capacity.\n\nHere's the implementation of the new score function:\n\n```",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    max_capacity = np.max(bins)\n    alpha = 0.1\n    m = 5\n\n    sorted_bins = np.sort(bins)\n\n    quadratic_term2 = np.zeros_like(bins)\n    quadratic_term2[:m] = alpha * (bins[:m] ** 2)  # Quadratic term\n\n    ratio_term = (bins ** 2 + 1) / ((item - bins) + 1)  # Ratio term\n\n    capacity_term = bins / max_capacity  # Capacity term\n\n    penalty_term = np.exp((bins - max_capacity) / max_capacity)  # Penalty term\n\n    modified_exponential_term = np.exp(-(bins - item) / (0.5 * item))  # Modified exponential term\n\n    logarithmic_term = np.log(bins / item)  # Logarithmic term\n\n    modified_quadratic_exponential_term = np.exp(-(bins - item) ** 2 / (2 * item ** 2)) * np.exp(\n        (bins - item) / item)  # Modified quadratic exponential term\n\n    modified_powerlaw_exponential_term = np.exp(-(bins - item) ** alpha) * bins ** (\n            2 * alpha)  # Modified power-law exponential term\n\n    weights = np.exp(-np.abs(bins - item) / item)  # Weight term\n\n    scores = (\n            weights * (ratio_term + quadratic_term2 + capacity_term - penalty_term\n                      + modified_exponential_term + logarithmic_term\n                      + modified_quadratic_exponential_term + modified_powerlaw_exponential_term)\n    )\n\n    sorted_scores = np.sort(scores)[::-1]\n\n    return scores",
          "objective": 0.01157,
          "other_inf": null
     }
]