[
     {
          "algorithm": "New algorithm description: The modified algorithm sorts the bins in descending order, calculates the weights for each bin by dividing the rest capacity by the item size, sets the weight of the bin with the maximum rest capacity as 1 and the rest as 0, normalizes the weights by dividing by the sum of weights, and finally calculates the scores as the cumulative sum of the normalized weights.\n\nHere's the implementation of the modified algorithm in Python:\n\n```",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    # Sort the bins array in descending order\n    bins_sorted = np.sort(bins)[::-1]\n    \n    # Calculate the weights for each bin\n    weights = bins_sorted / item\n    \n    # Set the weight of the bin with maximum rest capacity as 1 and the rest as 0\n    weights[0] = 1\n    weights[1:] = 0\n    \n    # Normalize the weights by dividing by the sum of weights\n    weights /= np.sum(weights)\n    \n    # Calculate the scores as the cumulative sum of the normalized weights\n    scores = np.cumsum(weights)\n    \n    return scores",
          "objective": 0.04226,
          "other_inf": null
     }
]