[
     {
          "algorithm": "The new algorithm assigns a score to each bin based on the rest capacity of the bin, the ratio of the item size to the maximum capacity, and a penalty factor determined by the difference between the item size and the rest capacity of the bin. The scores are then normalized to ensure they sum up to 1, and the scores are further adjusted based on the average rest capacity of the bins.",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    max_capacity = np.max(bins)\n    rest_capacity = max_capacity - bins\n    ratio = item / max_capacity\n    \n    # Calculate the penalty factor for each bin\n    penalty_factor = item - rest_capacity\n    \n    # Calculate the score for each bin\n    scores = (rest_capacity**2) * ratio / penalty_factor\n    \n    # Normalize the scores\n    scores /= np.sum(scores)\n\n    # Adjust the scores based on the average rest capacity\n    avg_rest_capacity = np.mean(rest_capacity)\n    scores *= avg_rest_capacity / max_capacity\n    \n    return scores",
          "objective": 0.04507,
          "other_inf": null
     }
]