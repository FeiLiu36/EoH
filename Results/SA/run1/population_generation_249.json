[
     {
          "algorithm": "New Algorithm Description: The new algorithm calculates the score for each bin based on the ratio of the item size to the rest capacity of the bin, a penalty term for bins close to their maximum capacity, a term related to the square of the difference between the rest capacity of each bin and the average rest capacity of all bins, and a new term that considers the difference between the item size and the maximum capacity weighted by the ratio of the sum of the rest capacities of the bins to the sum of the maximum capacities of the bins.\n\nCode:\n\n```",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    # Calculate the ratio of item size to rest capacity of each bin\n    ratios = item / bins\n    \n    # Apply a penalty term to bins close to their maximum rest capacity\n    penalty = np.where(bins >= 0.9 * bins.max(), -np.inf, 0)\n    \n    # Calculate the average rest capacity of all bins\n    avg_capacity = np.mean(bins)\n    \n    # Calculate the square of the difference between the rest capacity of each bin and the average rest capacity\n    avg_diff = np.square(bins - avg_capacity)\n    \n    # Calculate the difference between the item size and the maximum rest capacity\n    item_diff = bins.max() - item\n    \n    # Calculate the ratio of the sum of the rest capacities to the sum of the maximum capacities of bins\n    capacity_ratio = np.sum(bins) / np.sum(bins.max())\n    \n    # Calculate the score for each bin by combining the ratio, penalty terms, average difference, and item difference\n    scores = ratios + penalty + avg_diff + (item_diff * capacity_ratio)\n    \n    return scores",
          "objective": 0.03984,
          "other_inf": null
     }
]