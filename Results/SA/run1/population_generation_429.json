[
     {
          "algorithm": "The new algorithm calculates the score for each bin by taking the sum of the reciprocal of the normalized distance between the item size and the rest capacity of each bin, and a weight factor that is proportional to the current capacity of the bin divided by the maximum capacity of all bins.",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    # Calculate the maximum capacity of the bins\n    max_capacity = np.max(bins)\n    \n    # Calculate the normalized distance between the item size and the rest capacity of each bin\n    distance = item - bins\n    normalized_distance = np.abs(distance) / max_capacity\n    \n    # Calculate the weight factor\n    weight_factor = bins / max_capacity\n    \n    # Calculate the reciprocal of the normalized distance\n    reciprocal_distance = np.reciprocal(normalized_distance)\n    \n    # Calculate the scores for the bins\n    scores = reciprocal_distance + weight_factor\n    \n    return scores",
          "objective": 0.03984,
          "other_inf": null
     }
]