[
     {
          "algorithm": "New Algorithm Description: The modified algorithm assigns scores to the bins based on a custom scoring equation that incorporates the rest capacity of each bin, the maximum capacity of all bins, and a set of defined weights assigned to each term. The equation includes a power term that raises the inverse of the rest capacity divided by the item size to a specified power, a logarithmic term that utilizes the logarithm of the sum of the rest capacity and the item size, a linear term that multiplies the rest capacity by a specified factor, and a new term called the sigmoid term that uses the sigmoid function to map the difference between the rest capacity and the item size to a score value within a specified range. The weights for each term are adjusted to prioritize the power, logarithmic, linear, and sigmoid terms, while still considering the exponential, square root, ratio, and quadratic terms from the original algorithm.\n\nCode:\n\n```",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    # Calculate statistics\n    max_capacity = np.max(bins)\n    \n    # Additional variables\n    weight_power = 0.3\n    weight_log = 0.2\n    weight_linear = 0.2\n    weight_exponential = 0.05\n    weight_sqrt = 0.05\n    weight_ratio = 0.1\n    weight_quadratic = 0.1\n    weight_inverse = 0.05\n    weight_sigmoid = 0.05\n    \n    # Scoring terms (Modified to include power, logarithmic, linear, exponential, sigmoid, square root, ratio, and quadratic terms)\n    power_term = np.power(1 / (bins / item), weight_power) # Inverse of the rest capacity divided by item capacity raised to a specified power\n    logarithmic_term = np.log1p(bins + item) # Logarithm of the sum of rest capacity and item capacity\n    linear_term = (bins / max_capacity) * weight_linear # Linear term multiplied by rest capacity divided by maximum capacity\n    exponential_term = np.exp(-(bins - item) / max_capacity) # Exponential of the difference between rest capacity and item capacity\n    sigmoid_term = 1 / (1 + np.exp(-weight_sigmoid * (bins - item))) # Sigmoid function of the difference between rest capacity and item capacity\n    sqrt_term = np.sqrt(bins + max_capacity) # Square root of the sum of rest and maximum capacity of bins\n    ratio_term = np.power(bins / (bins - item), 2) # Rest capacity divided by item capacity\n    quadratic_term = np.zeros_like(bins)\n    quadratic_term[:7] = (bins[:7] ** 2) / 3\n    inverse_term = 1 / np.power(bins / item, weight_inverse) # Inverse of the rest capacity divided by item capacity\n    \n    scores = (\n        weight_power * power_term\n        + weight_log * logarithmic_term\n        + weight_linear * linear_term\n        + weight_exponential * exponential_term\n        + weight_sqrt * sqrt_term\n        + weight_ratio * ratio_term\n        + weight_quadratic * quadratic_term\n        + weight_inverse * inverse_term\n        + weight_sigmoid * sigmoid_term\n    ) / (\n        weight_power\n        + weight_log\n        + weight_linear\n        + weight_exponential\n        + weight_sqrt\n        + weight_ratio\n        + weight_quadratic\n        + weight_inverse\n        + weight_sigmoid\n    )\n    \n    return scores",
          "objective": 0.00704,
          "other_inf": null
     }
]