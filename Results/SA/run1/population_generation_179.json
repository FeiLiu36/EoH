[
     {
          "algorithm": "The new algorithm calculates the score for each bin as the reciprocal of the ratio between the item size and the rest capacity, multiplied by the logarithm of the ratio between the rest capacity and the maximum capacity, and raised to the power of the ratio between the rest capacity and the maximum capacity. It then normalizes the scores to ensure they sum up to 1.",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    max_capacity = np.max(bins)\n    rest_capacity = max_capacity - bins\n    ratio_term = 1 / (item / rest_capacity)\n    log_term = np.log(rest_capacity / max_capacity)\n    power_term = (rest_capacity / max_capacity) ** (rest_capacity / max_capacity)\n    scores = ratio_term * log_term * power_term\n    scores /= np.sum(scores)\n    return scores",
          "objective": 0.04226,
          "other_inf": null
     }
]