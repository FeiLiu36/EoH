[
     {
          "algorithm": "The new algorithm selects the bin with the maximum remaining capacity after the item is assigned as the primary bin, and calculates the scores for the other bins based on the bin capacities divided by the primary bin capacity, the exponential of the sum of the bin capacities divided by the primary bin capacity, and the cube root of the item size rounded to the nearest integer plus 1. The scores are then multiplied together with the product term and the square root of the exponential of the sum of the bin capacities minus the primary bin capacity.\n\n",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    primary_bin_capacity = np.max(bins) - item\n    bin_capacities = bins / primary_bin_capacity\n    product_term = np.prod(bin_capacities)\n    exp_term = np.exp(np.sum(bin_capacities) / primary_bin_capacity)\n    cube_root_item_size = np.cbrt(int(round(np.sqrt(item+1))))\n    sqrt_exp_sum = np.sqrt(np.exp(np.sum(bins) - primary_bin_capacity))\n    scores = product_term * exp_term * cube_root_item_size * sqrt_exp_sum\n\n    return scores",
          "objective": 0.04226,
          "other_inf": null
     }
]