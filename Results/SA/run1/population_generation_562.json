[
     {
          "algorithm": "My new algorithm, named Modified Score Algorithm X, calculates the scores for the bins by dividing the remaining capacity of each bin by the cube root of the product of the item size and the sum of the bin capacities, then adding a decreasing sequence of integers squared, and finally subtracting a weighted sum of the bin capacities.\n\n```",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    \"\"\"The Modified Score Algorithm X calculates the scores for the bins by dividing the remaining capacity of each bin by \n    the cube root of the product of the item size and the sum of the bin capacities, then adding a decreasing sequence of integers squared,\n    and finally subtracting a weighted sum of the bin capacities.\"\"\"\n    \n    # Calculate the sum of the bin capacities\n    bin_sum = np.sum(bins)\n    \n    # Calculate the remaining capacity of each bin\n    remaining_capacity = bins - item\n    \n    # Calculate the division of the remaining capacity by the cube root of the product of the item size and the sum of the bin capacities\n    division = remaining_capacity / np.cbrt(item * bin_sum)\n    \n    # Calculate the scores as the division added by a decreasing sequence of integers squared\n    scores = division + np.square(np.arange(len(bins), 0, -1))\n    \n    # Calculate the weighted sum of the bin capacities\n    weighted_sum = np.sum(bins * np.arange(1, len(bins) + 1))\n    \n    # Subtract the weighted sum of the bin capacities from the scores\n    scores -= weighted_sum\n    \n    return scores",
          "objective": 0.04226,
          "other_inf": null
     }
]