[
     {
          "algorithm": "New algorithm: The modified algorithm incorporates a penalty term that penalizes bins with capacities larger than a certain threshold and a term that emphasizes bins with capacities closer to the average bin capacity. It also introduces a term that rewards bins with capacities closer to the item size and a term that encourages the utilization of bins with maximum capacity. Additionally, it includes a term that gives a higher score to bins with a smaller capacity compared to their neighbors.\n\nCode:\n\n",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    max_capacity = np.max(bins)\n    alpha = 0.1\n    n = 5\n    threshold = 0.7 * max_capacity\n\n    sorted_bins = np.sort(bins)\n\n    quadratic_term = np.zeros_like(bins)\n    quadratic_term[:n] = alpha * (bins[:n] ** 2)  # Quadratic term\n\n    ratio_term = (bins ** 2 + 1) / ((item - bins) + 1)  # Ratio term\n\n    capacity_term = bins / max_capacity  # Capacity term\n\n    penalty_term = np.exp((bins - max_capacity) / max_capacity)  # Penalty term\n\n    exponential_term = np.exp(-(bins - item) / (0.5 * item))  # Exponential term\n\n    logarithmic_term = np.log(bins / item)  # Logarithmic term\n\n    threshold_penalty_term = np.exp((bins - threshold) / threshold)  # Threshold penalty term\n\n    average_capacity = np.mean(bins)\n    average_term = np.exp(-(bins - average_capacity) / average_capacity)  # Average term\n\n    size_term = np.exp(-(bins - item) / item)  # Size term\n\n    max_capacity_term = np.where(bins == max_capacity, 1, 0)  # Maximum capacity term\n\n    neighbors_term = np.zeros_like(bins)\n    neighbors_term[1:-1] = np.where((bins[1:-1] < bins[:-2]) & (bins[1:-1] < bins[2:]), 1, 0)  # Neighbors term\n\n    scores = (\n        quadratic_term + ratio_term + capacity_term - penalty_term + exponential_term + logarithmic_term + threshold_penalty_term + average_term + size_term + max_capacity_term + neighbors_term\n    )\n\n    sorted_scores = np.sort(scores)[::-1]\n\n    return scores",
          "objective": 0.01127,
          "other_inf": null
     }
]