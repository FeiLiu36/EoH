[
     {
          "algorithm": "\nAlgorithm description: In the new algorithm, we will calculate the score for each bin by dividing the rest capacity of each bin by the maximum capacity of the bins, and then multiplying it by the logarithm of the item size divided by the rest capacity of the bin, with a weight determined by the square root of the ratio of the rest capacity to the maximum capacity.\n\nSteps:\n1. Calculate the maximum capacity of the bins.\n2. Calculate the ratio of the rest capacity of each bin to the maximum capacity.\n3. Calculate the logarithm of the item size divided by the rest capacity of each bin.\n4. Calculate the weights based on the square root of the ratio of the rest capacity to the maximum capacity.\n5. Calculate the scores for each bin by multiplying the ratios, logarithms, and weights.\n6. Return the scores.\n\n",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    # Calculate the maximum capacity of the bins\n    max_capacity = np.max(bins)\n    \n    # Calculate the ratio of the rest capacity of each bin to the maximum capacity\n    ratios = bins / max_capacity\n    \n    # Calculate the logarithm of the item size divided by the rest capacity of each bin\n    logarithms = np.log(item / bins)\n    \n    # Calculate the weights based on the square root of the ratio of the rest capacity to the maximum capacity\n    weights = np.sqrt(bins / max_capacity)\n    \n    # Calculate the scores for each bin by multiplying the ratios, logarithms, and weights\n    scores = ratios * logarithms * weights\n    \n    return scores",
          "objective": 0.03984,
          "other_inf": null
     }
]