[
     {
          "algorithm": "The new algorithm assigns scores to the bins based on a modified scoring equation that incorporates the rest capacity of each bin, the maximum capacity of all bins, and a defined weight assigned to each term. The equation includes a power term that raises the rest capacity divided by the item size to a specified power, a logarithmic term that utilizes the logarithm of the difference between the rest capacity and the item size, and a linear term that multiplies the rest capacity by a specified factor. The weights for each term are adjusted to prioritize the power, logarithmic, and linear terms, while still considering the exponential, square root, ratio, and quadratic terms from the original algorithm.",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    # Calculate statistics\n    max_capacity = np.max(bins)\n    average_capacity = np.mean(bins)\n\n    # Additional variables\n    weight_exp = 0.05\n    weight_lin = 0.15\n    weight_pow = 0.3\n    weight_log = 0.25\n    weight_sqrt = 0.05\n    weight_ratio = 0.1\n    weight_quad = 0.1\n\n    # Scoring terms (Modified to include power, logarithmic, and linear terms)\n    exponential_term = np.exp(-(bins - item) / max_capacity)  # Modified: Rest capacity divided by maximum capacity\n\n    linear_term = (weight_lin * bins) / max_capacity  # New: Linear term multiplied by rest capacity divided by maximum capacity\n\n    power_term = np.power(bins / item, weight_pow)  # New: Rest capacity divided by item capacity raised to a specified power\n\n    logarithmic_term = np.log1p(bins - item)  # New: Logarithm of the difference between rest capacity and item capacity\n\n    sqrt_term = np.sqrt(bins + max_capacity)  # Modified: Square root of the sum of rest and maximum capacity of bins\n\n    ratio_term = np.power(bins / (bins - item), 2)  # Modified: Rest capacity divided by item capacity\n\n    quadratic_term = np.zeros_like(bins)\n    quadratic_term[:7] = (bins[:7] ** 2) / 4\n\n    scores = (\n        weight_exp * exponential_term\n        + linear_term\n        + weight_log * logarithmic_term\n        + weight_pow * power_term\n        + weight_sqrt * sqrt_term\n        + weight_ratio * ratio_term\n        + weight_quad * quadratic_term\n    ) / (\n        weight_exp\n        + weight_lin\n        + weight_pow\n        + weight_log\n        + weight_sqrt\n        + weight_ratio\n        + weight_quad\n    )\n\n    return scores",
          "objective": 0.00694,
          "other_inf": null
     }
]