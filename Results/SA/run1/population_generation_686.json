[
     {
          "algorithm": "Algorithm description:\nThe new algorithm calculates the scores for the bins by taking the inverse of the remaining capacities of the bins divided by the item size, multiplies each score by a penalty factor based on the bin's remaining capacity, subtracts the minimum value across all bins from the obtained scores, normalizes the scores by dividing them by the sum of all scores, and finally amplifies the scores by multiplying them with a factor based on the item size.\n\nCode:\n\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    \"\"\"Create a new algorithm that calculates the scores for the bins\n    by taking the inverse of the remaining capacities of the bins divided by the item size,\n    multiplies each score by a penalty factor based on the bin's remaining capacity,\n    subtracts the minimum value across all bins from the obtained scores,\n    normalizes the scores by dividing them by the sum of all scores,\n    and finally amplifies the scores by multiplying them with a factor based on the item size.\"\"\"\n\n    # Calculate the inverse of the remaining capacities of the bins divided by the item size\n    inv_capacity = 1 / (bins.astype(float) / item)\n\n    # Define the penalty factor based on the remaining capacity\n    penalty_factor = 0.5 * (1 - bins / np.max(bins))\n\n    # Multiply each score by the penalty factor\n    scores = inv_capacity * penalty_factor\n\n    # Subtract the minimum value across all bins from the scores\n    scores -= np.min(scores)\n\n    # Normalize the scores by dividing them by the sum of all scores\n    scores /= np.sum(scores)\n\n    # Amplify the scores by multiplying them with a factor based on the item size\n    scores *= item\n\n    return scores",
          "objective": 0.03984,
          "other_inf": null
     }
]