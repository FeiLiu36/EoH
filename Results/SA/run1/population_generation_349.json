[
     {
          "algorithm": "Algorithm description: The new algorithm calculates the score for each bin by subtracting the logarithm of the absolute difference between the item size and the rest capacity of the bin from the ratio of the rest capacity to the maximum capacity, then multiplying it by the ratio of the rest capacity of each bin to the maximum capacity, and finally dividing it by the item size.\n\nSteps:\n1. Calculate the maximum capacity of the bins.\n2. Calculate the ratio of the rest capacity of each bin to the maximum capacity.\n3. Calculate the difference between the item size and the rest capacity of each bin.\n4. Calculate the logarithm of the absolute difference obtained in step 3.\n5. Calculate the scores for each bin by multiplying the ratios, subtracting the logarithm of the difference obtained in step 4, and then dividing by the item size.\n6. Return the scores.\n\nCode:\n\n```\n",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    # Calculate the maximum capacity of the bins\n    max_capacity = np.max(bins)\n    \n    # Calculate the ratio of the rest capacity of each bin to the maximum capacity\n    ratios = bins / max_capacity\n    \n    # Calculate the difference between the item size and the rest capacity of each bin\n    differences = item - bins\n    \n    # Calculate the logarithm of the absolute difference obtained in step 3\n    log_differences = np.log(np.abs(differences))\n    \n    # Calculate the scores for each bin by multiplying the ratios, subtracting the logarithm of the difference obtained in step 4, and then dividing by the item size.\n    scores = (ratios - log_differences) / item\n    \n    return scores",
          "objective": 0.03984,
          "other_inf": null
     }
]