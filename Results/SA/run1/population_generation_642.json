[
     {
          "algorithm": "The new algorithm calculates the scores for the bins by taking the reciprocal of the sum of the square root of the remaining capacity of each bin and the square root of the item size, multiplies it by the reciprocal of the square root of the bin capacity, subtracts the minimum value across all bins from the obtained scores, adds the maximum value across all bins to the scores, and finally normalizes the scores by dividing them by the maximum score.\n\nHere's the implementation of the new algorithm in Python:\n\n```",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    \"\"\"The new algorithm calculates the scores for the bins by taking the reciprocal of the sum of the square root of the remaining capacity of each bin and the square root of the item size, multiplies it by the reciprocal of the square root of the bin capacity, subtracts the minimum value across all bins from the obtained scores, adds the maximum value across all bins to the scores, and finally normalizes the scores by dividing them by the maximum score.\"\"\"\n\n    # Calculate the square root of the remaining capacity of each bin\n    sqrt_capacity = np.sqrt(bins)\n\n    # Calculate the square root of the item size\n    sqrt_item = np.sqrt(item)\n\n    # Calculate the sum of the square root of the remaining capacity and the square root of the item size\n    total_sqrt = sqrt_capacity + sqrt_item\n\n    # Calculate the reciprocal of the sum\n    rec_sqrt = 1 / total_sqrt\n\n    # Calculate the reciprocal of the square root of the bin capacity\n    rec_sqrt_capacity = 1 / np.sqrt(bins)\n\n    # Calculate the scores by multiplying the reciprocal of the sum by the reciprocal of the square root of the bin capacity\n    scores = rec_sqrt * rec_sqrt_capacity\n\n    # Subtract the minimum value across all bins from the scores\n    scores -= np.min(scores)\n\n    # Add the maximum value across all bins to the scores\n    scores += np.max(scores)\n\n    # Normalize the scores by dividing them by the maximum score\n    scores /= np.max(scores)\n\n    return scores",
          "objective": 0.03984,
          "other_inf": null
     }
]