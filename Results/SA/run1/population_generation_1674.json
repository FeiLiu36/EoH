[
     {
          "algorithm": "New Algorithm: Exponential Score Function\n\nThe new algorithm uses an exponential score function to assign scores to bins based on the remaining capacities of the bins, penalty terms, and an exponential factor that considers the ratio between the remaining capacity of each bin and the maximum remaining capacity. The algorithm aims to minimize the number of used bins by giving higher scores to bins with more remaining capacity and penalizing bins with a lower number of items already assigned. The exponential algorithm introduces an exponential factor that exponentially increases the score of bins with larger differences in remaining capacity. The algorithm also adjusts the weight factor for the optimization term.\n\nCode:\n\n```\n",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    max_capacity = np.max(bins)\n    average_capacity = np.mean(bins)\n    \n    # Additional variables\n    penalty_factor = 0.8\n    exponential_factor = 0.5\n    count_factor = 0.6\n    weight_factor = 0.3\n    \n    # Scoring terms\n    quadratic_term = np.zeros_like(bins)\n    quadratic_term[:7] = (bins[:7] ** 2) / 4  # Quadratic term\n    \n    ratio_term = np.power(bins / (item - bins), 2)  # Ratio term\n    \n    capacity_term = np.exp(exponential_factor * bins / max_capacity)  # Capacity term with exponential factor\n    \n    difference_term = np.abs(bins - item)  # Difference term\n    \n    count_term = np.exp(-0.2 * bins)  # Count term\n    \n    penalty_term = np.exp((bins - average_capacity) / (0.3 * max_capacity)) * (bins > average_capacity)  # Penalty term\n    \n    decay_term = np.exp(-0.5 * np.abs(bins - average_capacity))  # Exponential decay term\n    \n    optimization_term = weight_factor * (1 / (bins + 1))  # Optimization term with weight factor\n    \n    # Calculate scores with the exponential algorithm\n    scores = (\n        3 * capacity_term + quadratic_term + 2 * ratio_term - penalty_factor * difference_term - penalty_factor * penalty_term +\n        decay_term + count_factor * count_term + optimization_term\n    ) / (\n        np.max(\n            3 * capacity_term + quadratic_term + 2 * ratio_term - penalty_factor * difference_term - penalty_factor * penalty_term +\n            decay_term + count_factor * count_term + optimization_term\n        )\n    )\n    \n    return scores",
          "objective": 0.00825,
          "other_inf": null
     }
]