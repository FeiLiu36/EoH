[
     {
          "algorithm": "New algorithm description: The new algorithm, named Modified Power Score Function, assigns items to bins while minimizing the number of used bins by using a modified power scoring technique.\n\nModified algorithm code:\n\n```",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    max_capacity = np.max(bins)\n    average_capacity = np.mean(bins)\n    \n    # Additional variables\n    scaling_factor = 0.5\n    \n    # Scoring terms\n    quadratic_term = np.zeros_like(bins)\n    quadratic_term[:7] = (bins[:7] ** 2) / 4\n    \n    ratio_term = np.power(bins / (item - bins), 2)\n    \n    capacity_term = np.power(bins / max_capacity, scaling_factor)\n    \n    difference_term = np.power(np.abs(bins - item), scaling_factor)\n    \n    penalty_term = np.exp(scaling_factor * (bins - average_capacity) / (0.3 * max_capacity))\n    \n    deviation_term = np.exp(-scaling_factor * np.abs(bins - average_capacity) / max_capacity)\n    \n    optimization_term = np.exp(-bins / (max_capacity * (bins + 1)))\n    \n    balance_term = np.power(np.abs(bins - average_capacity) / max_capacity, 2)\n    \n    # Calculate scores with the modified power algorithm\n    scores = (\n        capacity_term + quadratic_term + ratio_term - scaling_factor * difference_term - scaling_factor * penalty_term +\n        deviation_term + optimization_term - balance_term\n    ) / (\n        np.max(\n            capacity_term + quadratic_term + ratio_term - scaling_factor * difference_term - scaling_factor * penalty_term +\n            deviation_term + optimization_term - balance_term\n        )\n    )\n    \n    return scores",
          "objective": 0.00714,
          "other_inf": null
     }
]