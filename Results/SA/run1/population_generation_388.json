[
     {
          "algorithm": "A new algorithm is proposed where the score for each bin is calculated by taking the difference between the maximum capacity and the rest capacity of each bin, multiplying it by the logarithm of the item size to the maximum capacity ratio, multiplying it by a penalty factor that is proportional to the difference between the maximum capacity and the rest capacity of each bin, and finally applying a sigmoid function to the result to map it to a value between 0 and 1.\n\nHere is the implementation of the new algorithm in Python:\n\n```",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    # Calculate the maximum capacity of the bins\n    max_capacity = np.max(bins)\n\n    # Calculate the item size to the maximum capacity ratio\n    item_ratio = item / max_capacity\n\n    # Calculate the logarithmic factor\n    log_factor = np.log(1 + item_ratio)\n\n    # Calculate the penalty factor\n    penalty_factor = max_capacity - bins\n\n    # Calculate the scores for each bin\n    scores = 1 / (1 + np.exp(- (log_factor * penalty_factor)))\n\n    return scores",
          "objective": 0.03984,
          "other_inf": null
     }
]