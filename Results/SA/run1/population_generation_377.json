[
     {
          "algorithm": "\nAlgorithm Description: The new algorithm calculates the score for each bin by taking the square root of the product of the inverse of the ratio of the item size to the rest capacity of the bin and the inverse of the ratio of the rest capacity of the bin to the maximum capacity, and subtracts a constant factor which is proportional to the ratio of the item size to the maximum capacity.\n",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    # Calculate the maximum capacity of the bins\n    max_capacity = np.max(bins)\n\n    # Calculate the inverse ratio of the item size to the rest capacity of each bin\n    inverse_ratios = item / bins\n\n    # Calculate the inverse ratio of the rest capacity of each bin to the maximum capacity\n    inverse_max_ratios = bins / max_capacity\n\n    # Calculate the product of the inverse ratio of the item size to the rest capacity\n    # of each bin and the inverse ratio of the rest capacity of each bin to the maximum capacity,\n    # and take the square root of the result\n    scores = np.sqrt(inverse_ratios * inverse_max_ratios)\n\n    # Calculate the ratio of the item size to the maximum capacity\n    item_ratio = item / max_capacity\n\n    # Subtract a constant factor from the scores which is proportional to the ratio of the item size to the maximum capacity\n    scores -= item_ratio\n\n    return scores",
          "objective": 0.0494,
          "other_inf": null
     }
]