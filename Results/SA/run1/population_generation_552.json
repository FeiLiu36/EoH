[
     {
          "algorithm": "New algorithm description: The Improved Enhanced Score Algorithm calculates the scores as the sum of the inverse of the ratio between the remaining capacities of the bins and the item size, and a factor that is inversely proportional to the rank of the bin's remaining capacity among the remaining capacities. In addition, it includes an adjustment factor that penalizes bins with remaining capacities close to the maximum capacity.\n\nNew algorithm implementation:\n\n```\nCode:\n\nCode:\n",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    \"\"\"The Improved Enhanced Score Algorithm calculates the scores as the sum of the inverse of the ratio between\n    the remaining capacities of the bins and the item size, a factor that is inversely proportional to the \n    rank of the bin's remaining capacity among the remaining capacities, and an adjustment factor that penalizes\n    bins with remaining capacities close to the maximum capacity.\"\"\"\n\n    # Calculate the ratio of remaining capacities of the bins to the item size\n    ratio = bins / item\n\n    # Calculate the ranks of the remaining capacities\n    ranks = np.argsort(np.argsort(bins))\n\n    # Calculate the inverse of the ranks plus one to avoid division by zero\n    rank_factor = 1 / (ranks + 1)\n\n    # Calculate the adjustment factor based on the difference between the remaining capacity and maximum capacity\n    max_capacity = np.max(bins)\n    adjustment_factor = np.abs(bins - max_capacity)\n\n    # Calculate the scores as the sum of the inverse of the ratio, the rank factor, and the adjustment factor\n    scores = np.sum(1 / ratio + rank_factor + adjustment_factor)\n\n    return scores",
          "objective": 0.04226,
          "other_inf": null
     }
]