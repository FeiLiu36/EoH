[
     {
          "algorithm": "The new algorithm calculates the scores for the bins by taking the combination of the inverse of the remaining capacities of the bins divided by the item size, and the squared difference between the bin's remaining capacity and the maximum capacity, then subtracts the minimum value across all bins from the obtained scores, normalizes the scores by dividing them by the sum of all scores, and finally amplifies the scores by multiplying them with a factor based on the item size.\n\nCode:\n\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    \"\"\"Create a new algorithm that calculates the scores for the bins\n    by taking the combination of the inverse of the remaining capacities of the bins divided by the item size,\n    and the squared difference between the bin's remaining capacity and the maximum capacity,\n    subtracts the minimum value across all bins from the obtained scores,\n    normalizes the scores by dividing them by the sum of all scores,\n    and finally amplifies the scores by multiplying them with a factor based on the item size.\"\"\"\n\n    # Calculate the combination of the inverse of the remaining capacities of the bins divided by the item size,\n    # and the squared difference between the bin's remaining capacity and the maximum capacity\n    inv_capacity = 1 / (bins.astype(float) / item)\n    diff_capacity = np.square(bins.max() - bins)\n\n    # Combine the inverse capacity and the difference capacity using element-wise multiplication\n    scores = inv_capacity * diff_capacity\n\n    # Subtract the minimum value across all bins from the scores\n    scores -= np.min(scores)\n\n    # Normalize the scores by dividing them by the sum of all scores\n    scores /= np.sum(scores)\n\n    # Amplify the scores by multiplying them with a factor based on the item size\n    scores *= item\n\n    return scores",
          "objective": 0.03984,
          "other_inf": null
     }
]