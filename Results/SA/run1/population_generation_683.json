[
     {
          "algorithm": "Description: The new algorithm calculates the scores for the bins by taking the square root of the remaining capacities of the bins divided by the item size, adds a penalty factor to each score based on the bin's remaining capacity, subtracts the maximum value across all bins from the obtained scores, and finally normalizes the scores by dividing them by the sum of all scores.\n\nHere's the implementation of the new algorithm in Python:\n\n```",
          "code": "import numpy as np\n\ndef score(item, bins):\n    \"\"\"Create a new algorithm that calculates the scores for the bins\n    by taking the square root of the remaining capacities of the bins divided by the item size,\n    adds a penalty factor to each score based on the bin's remaining capacity,\n    subtracts the maximum value across all bins from the obtained scores,\n    and finally normalizes the scores by dividing them by the sum of all scores.\"\"\"\n\n    # Calculate the square root of the remaining capacities of the bins divided by the item size\n    sqrt_capacity = np.sqrt(bins.astype(float) / item)\n\n    # Define the penalty factor based on the remaining capacity\n    penalty_factor = 0.2 * (1 - bins / np.max(bins))\n\n    # Add the penalty factor to each score\n    scores = sqrt_capacity + penalty_factor\n\n    # Subtract the maximum value across all bins from the scores\n    scores -= np.max(scores)\n\n    # Normalize the scores by dividing them by the sum of all scores\n    scores /= np.sum(scores)\n\n    return scores",
          "objective": 0.03984,
          "other_inf": null
     }
]