[
     {
          "algorithm": "The new algorithm sorts the bins in descending order, then calculates the weights for each bin by dividing the rest capacity by the item size. After that, it sets the weight of the bin with the maximum rest capacity as 0 and calculates the scores as the sum of all weights. Finally, it normalizes the scores by dividing by the maximum value of the scores.",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    # Sort the bins array in descending order\n    bins_sorted = np.sort(bins)[::-1]\n    \n    # Calculate the weights for each bin\n    weights = bins_sorted / item\n    \n    # Set the weight of the bin with maximum rest capacity as 0\n    weights[0] = 0\n    \n    # Calculate the scores as the sum of all weights\n    scores = np.sum(weights)\n    \n    # Normalize the scores by dividing by the maximum value of the scores\n    scores /= np.max(scores)\n    \n    return scores",
          "objective": 0.04226,
          "other_inf": null
     }
]