[
     {
          "algorithm": "Exponential Score Function with Ranking and Priority:\n\n```",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    # Calculate statistics\n    max_capacity = np.max(bins)\n    average_capacity = np.mean(bins)\n    std_dev = np.std(bins)\n    \n    # Additional variables\n    weight = 0.8\n    power = 2\n    priority_factor = 1.5\n    \n    # Scoring terms\n    exponential_diff_term = np.exp(-1 * (bins - item) / (average_capacity * std_dev * weight))\n    \n    ratio_term = np.power(bins / (item - bins), power)\n    \n    absolute_diff_term = np.abs(bins - item)\n    \n    quadratic_term = np.zeros_like(bins)\n    quadratic_term[:7] = (bins[:7] ** 2) / 4\n    \n    power_factor = np.power(\n        weight * np.power(absolute_diff_term / (average_capacity * std_dev), power),\n        np.arange(1, len(bins)+1)\n    )\n    \n    priority_term = (np.abs(bins - max_capacity) / average_capacity) * priority_factor\n    \n    deviation_term = np.abs(bins - average_capacity)\n    \n    # New scoring term (Ranking and Priority)\n    ranking_term = np.arange(1, len(bins)+1) / len(bins)\n    \n    priority_weights = np.power(\n        weight * np.power(absolute_diff_term / (average_capacity * std_dev), power),\n        np.arange(0, len(bins))\n    )\n    priority_weights = np.sort(priority_weights)[::-1]  # Sort in descending order\n    priority_term = priority_weights * priority_term\n    \n    modified_term = np.log(1 + np.exp(2 * (item - bins) / max_capacity))\n    \n    scores = (\n        exponential_diff_term\n        + ratio_term\n        + absolute_diff_term\n        + quadratic_term\n        + power_factor\n        + ranking_term\n        + priority_term\n        + deviation_term\n        + modified_term\n    ) / (\n        np.max(\n            exponential_diff_term\n            + ratio_term\n            + absolute_diff_term\n            + quadratic_term\n            + power_factor\n            + ranking_term\n            + priority_term\n            + deviation_term\n            + modified_term\n        )\n    )\n    \n    return scores",
          "objective": 0.00724,
          "other_inf": null
     }
]