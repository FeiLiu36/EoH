[
     {
          "algorithm": "\nNew algorithm: \nThe new algorithm calculates the score for each bin by taking the square root of the product of the ratio of the item size to the rest capacity of the bin and the ratio of the rest capacity of the bin to the maximum capacity, and subtracts a constant factor which is proportional to the ratio of the item size to the maximum capacity. The algorithm also incorporates a penalty factor which is multiplied by the maximum capacity of a bin if it is not used.\n",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    # Calculate the maximum capacity of the bins\n    max_capacity = np.max(bins)\n\n    # Calculate the ratio of the item size to the rest capacity of each bin\n    ratios = item / bins\n\n    # Calculate the ratio of the rest capacity of each bin to the maximum capacity\n    max_ratios = bins / max_capacity\n\n    # Calculate the product of the ratio of the item size to the rest capacity\n    # of each bin and the ratio of the rest capacity of each bin to the maximum capacity,\n    # and take the square root of the result\n    scores = np.sqrt(ratios * max_ratios)\n\n    # Calculate the ratio of the item size to the maximum capacity\n    item_ratio = item / max_capacity\n\n    # Subtract a constant factor from the scores which is proportional to the ratio of the item size to the maximum capacity\n    scores -= item_ratio\n\n    # Multiply the scores of bins with the maximum capacity by a penalty factor if they are not used\n    scores[bins == max_capacity] *= 0.5\n\n    return scores",
          "objective": 0.0491,
          "other_inf": null
     }
]