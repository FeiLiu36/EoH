[
     {
          "algorithm": "The new algorithm assigns scores to bins based on a combination of their remaining capacities, the difference between the bin capacity and the item size, a penalty term that penalizes bins that are farther from the average capacity, a reward term that rewards bins with smaller remaining capacities, a reward term that rewards bins closer to the maximum remaining capacity, a regularization term to control the trade-off between capacity utilization and the number of used bins, and a reward term that rewards bins within a certain range of the average capacity. However, the new algorithm increases the weight of the reward term that rewards bins with smaller remaining capacities, while decreasing the weights of the penalty term and regularization term compared to the original algorithm. \n\nThe updated code for the new algorithm is as follows:\n\n```",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    max_capacity = np.max(bins)\n    min_capacity = np.min(bins)\n    average_capacity = np.mean(bins)\n    threshold = 0.4 * max_capacity\n\n    quadratic_term = np.zeros_like(bins)\n    quadratic_term[:7] = (bins[:7] ** 2) / 4  # Quadratic term\n\n    ratio_term = (bins ** 2) / ((item - bins) ** 2 + 1)  # Ratio term\n\n    capacity_term = np.exp(-0.6 * (bins - item) / item)  # Capacity term\n\n    difference_term = np.abs(bins - item)  # Difference term\n\n    penalty_term = np.exp((bins - average_capacity) / (0.2 * max_capacity)) * (bins > average_capacity)  # Penalty term\n    ratio_penalty_term = (item / bins) * ((bins - item) > 0)  # Ratio penalty term\n\n    # New term 1: reward bins with smaller remaining capacities (cubic version)\n    reward_term = (min_capacity - bins) ** 4 / ((max_capacity - min_capacity) ** 4 + 1)  # Reward term\n\n    # New term 2: reward bins closer to the maximum remaining capacity in the set of bins (cubic version)\n    reward_max_capacity_term = (bins - max_capacity) ** 3 / ((max_capacity - min_capacity) ** 3 + 1)  # Reward maximum capacity term\n\n    # New term 3: modified regularization term to control trade-off between capacity utilization and number of used bins (cubic version)\n    regularization_term = ((bins - average_capacity) / (0.4 * max_capacity)) ** 2  # Regularization term\n\n    # New term 4: reward bins within a certain range of the average capacity (cubic version)\n    reward_range_term = (bins - 0.7 * average_capacity) ** 3 / ((0.2 * average_capacity) ** 3 + 1) * (\n            (bins >= 0.4 * average_capacity) & (bins <= 0.7 * average_capacity))  # Reward range term\n\n    scores = (3 * capacity_term + quadratic_term + 2*ratio_term - 1.5*difference_term - 0.8*penalty_term + ratio_penalty_term +\n              1.5*reward_term + 1.2*reward_max_capacity_term + 0.8*regularization_term + reward_range_term) / (\n                     np.max(3 * capacity_term + quadratic_term + 2*ratio_term - 1.5*difference_term - 0.8*penalty_term +\n                            ratio_penalty_term + 1.5*reward_term + 1.2*reward_max_capacity_term + 0.8*regularization_term + reward_range_term))\n\n    return scores",
          "objective": 0.00815,
          "other_inf": null
     }
]