[
     {
          "algorithm": "New Algorithm: Weighted Power Score Algorithm\n\nThe Weighted Power Score Algorithm calculates the scores as a weighted power function of the ratio between the item size and the rest capacity, where the power exponent is based on the average capacity of the bins and the weights are determined by the inverse of the rest capacities.\n\nCode:\n\n",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    \"\"\"The weighted power score algorithm calculates the scores as a weighted power function of the ratio between item size and rest capacity,\n    where the power exponent is based on the average capacity of bins and the weights are determined by the inverse of the rest capacities.\"\"\"\n\n    avg_capacity = np.mean(bins)\n    \n    # Get the power exponent\n    power_exponent = avg_capacity\n    \n    # Calculate the weights as the inverse of the rest capacities\n    weights = 1 / bins\n    \n    # Calculate the weighted power scores as a function of the ratio between item size and rest capacity\n    scores = (item / bins / power_exponent) ** power_exponent * weights\n    \n    # Normalize the scores by dividing them by the sum of all scores\n    scores /= np.sum(scores)\n    \n    return scores",
          "objective": 0.03984,
          "other_inf": null
     }
]