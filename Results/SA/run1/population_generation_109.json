[
     {
          "algorithm": "The new algorithm assigns the item to the bin with the maximum remaining capacity as the primary bin and calculates the scores for the other bins based on a modified scoring formula that considers the ratios of the current bin capacities to the primary bin capacity, the exponential of the sum of the bin capacities divided by the primary bin capacity multiplied by the item size, and the exponential of the difference between the primary bin capacity and the sum of bin capacities squared divided by the primary bin capacity. The scores are then multiplied together with the product term and the exponential of the primary bin capacity minus the sum of bin capacities squared.",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    primary_bin_capacity = bins - item\n    max_remaining_capacity = np.max(primary_bin_capacity)\n\n    ratios = bins / primary_bin_capacity\n    sum_exponential = np.exp(np.sum(bins) / primary_bin_capacity * item)\n    difference_exponential = np.exp((primary_bin_capacity - np.sum(bins)**2) / primary_bin_capacity)\n\n    scores = ratios * sum_exponential * difference_exponential\n    scores *= np.prod(ratios)\n    scores *= np.exp(primary_bin_capacity - np.sum(bins)**2)\n\n    return scores",
          "objective": 0.04226,
          "other_inf": null
     }
]