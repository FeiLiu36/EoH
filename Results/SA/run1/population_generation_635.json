[
     {
          "algorithm": "New algorithm description:\n\nThe new algorithm calculates the scores for the bins by taking the reciprocal of the absolute difference between the remaining capacity of each bin and the item size, raises it to the power of the natural logarithm of the bin capacity, subtracts the minimum value across all bins from the obtained scores, adds the maximum value across all bins to the scores, and finally normalizes the scores by dividing them by the maximum score.\n\nNew algorithm implementation:\n\n```",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    \"\"\"The new algorithm calculates the scores for the bins by taking the reciprocal of the absolute difference between the remaining capacity of each bin and the item size, raises it to the power of the natural logarithm of the bin capacity, subtracts the minimum value across all bins from the obtained scores, adds the maximum value across all bins to the scores, and finally normalizes the scores by dividing them by the maximum score.\"\"\"\n\n    # Calculate the absolute difference between the remaining capacity of each bin and the item size\n    difference = np.abs(bins - item)\n\n    # Calculate the reciprocal of the absolute difference\n    reciprocal_scores = 1 / difference\n\n    # Calculate the power of the natural logarithm of the bin capacity\n    scores = reciprocal_scores ** np.log(bins)\n\n    # Subtract the minimum value across all bins from the scores\n    scores -= np.min(scores)\n\n    # Add the maximum value across all bins to the scores\n    scores += np.max(scores)\n\n    # Normalize the scores by dividing them by the maximum score\n    scores /= np.max(scores)\n\n    return scores",
          "objective": 0.04165,
          "other_inf": null
     }
]