[
     {
          "algorithm": "Algorithm description: The new algorithm, named Modified Score Algorithm X, calculates the scores for the bins by dividing the square root of the remaining capacity of each bin by the square root of the item size raised to the power of 1.2, subtracting the square root of the sum of the bin capacities from the division, then multiplying by a decreasing geometric sequence of weights raised to the power of 2, followed by taking the maximum score across all bins prior to returning the scores.\n\nHere is the implementation of the new algorithm in Python:\n\n```",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    \"\"\"The Modified Score Algorithm X calculates the scores for the bins by dividing the square root of the remaining capacity of each bin by the square root of the item size raised to the power of 1.2, subtracting the square root of the sum of the bin capacities from the division, then multiplying by a decreasing geometric sequence of weights raised to the power of 2, followed by taking the maximum score across all bins.\"\"\"\n    \n    # Calculate the square root of the remaining capacity of each bin\n    sqrt_remaining_capacity = np.sqrt(bins - item)\n    \n    # Calculate the square root of the item size raised to the power of 1.2\n    sqrt_item = np.sqrt(item) ** 1.2\n    \n    # Calculate the division of the square root of the remaining capacity by the square root of the item size raised to the power of 1.2\n    division = sqrt_remaining_capacity / sqrt_item\n    \n    # Calculate the square root of the sum of the bin capacities\n    sqrt_sum = np.sqrt(np.sum(bins))\n    \n    # Subtract the square root of the sum of the bin capacities from the division\n    scores = division - sqrt_sum\n    \n    # Calculate the decreasing geometric sequence of weights raised to the power of 2\n    weights_powered = np.power(np.geomspace(len(bins), 1, num=len(bins), endpoint=False), 2)\n    \n    # Multiply the scores by the decreasing geometric sequence of weights raised to the power of 2\n    scores *= weights_powered\n    \n    # Take the maximum score across all bins\n    max_score = np.max(scores)\n    \n    return scores",
          "objective": 0.04226,
          "other_inf": null
     }
]