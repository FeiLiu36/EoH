[
     {
          "algorithm": "Algorithm description: The Modified Enhanced Score Function Algorithm assigns a score to each bin by considering five factors: a ratio term, a capacity term, a penalty term, an item count term, and a similarity penalty term. The ratio term is the ratio of the inverse of the difference between the item and the bin size and the square of the capacity plus 1. The capacity term remains the same as before. The penalty term penalizes bins that are close to maximum capacity. The item count term penalizes bins that have a high count of items already assigned. The similarity penalty term penalizes bins that have a similarity value above a certain threshold. The scores are then sorted in descending order.\n\nCode:\n\n``` \nCode:\n",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    max_capacity = np.max(bins)\n    num_bins = bins.shape[0]\n    item_count = num_bins - np.count_nonzero(bins)\n\n    difference = item - bins\n\n    # Ratio term\n    ratio_term = (1 / (difference / (bins**2 + 1)))\n\n    # Capacity term\n    capacity_term = 1 - bins / max_capacity\n\n    # Penalty term\n    penalty_term = ((bins - max_capacity) / max_capacity) ** 2\n\n    # Item count term\n    item_count_term = item_count / max_capacity\n\n    # Similarity penalty term\n    similarity_penalty_term = np.where(difference > 0.1, -0.1, 0)  # Assuming a similarity threshold of 0.1\n\n    # Calculate scores\n    scores = ratio_term + capacity_term - penalty_term - item_count_term + similarity_penalty_term\n\n    # Sort scores in descending order\n    sorted_scores = np.sort(scores)[::-1]\n\n    return scores",
          "objective": 0.0156,
          "other_inf": null
     }
]