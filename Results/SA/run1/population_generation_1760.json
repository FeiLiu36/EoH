[
     {
          "algorithm": "Algorithm Description: \"Weighted Difference Score Function\"\n\nSteps:\n1. Calculate the maximum capacity of the bins.\n2. Calculate the average capacity of the bins.\n3. Set the value of the weight parameter (0.6) and the exponent parameter (0.7).\n4. Define a standard deviation parameter (std_dev) based on the maximum capacity and average capacity.\n5. Compute the quadratic term for the bins, similar to the Modified Gaussian Score Function.\n6. Compute the ratio term for the bins, similar to the Modified Gaussian Score Function.\n7. Compute the difference term for the bins as the absolute difference between each bin's capacity and the item size.\n8. Compute the penalty term for the bins by calculating the exponential decay of the bins' capacity divided by the standard deviation, squared.\n9. Compute the deviation term for the bins as the absolute difference between each bin's capacity and the average capacity of the bins.\n10. Compute the weighted difference term for the bins by multiplying the difference term by the weight parameter and calculating the exponential decay divided by the standard deviation, squared.\n11. Compute the optimization term for the bins by calculating the exponential decay of the bins' capacity divided by the standard deviation, squared, and multiplying by (1 - weight).\n12. Compute the balance term for the bins by calculating the exponential decay of the deviation term divided by the standard deviation, squared, and multiplying by (1 - weight).\n13. Calculate the overall scores for the bins using the weighted difference scoring algorithm:\n    - Add up all the individual terms (quadratic_term, ratio_term, penalty_term, weighted_difference_term, optimization_term, balance_term).\n    - Divide the summed terms by the maximum value obtained from the sum to normalize the scores.\n14. Return the calculated scores array.\n\nCode:\n```",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    max_capacity = np.max(bins)\n    average_capacity = np.mean(bins)\n    \n    # Additional variables\n    weight = 0.6\n    exponent = 0.7\n    std_dev = (max_capacity - average_capacity) / 2\n\n    # Scoring terms\n    quadratic_term = np.zeros_like(bins)\n    quadratic_term[:7] = (bins[:7] ** 2) / 4\n\n    ratio_term = np.power(bins / (item - bins), 2)\n    \n    difference_term = np.abs(bins - item)\n    \n    penalty_term = np.exp(-bins / (2 * std_dev**2))\n    \n    deviation_term = np.abs(bins - average_capacity)\n    \n    weighted_difference_term = weight * np.exp(-difference_term / (2 * std_dev**2))\n    \n    optimization_term = (1 - weight) * np.exp(-bins / (2 * std_dev**2))\n    \n    balance_term = (1 - weight) * np.exp(-deviation_term / (2 * std_dev**2))\n    \n    # Calculate scores with the weighted difference algorithm\n    scores = (\n        quadratic_term + ratio_term - penalty_term + weighted_difference_term +\n        optimization_term + balance_term\n    ) / (\n        np.max(\n            quadratic_term + ratio_term - penalty_term + weighted_difference_term +\n            optimization_term + balance_term\n        )\n    )\n    \n    return scores",
          "objective": 0.00714,
          "other_inf": null
     }
]