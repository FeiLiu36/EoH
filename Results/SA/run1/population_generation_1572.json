[
     {
          "algorithm": "New algorithm description: The new algorithm assigns scores to bins based on a combination of their remaining capacities, the difference between the bin capacity and the item size, and a penalty term that penalizes bins that are closer to their maximum capacity. It also introduces a reward term that rewards bins with larger remaining capacities and a reward term that rewards bins closer to the minimum remaining capacity in the set of bins. Additionally, it includes a regularization term to control the trade-off between capacity utilization and the number of used bins. The regularization term is modified to be quadratic instead of linear, and a new term is introduced to reward bins that have remaining capacities within a certain range of the maximum capacity.\n\nNew algorithm implementation:\n\n```",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    max_capacity = np.max(bins)\n    min_capacity = np.min(bins)\n\n    threshold = 0.4 * max_capacity\n\n    quadratic_term = np.zeros_like(bins)\n    quadratic_term[:7] = 0.25 * (bins[:7] ** 2)  # Quadratic term\n\n    ratio_term = (bins ** 2) / ((item - bins) ** 2 + 1)  # Ratio term\n\n    capacity_term = np.exp(-0.6 * (bins - item) / item)  # Capacity term\n\n    difference_term = np.abs(bins - item)  # Difference term\n\n    penalty_term = np.exp((threshold - bins) / threshold) * (bins > threshold)  # Penalty term\n    ratio_penalty_term = (item / bins) * ((bins - item) > 0)  # Ratio penalty term\n\n    # New term 1: reward bins with larger remaining capacities (quadratic version)\n    reward_term = (bins - min_capacity) ** 2 / ((max_capacity - min_capacity) ** 2 + 1)  # Reward term\n\n    # New term 2: reward bins closer to the minimum remaining capacity in the set of bins (quadratic version)\n    reward_min_capacity_term = (min_capacity - bins) ** 2 / ((max_capacity - min_capacity) ** 2 + 1)  # Reward minimum capacity term\n\n    # New term 3: modified regularization term to control trade-off between capacity utilization and number of used bins (quadratic version)\n    regularization_term = ((max_capacity - bins) / max_capacity) ** 2  # Regularization term\n\n    # New term 4: reward bins within a certain range of the maximum capacity (quadratic version)\n    reward_range_term = (bins - 0.8 * max_capacity) ** 2 / ((0.4 * max_capacity) ** 2 + 1) * ((bins >= 0.6 * max_capacity) & (bins <= 0.8 * max_capacity))  # Reward range term\n\n    scores = (2 * capacity_term + quadratic_term + ratio_term - difference_term - penalty_term + ratio_penalty_term +\n              reward_term + reward_min_capacity_term + regularization_term + reward_range_term) / (\n                     np.max(2 * capacity_term + quadratic_term + ratio_term - difference_term - penalty_term +\n                            ratio_penalty_term + reward_term + reward_min_capacity_term + regularization_term + reward_range_term))\n\n    return scores",
          "objective": 0.00815,
          "other_inf": null
     }
]