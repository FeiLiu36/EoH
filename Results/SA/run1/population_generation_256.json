[
     {
          "algorithm": "The new algorithm calculates the score for each bin based on a combination of the ratio of the item size to the rest capacity of the bin, a penalty term for bins close to their maximum capacity, and a term related to the ratio of the total rest capacity of the bins to the maximum capacity of the bins, while avoiding the use of additional penalty terms for bins exceeding their maximum capacity.",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    # Calculate the ratio of item size to rest capacity of each bin\n    ratios = item / bins\n    \n    # Calculate the ratio of item size to the maximum capacity of the bins\n    max_capacity_ratio = item / (bins.size * bins.max())\n    \n    # Apply a penalty term to bins close to their maximum rest capacity\n    penalty = np.where(bins >= 0.9 * bins.max(), -np.inf, 0)\n    \n    # Calculate the ratio of the sum of the rest capacities to the maximum capacity of the bins\n    capacity_ratio = np.sum(bins) / (bins.size * bins.max())\n    \n    # Calculate the score for each bin by combining the ratio, penalty terms, and capacity ratio\n    scores = ratios + penalty + capacity_ratio\n    \n    return scores",
          "objective": 0.03984,
          "other_inf": null
     }
]