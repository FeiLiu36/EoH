[
     {
          "algorithm": "The new algorithm assigns a score to each bin based on the ratio of the item size to the maximum capacity, the rest capacity of the bin, and the square root of the penalty factor determined by the difference between the item size and the rest capacity of the bin. The scores are then normalized to ensure they sum up to 1, and the scores are further adjusted based on the difference between the maximum and minimum rest capacities of the bins.\n\nHere is the implementation of the new score function:\n\n```",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    max_capacity = np.max(bins)\n    rest_capacity = max_capacity - bins\n    ratio = item / max_capacity\n    \n    # Calculate the penalty factor for each bin\n    penalty_factor = np.sqrt(item - rest_capacity)\n    \n    # Calculate the score for each bin\n    scores = (rest_capacity**2) * ratio / penalty_factor\n    \n    # Normalize the scores\n    scores /= np.sum(scores)\n\n    # Adjust the scores based on the difference between maximum and minimum rest capacities\n    diff_rest_capacity = np.max(rest_capacity) - np.min(rest_capacity)\n    scores *= diff_rest_capacity / max_capacity\n    \n    return scores",
          "objective": 0.04226,
          "other_inf": null
     }
]