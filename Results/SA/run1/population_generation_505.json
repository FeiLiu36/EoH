[
     {
          "algorithm": "New Algorithm: Geometric Score Algorithm\n\nThe Geometric Score Algorithm calculates the scores as a geometric function of the ratio between the item size and the rest capacity, where the exponent is based on the maximum capacity of the bins. The scores are further adjusted by taking into account the position of the bin in the sorted rest capacities array.\n\nCode:\n\n",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    \"\"\"The geometric score algorithm calculates the scores as a geometric function of the ratio between the item size and the rest capacity,\n    where the exponent is based on the maximum capacity of the bins. The scores are further adjusted by taking into account the position of the bin in the sorted rest capacities array.\"\"\"\n\n    max_capacity = np.max(bins)\n    \n    # Sort the rest capacities in ascending order\n    sorted_bins = np.sort(bins)\n    \n    # Assign higher scores to bins with higher capacity by calculating the position-adjusted exponent\n    exponent = np.arange(1, len(bins) + 1)\n    \n    # Calculate the scores as geometric function of the ratio between item size and rest capacity\n    scores = (item / sorted_bins / max_capacity) ** exponent\n    \n    # Normalize the scores by dividing them by the sum of all scores\n    scores /= np.sum(scores)\n    \n    return scores",
          "objective": 0.04226,
          "other_inf": null
     }
]