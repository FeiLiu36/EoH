[
     {
          "algorithm": "The main steps of the new algorithm are as follows:\n\n1. Calculate the remaining capacity of each bin by subtracting the item size from the rest capacities of feasible bins.\n2. Find the maximum remaining capacity among all bins.\n3. Calculate the ratio between the maximum remaining capacity and the item size plus a constant.\n4. Calculate the exponential function raised to the power of the ratio.\n5. Calculate the sum of the remaining capacities of all bins raised to the power of the maximum remaining capacity plus a constant.\n6. Calculate the logarithmic function raised to the power of the sum from step 5.\n7. Calculate the product of the exponential function from step 4, the logarithmic function from step 6, and the weights squared.\n8. Calculate the maximum score across all bins.\n9. Raise the product from step 7 to the power of the maximum score and subtract the quadratic sum of the remaining capacities from step 2.\n\nHere is the implementation of the new algorithm in Python:\n\n```",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    \"\"\"The new algorithm calculates the scores for the bins by taking the product of the exponential function raised to the power of the ratio between the maximum remaining capacity and the item size plus a constant,\n    multiplied by the logarithmic function raised to the power of the sum of the remaining capacities of all bins raised to the power of the maximum remaining capacity plus a constant,\n    and the weights squared,\n    then raising it to the power of the maximum score across all bins,\n    and finally subtracting the quadratic sum of the remaining capacities from the maximum score across all bins.\"\"\"\n\n    # Calculate the remaining capacity of each bin\n    remaining_capacity = bins - item\n\n    # Calculate the maximum remaining capacity\n    max_remaining_capacity = np.max(remaining_capacity)\n\n    # Calculate the ratio between the maximum remaining capacity and the item size plus a constant\n    ratio = max_remaining_capacity / (item + 1e-10)\n\n    # Calculate the exponential function raised to the power of the ratio\n    exponential_ratio = np.exp(ratio)\n\n    # Calculate the sum of the remaining capacities of all bins raised to the power of the maximum remaining capacity plus a constant\n    sum_pow_max_capacity = np.power(np.sum(remaining_capacity), max_remaining_capacity + 1e-10)\n\n    # Calculate the logarithmic function raised to the power of the sum plus a constant\n    logarithmic_sum = np.log10(sum_pow_max_capacity + 1e-10)\n\n    # Calculate the product of the exponential ratio, the logarithmic sum plus a constant, and the weights squared\n    product = (exponential_ratio * logarithmic_sum) * np.power(np.arange(1, len(bins) + 1), 2)\n\n    # Calculate the maximum score across all bins\n    max_score = np.max(product)\n\n    # Raise the product to the power of the maximum score and subtract the quadratic sum of the remaining capacities\n    scores = np.power(product, max_score) - np.sum(np.power(remaining_capacity, 2))\n\n    return scores",
          "objective": 0.04226,
          "other_inf": null
     }
]