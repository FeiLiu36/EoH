[
     {
          "algorithm": "New Algorithm Description: The Improved Enhanced Score Function Algorithm assigns a score to each bin by considering six factors: a ratio term, a capacity term, a penalty term, a bonus term, a distance term, and a similarity term. The ratio term is the inverse of the ratio of the difference between the item and the bin size to the square of the capacity plus 1. The capacity term remains the same as before. The penalty term penalizes bins that are close to maximum capacity. The bonus term rewards bins that have capacities significantly larger than the item. The distance term penalizes bins that are far away from the item. The similarity term takes into account the similarity between the item and the bins by calculating the absolute difference between the item and each bin and dividing it by the maximum capacity. The scores are then sorted in descending order.\n\nCode:\n\n",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    max_capacity = np.max(bins)\n    min_capacity = np.min(bins)\n    num_bins = bins.shape[0]\n    \n    difference = item - bins\n    \n    # Ratio term\n    ratio_term = 1 / (difference / (bins**2 + 1))\n    \n    # Capacity term\n    capacity_term = 1 - bins / max_capacity\n    \n    # Penalty term\n    penalty_term = ((bins - max_capacity) / max_capacity) ** 2\n    \n    # Bonus term\n    bonus_term = ((max_capacity - bins) / (max_capacity - min_capacity)) ** 2\n    \n    # Distance term\n    item_distances = np.abs(bins - item)\n    distance_term = 1 / (item_distances + 1)\n    \n    # Similarity term\n    similarity_term = np.abs(item - bins) / max_capacity\n    \n    # Calculate scores\n    scores = ratio_term + capacity_term - penalty_term + bonus_term - distance_term - similarity_term\n    \n    # Sort scores in descending order\n    sorted_scores = np.sort(scores)[::-1]\n    \n    return scores",
          "objective": 0.01419,
          "other_inf": null
     }
]