[
     {
          "algorithm": "Algorithm: \"Modified Gaussian Score Function\"\n\nSteps:\n1. Calculate the maximum capacity of the bins.\n2. Calculate the average capacity of the bins.\n3. Set the value of the weight parameter (0.6) and the exponent parameter (0.7).\n4. Define a standard deviation parameter (std_dev) based on the maximum capacity and average capacity.\n5. Compute the quadratic term for the bins, where the quadratic term is calculated as follows:\n   - Initialize an array 'quadratic_term' with zeros, similar to the 'bins' array.\n   - Take the first 7 values from the 'bins' array and square them, then divide by 4.\n   - Update the corresponding values in the 'quadratic_term' array with the computed values.\n6. Compute the ratio term for the bins, where the ratio term is calculated as follows:\n   - Divide each bin's capacity by the rest capacity of the bins (item - bins), square the result.\n7. Compute the capacity term for the bins, where the capacity term is calculated as follows:\n   - Calculate the Gaussian function of the difference between the bins' capacity and the item size, divided by the standard deviation, squared.\n   - Multiply the result by the weight parameter.\n8. Compute the difference term for the bins, where the difference term is calculated as follows:\n   - Calculate the Gaussian function of the absolute difference between the bins' capacity and the item size, divided by the standard deviation, squared.\n9. Compute the penalty term for the bins, where the penalty term is calculated as follows:\n   - Calculate the Gaussian function of the bins' capacity divided by the standard deviation, squared.\n10. Compute the deviation term for the bins, where the deviation term is calculated as follows:\n    - Calculate the Gaussian function of the absolute difference between the bins' capacity and the average capacity of the bins, divided by the standard deviation, squared.\n    - Multiply the result by (1 - weight).\n11. Compute the optimization term for the bins, where the optimization term is calculated as follows:\n    - Calculate the Gaussian function of the bins' capacity divided by the standard deviation, squared.\n    - Multiply the result by (1 - weight).\n12. Compute the balance term for the bins, where the balance term is calculated as follows:\n    - Calculate the Gaussian function of the absolute difference between the bins' capacity and the average capacity of the bins, divided by the standard deviation, squared.\n    - Multiply the result by (1 - weight).\n13. Calculate the overall scores for the bins using the modified Gaussian scoring algorithm:\n    - Add up all the individual terms (quadratic_term, ratio_term, difference_term, penalty_term, deviation_term, optimization_term, balance_term).\n    - Divide the summed terms by the maximum value obtained from the sum to normalize the scores.\n14. Return the calculated scores array.\n\nCode:\n\n```",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    max_capacity = np.max(bins)\n    average_capacity = np.mean(bins)\n    \n    # Additional variables\n    weight = 0.6\n    exponent = 0.7\n    std_dev = (max_capacity - average_capacity) / 2\n\n    # Scoring terms\n    quadratic_term = np.zeros_like(bins)\n    quadratic_term[:7] = (bins[:7] ** 2) / 4\n\n    ratio_term = np.power(bins / (item - bins), 2)\n    \n    capacity_term = weight * np.exp(-((bins - item)**2) / (2 * std_dev**2))\n    \n    difference_term = np.exp(-np.abs(bins - item) / (2 * std_dev**2))\n    \n    penalty_term = np.exp(-bins / (2 * std_dev**2))\n    \n    deviation_term = (1 - weight) * np.exp(-np.abs(bins - average_capacity) / (2 * std_dev**2))\n    \n    optimization_term = (1 - weight) * np.exp(-bins / (2 * std_dev**2))\n    \n    balance_term = (1 - weight) * np.exp(-np.abs(bins - average_capacity) / (2 * std_dev**2))\n    \n    # Calculate scores with the modified Gaussian algorithm\n    scores = (\n        quadratic_term + ratio_term - difference_term - penalty_term +\n        deviation_term + optimization_term - balance_term\n    ) / (\n        np.max(\n            quadratic_term + ratio_term - difference_term - penalty_term +\n            deviation_term + optimization_term - balance_term\n        )\n    )\n    \n    return scores",
          "objective": 0.00714,
          "other_inf": null
     }
]