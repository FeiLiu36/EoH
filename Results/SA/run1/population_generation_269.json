[
     {
          "algorithm": "New algorithm: The new algorithm calculates the score for each bin based on the ratio of the item size to the rest capacity of the bin, with the scores weighted by a multiplier that increases as the bin's rest capacity approaches its maximum capacity, aiming to minimize the number of used bins.\n\nNew code:\n\n``` ",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    # Calculate the ratio of the item size to the rest capacity of each bin\n    ratios = item / bins\n    \n    # Calculate the weight multiplier for bins close to their maximum rest capacity\n    weight_multiplier = (1 - bins / bins.max())\n    \n    # Calculate the weighted score for each bin by combining the ratio and weight multiplier\n    scores = ratios * weight_multiplier\n    \n    return scores",
          "objective": 0.03984,
          "other_inf": null
     }
]