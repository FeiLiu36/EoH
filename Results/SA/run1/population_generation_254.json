[
     {
          "algorithm": "New Algorithm Description: The Modified Algorithm calculates the score for each bin based on the ratio of the item size to the rest capacity of the bin, a penalty term for bins close to their maximum capacity, a term related to the ratio of the total rest capacity of the bins to the maximum capacity of the bins, and an additional penalty term for bins with rest capacities greater than the maximum capacity of the bins.\n\nCode:\n\n```Python\n",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    # Calculate the ratio of item size to rest capacity of each bin\n    ratios = item / bins\n    \n    # Calculate the ratio of item size to the maximum capacity of the bins\n    max_capacity_ratio = item / (bins.size * bins.max())\n    \n    # Apply a penalty term to bins close to their maximum rest capacity\n    penalty = np.where(bins >= 0.9 * bins.max(), -np.inf, 0)\n    \n    # Calculate the ratio of the sum of the rest capacities to the maximum capacity of the bins\n    capacity_ratio = np.sum(bins) / (bins.size * bins.max())\n    \n    # Apply an additional penalty term to bins with rest capacities greater than the maximum capacity of the bins\n    additional_penalty = np.where(bins > bins.max(), -np.inf, 0)\n    \n    # Calculate the score for each bin by combining the ratio, penalty terms, capacity ratio, and\n    # additional penalty term\n    scores = ratios + penalty + capacity_ratio + max_capacity_ratio + additional_penalty\n    \n    return scores",
          "objective": 0.03984,
          "other_inf": null
     }
]