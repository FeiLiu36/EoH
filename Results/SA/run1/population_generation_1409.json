[
     {
          "algorithm": "New Algorithm: Logarithmic Score Function Algorithm\n\n",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    max_capacity = np.max(bins)\n    weight = 0.5\n    alpha = 0.1\n    m = 5\n\n    sorted_bins = np.sort(bins)\n    logarithmic_term = np.log(bins + 1)\n    quadratic_term = np.zeros_like(bins)\n    quadratic_term[:m] = alpha * (bins[:m] ** 2)\n\n    ratio_term = weight * (bins**2 + 1) / ((item - bins) + 1)\n    capacity_term = weight * (bins / max_capacity)\n    penalty_term = weight * ((bins - max_capacity) / max_capacity) ** 2\n    proximity_term = weight * ((max_capacity - bins) / max_capacity) ** 2\n\n    scores = ratio_term + quadratic_term + capacity_term - penalty_term - proximity_term + logarithmic_term\n\n    sorted_scores = np.sort(scores)[::-1]\n\n    return scores",
          "objective": 0.01207,
          "other_inf": null
     }
]