[
     {
          "algorithm": "Algorithm description: The new algorithm, named Modified Gaussian Score Function, modifies the original algorithm by introducing a Gaussian function that considers the difference between each bin's capacity and the item size, scaled by the average capacity and the standard deviation, raised to a power determined by a weight factor. The algorithm then calculates the overall scores for the bins using the modified score function by summing up the individual terms and normalizing the scores.\n\n```",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    # Calculate statistics\n    max_capacity = np.max(bins)\n    average_capacity = np.mean(bins)\n    std_dev = np.std(bins)\n\n    # Additional variables\n    weight = 0.8\n    power = 2\n\n    # Scoring terms\n    quadratic_term = np.zeros_like(bins)\n    quadratic_term[:7] = (bins[:7] ** 2) / 4\n\n    ratio_term = np.power(bins / (item - bins), power)\n\n    difference_term = np.abs(bins - item)\n\n    power_factor = np.exp(-1 * weight * np.power(difference_term / (average_capacity * std_dev), power))  # Modified penalty term\n\n    deviation_term = np.abs(bins - average_capacity)\n\n    # New scoring term using Gaussian function\n    gaussian_term = np.exp(-1 * weight * np.power((difference_term / (average_capacity * std_dev)), 2) / 2)\n\n    optimization_term = (1 - weight) * np.exp(-bins / (2 * std_dev**2))\n\n    # Calculate scores with the modified Gaussian algorithm\n    scores = (\n        quadratic_term + ratio_term - power_factor + gaussian_term +\n        optimization_term\n    ) / (\n        np.max(\n            quadratic_term + ratio_term - power_factor + gaussian_term +\n            optimization_term\n        )\n    )\n\n    return scores",
          "objective": 0.00714,
          "other_inf": null
     }
]