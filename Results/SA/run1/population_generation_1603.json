[
     {
          "algorithm": "The new algorithm assigns scores to bins based on various factors such as the remaining capacities of the bins, the difference between the bin capacity and the item size, and penalty terms. The algorithm considers the maximum and minimum capacity differences of the bins, as well as the percentage of remaining capacity in relation to the maximum capacity. The number of items already assigned to each bin is also taken into account.\n\nHere's the implementation of the new algorithm in Python:\n\n```",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    max_capacity = np.max(bins)\n    min_capacity = np.min(bins)\n    average_capacity = np.mean(bins)\n    threshold = 0.4 * max_capacity\n\n    quadratic_term = np.zeros_like(bins)\n    quadratic_term[:7] = (bins[:7]**2) / 4  # Quadratic term\n\n    ratio_term = (bins**2) / ((item - bins)**2 + 1)  # Ratio term\n\n    capacity_term = np.exp(-0.6 * (bins - item) / item)  # Capacity term\n\n    difference_term = np.abs(bins - item)  # Difference term\n\n    penalty_term = np.exp((bins - average_capacity) / (0.2 * max_capacity)) * (bins > average_capacity)  # Penalty term\n\n    ratio_penalty_term = (item / bins) * ((bins - item) > 0)  # Ratio penalty term\n\n    max_min_capacity_diff = np.power(max_capacity - min_capacity, 2)\n\n    remaining_capacity_term = (bins / max_capacity)  # Remaining capacity term\n\n    closest_capacity_term = np.abs(bins - average_capacity) / max_capacity  # Closest capacity term\n\n    item_count_term = np.log10(bins) * (bins > threshold)  # Item count term\n\n    scores = (\n        3 * capacity_term + quadratic_term + 2 * ratio_term - 1.5 * difference_term - 0.8 * penalty_term + ratio_penalty_term +\n        0.5 * max_min_capacity_diff + 1 * remaining_capacity_term + 1 * closest_capacity_term + 0.3 * item_count_term\n    ) / (\n        np.max(3 * capacity_term + quadratic_term + 2 * ratio_term - 1.5 * difference_term - 0.8 * penalty_term +\n               ratio_penalty_term + 0.5 * max_min_capacity_diff + 1 * remaining_capacity_term + 1 * closest_capacity_term +\n               0.3 * item_count_term)\n    )\n\n    return scores",
          "objective": 0.00815,
          "other_inf": null
     }
]