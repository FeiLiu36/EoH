[
     {
          "algorithm": "New algorithm description: The modified algorithm calculates the scores for the bins by multiplying the inverse of the square root of the difference between the remaining capacity of each bin and the item size by the natural logarithm of the bin capacity, subtracts the minimum value across all bins from the obtained scores, adds the maximum value across all bins to the scores, and finally normalizes the scores by dividing them by the maximum score.\n\nNew algorithm implementation:\n\n``` ",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    \"\"\"The modified algorithm calculates the scores for the bins by multiplying the inverse of the square root of the difference between the remaining capacity of each bin and the item size by the natural logarithm of the bin capacity, subtracts the minimum value across all bins from the obtained scores, adds the maximum value across all bins to the scores, and finally normalizes the scores by dividing them by the maximum score.\"\"\"\n\n    # Calculate the difference between the remaining capacity of each bin and the item size\n    difference = bins - item\n\n    # Calculate the inverse of the square root of the difference\n    inverse_square_root = 1 / np.sqrt(difference)\n\n    # Multiply the inverse square root by the natural logarithm of the bin capacity\n    scores = inverse_square_root * np.log(bins)\n\n    # Subtract the minimum value across all bins from the scores\n    scores -= np.min(scores)\n\n    # Add the maximum value across all bins to the scores\n    scores += np.max(scores)\n\n    # Normalize the scores by dividing them by the maximum score\n    scores /= np.max(scores)\n\n    return scores",
          "objective": 0.04165,
          "other_inf": null
     }
]