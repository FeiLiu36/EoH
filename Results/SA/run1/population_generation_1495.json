[
     {
          "algorithm": "The new algorithm modifies the original algorithm by adding an additional term that penalizes bins with capacities greater than a certain threshold, and a term that emphasizes bins with capacities closer to the average bin capacity.\nCode:\n\n",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    max_capacity = np.max(bins)\n    alpha = 0.1\n    n = 5\n    threshold = 0.7 * max_capacity\n\n    sorted_bins = np.sort(bins)\n\n    quadratic_term = np.zeros_like(bins)\n    quadratic_term[:n] = alpha * (bins[:n] ** 2)  # Quadratic term\n\n    ratio_term = (bins ** 2 + 1) / ((item - bins) + 1)  # Ratio term\n\n    capacity_term = bins / max_capacity  # Capacity term\n\n    penalty_term = np.exp((bins - max_capacity) / max_capacity)  # Penalty term\n\n    exponential_term = np.exp(-(bins - item) / (0.5 * item))  # Exponential term\n\n    logarithmic_term = np.log(bins / item)  # Logarithmic term\n\n    threshold_penalty_term = np.exp((bins - threshold) / threshold)  # Threshold penalty term\n\n    average_capacity = np.mean(bins)\n    average_term = np.exp(-(bins - average_capacity) / average_capacity)  # Average term\n\n    scores = (\n        quadratic_term + ratio_term + capacity_term - penalty_term + exponential_term + logarithmic_term + threshold_penalty_term + average_term\n    )\n\n    sorted_scores = np.sort(scores)[::-1]\n\n    return scores",
          "objective": 0.01097,
          "other_inf": null
     }
]