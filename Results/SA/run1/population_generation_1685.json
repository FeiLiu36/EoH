[
     {
          "algorithm": "New Algorithm: Enhanced Power Score Function\n\nThe new algorithm enhances the power score function by introducing additional penalty terms based on the deviations of each bin's remaining capacity from the average capacity and the maximum capacity. It also incorporates a factor to consider the difference between the remaining capacity of each bin and the size of the current item. The algorithm aims to minimize the number of used bins by giving higher scores to bins with more remaining capacity, penalizing bins with lower capacity deviations, and encouraging a more balanced distribution of items among the bins.\n\n```",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    max_capacity = np.max(bins)\n    average_capacity = np.mean(bins)\n    \n    # Additional variables\n    penalty_factor = 0.8\n    power_factor = 0.5\n    count_factor = 0.6\n    weight_factor = 0.3\n    \n    # Scoring terms\n    quadratic_term = np.zeros_like(bins)\n    quadratic_term[:7] = (bins[:7] ** 2) / 4  # Quadratic term\n    \n    ratio_term = np.power(bins / (item - bins), 2)  # Ratio term\n    \n    capacity_term = np.power(bins / max_capacity, power_factor)  # Capacity term with power factor\n    \n    difference_term = np.power(np.abs(bins - item), power_factor)  # Difference term with power factor\n    \n    count_term = np.exp(-count_factor * bins)  # Count term\n    \n    penalty_term = (\n        np.exp(penalty_factor * (bins - average_capacity) / (0.3 * max_capacity)) *\n        (bins > average_capacity)\n    )  # Penalty term\n    \n    deviation_term = np.exp(-penalty_factor * np.abs(bins - average_capacity) / max_capacity)  # Deviation term with penalty factor\n    \n    optimization_term = weight_factor * (1 / (bins + 1))  # Optimization term with weight factor\n    \n    # Calculate scores with the enhanced power algorithm\n    scores = (\n        3 * capacity_term + quadratic_term + 2 * ratio_term - penalty_factor * difference_term - penalty_factor * penalty_term +\n        count_term + deviation_term + optimization_term\n    ) / (\n        np.max(\n            3 * capacity_term + quadratic_term + 2 * ratio_term - penalty_factor * difference_term - penalty_factor * penalty_term +\n            count_term + deviation_term + optimization_term\n        )\n    )\n    \n    return scores",
          "objective": 0.00795,
          "other_inf": null
     }
]