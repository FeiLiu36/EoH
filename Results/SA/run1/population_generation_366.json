[
     {
          "algorithm": "In the new algorithm, the score for each bin is calculated by taking the sum of the squared logarithm of the ratio of the rest capacity of the bin to the maximum capacity and the inverse ratio of the item size to the rest capacity of the bin, and then multiplying the result by a penalty factor that is proportional to the difference between the maximum capacity and the rest capacity of the bin.",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    # Calculate the maximum capacity of the bins\n    max_capacity = np.max(bins)\n\n    # Calculate the ratio of the rest capacity of each bin to the maximum capacity\n    ratios = bins / max_capacity\n\n    # Calculate the inverse ratio of the item size to the rest capacity of each bin\n    inverse_ratios = item / bins\n\n    # Calculate the squared logarithm of the ratio of the rest capacity of each bin to the maximum capacity\n    log_ratios_squared = np.log(ratios) ** 2\n\n    # Calculate the score for each bin by taking the sum of the squared logarithm of the ratio of the rest capacity of the bin to the maximum capacity\n    # and the inverse ratio of the item size to the rest capacity of the bin\n    scores = log_ratios_squared + inverse_ratios\n\n    # Calculate the difference between the maximum capacity and the rest capacity of each bin\n    differences = max_capacity - bins\n\n    # Calculate the penalty factor proportional to the difference between the maximum capacity and the rest capacity of the bin\n    penalty_factor = 0.1 * differences\n\n    # Multiply the scores by the penalty factor\n    scores *= penalty_factor\n\n    return scores",
          "objective": 0.03984,
          "other_inf": null
     }
]