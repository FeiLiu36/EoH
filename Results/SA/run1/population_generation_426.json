[
     {
          "algorithm": "New algorithm description: The new algorithm calculates the score for each bin by taking the sum of the reciprocal of the normalized distance between the item size and the rest capacity of each bin.\n\nCode:\n\n```",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    # Calculate the maximum capacity of the bins\n    max_capacity = np.max(bins)\n    \n    # Calculate the normalized distance between the item size and the rest capacity of each bin\n    distance = item - bins\n    normalized_distance = np.abs(distance) / max_capacity\n    \n    # Add a constant value to avoid zero score bins\n    constant_score = 0.1\n    \n    # Calculate the reciprocal of the normalized distance\n    reciprocal_distance = np.reciprocal(normalized_distance)\n    \n    # Multiply the reciprocal of the normalized distance by the maximum capacity and add the constant value\n    scores = (reciprocal_distance * max_capacity) + constant_score\n    \n    return scores",
          "objective": 0.03984,
          "other_inf": null
     }
]