[
     {
          "algorithm": "The new algorithm calculates the score for each bin by taking the ratio of the rest capacity of the bin to the maximum rest capacity, raising it to a power computed from the logarithm of the item size divided by the sum of the logarithm values of all ratios of bins. The scores are then multiplied by a constant factor W, and a penalty factor is applied to bins with rest capacity equal to the maximum rest capacity. Additionally, a weight factor is introduced to prioritize certain bins.",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    # Calculate the maximum rest capacity\n    max_capacity = np.max(bins)\n    \n    # Calculate the ratio of rest capacity to maximum rest capacity\n    ratios = bins / max_capacity\n    \n    # Compute the sum of logarithm values of all ratios\n    log_sum = np.sum(np.log(ratios))\n    \n    # Calculate the factor using the logarithm of the item size divided by log_sum\n    factor = np.log(item) / log_sum\n    \n    # Calculate the score for each bin as the product of ratios raised to the power of the factor\n    scores = ratios ** factor\n    \n    # Set a weight factor for specific bins\n    bin_weights = np.where(bins < max_capacity, 1, 1.1)\n    \n    # Apply the weight factor to the scores\n    scores *= bin_weights\n    \n    # Multiply scores by a constant factor W\n    W = 1.5\n    scores *= W\n    \n    return scores",
          "objective": 0.05383,
          "other_inf": null
     }
]