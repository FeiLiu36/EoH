[
     {
          "algorithm": "The new algorithm, named Modified Score Algorithm Z, calculates the scores for the bins by dividing the exponential of the remaining capacity of each bin by the exponential of the sum of the bin capacities, then subtracting the product of the bin capacity and the exponential of the product of the item size and the sum of the bin capacities, and multiplying by a decreasing geometric sequence of weights squared, followed by taking the maximum score across all bins prior to returning the scores.",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    \"\"\"The Modified Score Algorithm Z calculates the scores for the bins by dividing the exponential of the remaining capacity of each bin by\n    the exponential of the sum of the bin capacities, then subtracting the product of the bin capacity and the exponential of the product of the item size and\n    the sum of the bin capacities, and multiplying by a decreasing geometric sequence of weights squared, followed by taking the maximum score across all bins.\"\"\"\n    \n    # Calculate the sum of the bin capacities\n    bin_sum = np.sum(bins)\n    \n    # Calculate the remaining capacity of each bin\n    remaining_capacity = bins - item\n    \n    # Calculate the exponential of the remaining capacity\n    exp_remaining_capacity = np.exp(remaining_capacity)\n    \n    # Calculate the exponential of the sum of the bin capacities\n    exp_bin_sum = np.exp(bin_sum)\n    \n    # Calculate the division of the exponential of the remaining capacity by the exponential of the sum of the bin capacities\n    division = exp_remaining_capacity / exp_bin_sum\n    \n    # Calculate the product of the bin capacity and the exponential of the product of the item size and the sum of the bin capacities\n    product = bins * np.exp(item * bin_sum)\n    \n    # Subtract the product from the division\n    scores = division - product\n    \n    # Calculate the decreasing geometric sequence of weights squared\n    weights_squared = np.power(np.geomspace(len(bins), 1, num=len(bins), endpoint=False), 2)\n    \n    # Multiply the scores by the decreasing geometric sequence of weights squared\n    scores *= weights_squared\n    \n    # Take the maximum score across all bins\n    max_score = np.max(scores)\n    \n    return scores",
          "objective": 0.04226,
          "other_inf": null
     }
]