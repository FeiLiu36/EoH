[
     {
          "algorithm": "\nThe new algorithm calculates the score for each bin based on a combination of penalties and bonuses determined by various factors such as the remaining capacity of the bin, the size of the item, and the ratio between the remaining capacity and the item size. Bins with a higher score are more likely to be chosen for assignment, while bins with the maximum capacity are not used. The new algorithm also introduces a penalty for bins that are close to reaching the maximum capacity, and promotes performance by utilizing numpy functions.\n",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    max_capacity = np.max(bins)\n    remaining_capacity = max_capacity - bins\n    ratio = remaining_capacity / item\n    \n    # Calculate the penalties and bonuses\n    penalty1 = 1 - bins / max_capacity\n    penalty2 = bins / item\n    penalty3 = np.sqrt(np.log2(max_capacity / remaining_capacity))\n    \n    # Calculate the scores for each bin\n    scores = remaining_capacity + ratio - (penalty1 + penalty2) * penalty3\n    \n    # Set the scores of bins with maximum capacity to negative infinity\n    scores[bins == max_capacity] = -np.inf\n    \n    return scores",
          "objective": 0.03984,
          "other_inf": null
     }
]