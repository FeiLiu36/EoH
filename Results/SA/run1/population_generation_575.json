[
     {
          "algorithm": "The new algorithm, named Modified Score Algorithm X, calculates the scores for the bins by taking the square root of the average remaining capacity of each bin, multiplying it by the square root of the item size raised to the power of 2, subtracting the square root of the sum of the bin capacities from the product, then multiplying by a decreasing geometric sequence of weights raised to the power of 2, followed by taking the maximum score across all bins prior to returning the scores.",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    \"\"\"The Modified Score Algorithm X calculates the scores for the bins by taking the square root of the average remaining capacity of each bin, multiplying it by the square root of the item size raised to the power of 2, subtracting the square root of the sum of the bin capacities from the product, then multiplying by a decreasing geometric sequence of weights raised to the power of 2, followed by taking the maximum score across all bins.\"\"\"\n\n    # Calculate the average remaining capacity of each bin\n    avg_remaining_capacity = np.mean(bins - item)\n    \n    # Calculate the square root of the average remaining capacity\n    sqrt_avg_remaining_capacity = np.sqrt(avg_remaining_capacity)\n    \n    # Calculate the square root of the item size raised to the power of 2\n    sqrt_item = np.sqrt(item) ** 2\n    \n    # Calculate the product of the square root of the average remaining capacity and the square root of the item size raised to the power of 2\n    product = sqrt_avg_remaining_capacity * sqrt_item\n    \n    # Calculate the square root of the sum of the bin capacities\n    sqrt_sum = np.sqrt(np.sum(bins))\n    \n    # Subtract the square root of the sum of the bin capacities from the product\n    scores = product - sqrt_sum\n    \n    # Calculate the decreasing geometric sequence of weights raised to the power of 2\n    weights_powered = np.power(np.geomspace(len(bins), 1, num=len(bins), endpoint=False), 2)\n    \n    # Multiply the scores by the decreasing geometric sequence of weights raised to the power of 2\n    scores *= weights_powered\n    \n    # Take the maximum score across all bins\n    max_score = np.max(scores)\n    \n    return scores",
          "objective": 0.04226,
          "other_inf": null
     }
]