[
     {
          "algorithm": "The new algorithm calculates the score for each bin by taking the product of the ratio of the rest capacity of the bin to the maximum capacity, the product of the inverse ratio of the item size to the rest capacity of the bin and the inverse of the square of the ratio of the rest capacity of the bin to the maximum capacity, adds a constant factor to the score which is inversely proportional to the ratio of the item size to the maximum capacity, and multiplies the result by a penalty factor that is equal to the difference between the maximum capacity and the rest capacity of the bin.",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    # Calculate the maximum capacity of the bins\n    max_capacity = np.max(bins)\n\n    # Calculate the ratio of the rest capacity of each bin to the maximum capacity\n    ratios = bins / max_capacity\n\n    # Calculate the inverse ratio of the item size to the rest capacity of each bin\n    inverse_ratios = item / bins\n\n    # Calculate the inverse of the square of the ratio of the rest capacity of the bin to the maximum capacity\n    squared_ratios = np.power(ratios, 2)\n    inverse_squared_ratios = 1 / squared_ratios\n\n    # Calculate the score for each bin by taking the product of the ratio of the rest capacity of the bin to the maximum capacity,\n    # the product of the inverse ratio of the item size to the rest capacity of the bin and the inverse of the square of the ratio\n    # of the rest capacity of the bin to the maximum capacity\n    scores = ratios * inverse_ratios * inverse_squared_ratios\n\n    # Calculate the ratio of the item size to the maximum capacity\n    item_ratio = item / max_capacity\n\n    # Add a constant factor to the scores which is inversely proportional to the ratio of the item size to the maximum capacity\n    scores += 1 / item_ratio\n\n    # Calculate the difference between the maximum capacity and the rest capacity of each bin\n    differences = max_capacity - bins\n\n    # Calculate the penalty factor proportional to the difference between the maximum capacity and the rest capacity of the bin\n    penalty_factor = differences\n\n    # Multiply the scores by the penalty factor\n    scores *= penalty_factor\n\n    return scores",
          "objective": 0.03984,
          "other_inf": null
     }
]