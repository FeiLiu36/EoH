[
     {
          "algorithm": "Algorithm: Modified Exponential Score Function\n\nSteps:\n1. Calculate the statistics: maximum capacity, average capacity, and standard deviation of the bins.\n2. Initialize the weight factor, power factor, and standard deviation factor.\n3. Calculate the exponential term by using an exponential function with the difference term normalized by the average capacity and standard deviation, and the power factor raised to the power determined by the weight factor.\n4. Calculate the ratio term by raising the ratio of the bins to (item - bins) to the power determined by the weight factor.\n5. Calculate the difference term by taking the absolute difference between the bins and the item size.\n6. Calculate the quadratic term by squaring the bins and dividing by a factor of 4.\n7. Calculate the power factor by using a Gaussian function with the weight factor, difference term normalized by the average capacity and standard deviation, and the power factor raised to the power determined by the weight factor.\n8. Calculate the deviation term by taking the absolute difference between the bins and the average capacity.\n9. Calculate the score for each bin by summing up the exponential term, ratio term, difference term, quadratic term, power factor, and deviation term.\n10. Normalize the scores by dividing them by the maximum score.\n\nPython code:\n```\n",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    # Calculate statistics\n    max_capacity = np.max(bins)\n    average_capacity = np.mean(bins)\n    std_dev = np.std(bins)\n\n    # Additional variables\n    weight = 0.8\n    power = 2\n    std_dev_factor = 2\n\n    # Scoring terms\n    exponential_term = np.exp(\n        (-1)\n        * weight\n        * np.power(np.abs(bins - item) / (average_capacity * std_dev), power)\n    )\n\n    ratio_term = np.power(bins / (item - bins), power)\n\n    difference_term = np.abs(bins - item)\n\n    quadratic_term = np.zeros_like(bins)\n    quadratic_term[:7] = (bins[:7] ** 2) / 4\n\n    power_factor = np.exp(\n        (-1) * weight * np.power(difference_term / (average_capacity * std_dev), power)\n    )\n\n    deviation_term = np.abs(bins - average_capacity)\n\n    scores = (\n        exponential_term\n        + ratio_term\n        + difference_term\n        + quadratic_term\n        + power_factor\n        + deviation_term\n    ) / (\n        np.max(\n            exponential_term\n            + ratio_term\n            + difference_term\n            + quadratic_term\n            + power_factor\n            + deviation_term\n        )\n    )\n\n    return scores",
          "objective": 0.00714,
          "other_inf": null
     }
]