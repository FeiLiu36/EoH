[
     {
          "algorithm": "New Algorithm Description:\n\nMy new algorithm assigns a score to each bin based on a weighted sum of multiple factors, including the ratio of the item size to the rest capacity of the bin, the difference between the rest capacity and the maximum rest capacity, and a penalty term for bins that are close to their maximum rest capacity. The algorithm also takes into account a weight factor for certain bins to further adjust the scores.\n\nCode:\n\n",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    # Calculate the maximum rest capacity\n    max_capacity = np.max(bins)\n    \n    # Calculate the ratio of item size to rest capacity of each bin\n    ratios = item / bins\n    \n    # Calculate the difference between the rest capacity and the maximum rest capacity\n    capacity_diff = max_capacity - bins\n    \n    # Apply a penalty term to bins close to their maximum rest capacity\n    penalty = np.where(np.isclose(capacity_diff, 0), -np.inf, 0)\n    \n    # Set a weight factor for specific bins\n    bin_weights = np.where(np.isclose(bins, max_capacity), 1.1, 1)\n    \n    # Compute the score for each bin as a weighted sum of the ratio, capacity difference, and penalty terms\n    scores = bin_weights * (ratios + capacity_diff + penalty)\n    \n    return scores",
          "objective": 0.03984,
          "other_inf": null
     }
]