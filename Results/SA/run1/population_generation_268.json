[
     {
          "algorithm": "New algorithm: The new algorithm calculates the score for each bin based on a weighted combination of the ratio of the item size to the rest capacity of the bin and the average utilization ratio of all bins, with the weight for the utilization ratio determined by the penalty factor that increases as the bin's rest capacity approaches its maximum capacity, aiming to minimize the number of used bins.\n\nNew code:\n``` \nCode:\n",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    # Calculate the ratio of the item size to the rest capacity of each bin\n    ratios = item / bins\n    \n    # Calculate the penalty factor for bins close to their maximum rest capacity\n    penalty_factor = (1 - bins / bins.max()) ** (bins.size * np.log(bins.size))\n    \n    # Calculate the average utilization ratio of all bins\n    utilization_ratio = np.mean(bins / bins.max())\n    \n    # Calculate the weighted score for each bin by combining the ratio, penalty factor, and average utilization ratio\n    scores = ratios * (1 - penalty_factor) + utilization_ratio * penalty_factor\n    \n    return scores",
          "objective": 0.03984,
          "other_inf": null
     }
]