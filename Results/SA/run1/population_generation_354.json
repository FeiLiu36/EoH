[
     {
          "algorithm": "New algorithm description: The new algorithm calculates the score for each bin by taking the minimum value between the ratio of the rest capacity of the bin to the maximum capacity and the ratio of the item size to the rest capacity of the bin, and then subtracting the logarithm of the absolute difference between the item size and the rest capacity of the bin. Finally, it divides the result by the item size, but it also adds a penalty factor that is proportional to the difference between the item size and the rest capacity of the bin.\n\nCode:\n",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    # Calculate the maximum capacity of the bins\n    max_capacity = np.max(bins)\n    \n    # Calculate the ratio of the rest capacity of each bin to the maximum capacity\n    ratios = bins / max_capacity\n    \n    # Calculate the ratio of the item size to the rest capacity of each bin\n    size_ratio = item / bins\n    \n    # Take the minimum value between the ratios\n    min_ratios = np.minimum(ratios, size_ratio)\n    \n    # Calculate the difference between the item size and the rest capacity of each bin\n    differences = item - bins\n    \n    # Calculate the logarithm of the absolute difference obtained in step 4\n    log_differences = np.log(np.abs(differences))\n    \n    # Calculate the penalty factor proportional to the difference between the item size and the rest capacity of the bin\n    penalty_factor = 0.1 * differences\n    \n    # Calculate the scores for each bin by subtracting the logarithm of the difference obtained in step 4 from the minimum ratios, adding the penalty factor, and then dividing by the item size.\n    scores = (min_ratios - log_differences + penalty_factor) / item\n    \n    return scores",
          "objective": 0.03984,
          "other_inf": null
     }
]