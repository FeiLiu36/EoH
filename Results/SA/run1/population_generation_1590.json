[
     {
          "algorithm": "The new algorithm aims to assign scores to bins based on their remaining capacities, the difference between the bin capacity and the item size, and a penalty term that penalizes bins farther from the average capacity. The main steps of the algorithm are as follows:\n\n1. Calculate the maximum capacity, minimum capacity, and average capacity of the bins.\n2. Set a threshold value as 0.4 multiplied by the maximum capacity.\n3. Compute the quadratic term: square each bin's capacity and divide it by 4. Assign this term to the first 7 bins.\n4. Calculate the ratio term: square each bin's capacity, divide it by the difference between the item and the bin capacity squared plus 1.\n5. Compute the capacity term: apply the exponential function on -0.6 multiplied by the difference between the bin capacity and the item, divided by the item.\n6. Calculate the difference term: take the absolute difference between the bins' capacities and the item size.\n7. Compute the penalty term: apply the exponential function on the difference between each bin's capacity and the average capacity, divided by 0.2 multiplied by the maximum capacity. Set the value to zero for bins that are not above the average capacity.\n8. Calculate the ratio penalty term: multiply the ratio between the item size and each bin's capacity with a condition that the difference between the bin capacity and the item is greater than zero.\n9. Compute the reward term: take the fourth power of the difference between the minimum capacity and each bin's capacity, divided by the fourth power of the difference between the maximum and minimum capacities of the bins plus 1.\n10. Calculate the reward maximum capacity term: take the third power of the difference between each bin's capacity and the maximum capacity, divided by the third power of the difference between the maximum and minimum capacities of the bins plus 1.\n11. Compute the regularization term: square the difference between each bin's capacity and the average capacity, divided by 0.4 multiplied by the maximum capacity.\n12. Calculate the reward range term: take the third power of the difference between each bin's capacity and 0.7 multiplied by the average capacity, divided by the third power of 0.2 multiplied by the average capacity plus 1. Set the value to zero for bins that are not within the desired range.\n13. Compute the scores by combining all the terms and dividing them by the maximum value of the combined terms.\n14. Return the scores.\n\nHere is the implementation of the new algorithm in Python:\n\n```",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    max_capacity = np.max(bins)\n    min_capacity = np.min(bins)\n    average_capacity = np.mean(bins)\n    threshold = 0.4 * max_capacity\n\n    quadratic_term = np.zeros_like(bins)\n    quadratic_term[:7] = (bins[:7] ** 2) / 4  # Quadratic term\n\n    ratio_term = (bins ** 2) / ((item - bins) ** 2 + 1)  # Ratio term\n\n    capacity_term = np.exp(-0.6 * (bins - item) / item)  # Capacity term\n\n    difference_term = np.abs(bins - item)  # Difference term\n\n    penalty_term = np.exp((bins - average_capacity) / (0.2 * max_capacity)) * (bins > average_capacity)  # Penalty term\n    ratio_penalty_term = (item / bins) * ((bins - item) > 0)  # Ratio penalty term\n\n    reward_term = (min_capacity - bins) ** 4 / ((max_capacity - min_capacity) ** 4 + 1)  # Reward term\n    reward_max_capacity_term = (bins - max_capacity) ** 3 / ((max_capacity - min_capacity) ** 3 + 1)  # Reward maximum capacity term\n    regularization_term = ((bins - average_capacity) / (0.4 * max_capacity)) ** 2  # Regularization term\n    reward_range_term = (bins - 0.7 * average_capacity) ** 3 / ((0.2 * average_capacity) ** 3 + 1) * ((bins >= 0.4 * average_capacity) & (bins <= 0.7 * average_capacity))  # Reward range term\n    \n    scores = (\n        3 * capacity_term + quadratic_term + 2 * ratio_term - 1.5 * difference_term - 0.8 * penalty_term + ratio_penalty_term +\n        1.5 * reward_term + 1.2 * reward_max_capacity_term + 0.8 * regularization_term + reward_range_term\n    ) / (\n        np.max(3 * capacity_term + quadratic_term + 2 * ratio_term - 1.5 * difference_term - 0.8 * penalty_term +\n               ratio_penalty_term + 1.5 * reward_term + 1.2 * reward_max_capacity_term + 0.8 * regularization_term + reward_range_term)\n    )\n\n    return scores",
          "objective": 0.00815,
          "other_inf": null
     }
]