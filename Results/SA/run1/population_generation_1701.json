[
     {
          "algorithm": "The new algorithm, named Modified Logarithmic Score Function, assigns items to bins while minimizing the number of used bins by using a modified logarithmic scoring technique. \n\nCode:\n\n```",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    max_capacity = np.max(bins)\n    average_capacity = np.mean(bins)\n    \n    # Additional variables\n    penalty_factor = 0.8\n    power_factor = 0.5\n    count_factor = 0.6\n    weight_factor = 0.3\n    balance_factor = 0.2\n    logarithmic_base = 2.0\n    \n    # Scoring terms\n    quadratic_term = np.zeros_like(bins)\n    quadratic_term[:7] = (bins[:7] ** 2) / 4\n    \n    ratio_term = np.power(bins / (item - bins), 2)\n    \n    capacity_term = logarithmic_base ** (bins / max_capacity)\n    \n    difference_term = np.power(np.abs(bins - item), power_factor)\n    \n    count_term = np.exp(-count_factor * bins)\n    \n    penalty_term = (\n        np.exp(penalty_factor * (bins - average_capacity) / (0.3 * max_capacity)) *\n        (bins > average_capacity)\n    )\n    \n    deviation_term = np.exp(-penalty_factor * np.abs(bins - average_capacity) / max_capacity)\n    \n    optimization_term = weight_factor * (1 / (bins + 1))\n    \n    balance_term = np.power(balance_factor * np.square(bins - average_capacity) / (max_capacity ** 2), 2)\n    \n    # Calculate scores with the modified logarithmic algorithm\n    scores = (\n        3 * capacity_term + quadratic_term + 2 * ratio_term - penalty_factor * difference_term - penalty_factor * penalty_term +\n        count_term + deviation_term + optimization_term - balance_term\n    ) / (\n        np.max(\n            3 * capacity_term + quadratic_term + 2 * ratio_term - penalty_factor * difference_term - penalty_factor * penalty_term +\n            count_term + deviation_term + optimization_term - balance_term\n        )\n    )\n    \n    return scores",
          "objective": 0.00795,
          "other_inf": null
     }
]