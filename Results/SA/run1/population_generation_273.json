[
     {
          "algorithm": "New algorithm: The new algorithm calculates the score for each bin based on the ratio of the item size to the rest capacity of the bin, with the scores weighted by a multiplier that decreases as the bin's rest capacity approaches its maximum capacity up to a certain threshold, aiming to minimize the number of used bins. The threshold is determined based on the maximum rest capacity of the bins. Additionally, the algorithm introduces a penalty factor for bins that have significantly smaller rest capacities than the item size, further encouraging the use of larger bins.\n\n```",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    # Calculate the maximum rest capacity of the bins\n    max_rest_capacity = np.max(bins)\n    \n    # Calculate the ratio of the item size to the rest capacity of each bin\n    ratios = item / bins\n    \n    # Calculate the weight multiplier for bins closer to their maximum rest capacity up to the maximum rest capacity\n    weight_multiplier = np.where(bins > 0, 1 - bins / max_rest_capacity, 1)\n    \n    # Calculate a penalty factor for bins that have significantly smaller rest capacities than the item size\n    penalty_factor = np.where(bins < item, 1 - (item - bins) / (item - bins.min()), 1)\n    \n    # Calculate the combined weight multiplier and penalty factor for each bin\n    combined_multiplier = weight_multiplier * penalty_factor\n    \n    # Calculate the weighted score for each bin by combining the ratio and combined multiplier\n    scores = ratios * combined_multiplier\n    \n    return scores",
          "objective": 0.03984,
          "other_inf": null
     }
]