[
     {
          "algorithm": "The new algorithm is a Modified Polynomial Score Function.\n\nAlgorithm Description: \n\nThe new algorithm uses a modified polynomial score function to assign scores to the bins for item assignment. The main steps are as follows:\n\n1. Calculate the maximum capacity of the bins.\n2. Calculate the average capacity of the bins.\n3. Calculate the standard deviation of the bin capacities.\n4. Set the weight, power, and priority factor for scoring terms.\n5. Calculate the polynomial term as ((item - bins) / (average_capacity * std_dev))^power.\n6. Calculate the exponential decay term as e^(-1 * (item - bins) / (average_capacity * std_dev)).\n7. Calculate the ratio term as (bins / (item - bins))^power.\n8. Calculate the absolute difference term as |bins - item|.\n9. Calculate the quadratic term as (bins[:7]^2) / 4.\n10. Calculate the power factor as weight * ((absolute_diff_term / (average_capacity * std_dev))^power)^range(1, len(bins)+1).\n11. Calculate the priority term as (|bins - max_capacity| / average_capacity) * priority_factor.\n12. Calculate the priority boosting term as e^(-1 * |priority_factor - bins| / average_capacity).\n13. Calculate the deviation term as |bins - average_capacity|.\n14. Calculate the scores by summing all the scoring terms and dividing by the maximum score.\n15. Return the scores as a numpy array.\n\nImplementation:\n\n```\nCode:\n",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    # Calculate statistics\n    max_capacity = np.max(bins)\n    average_capacity = np.mean(bins)\n    std_dev = np.std(bins)\n    \n    # Additional variables\n    weight = 0.8\n    power = 2\n    priority_factor = 1.5\n    \n    # Scoring terms\n    polynomial_term = np.power(\n        (item - bins) / (average_capacity * std_dev),\n        power\n    )\n    \n    exponential_decay_modified = np.exp(-1 * (item - bins) / (average_capacity * std_dev))\n    \n    ratio_term = np.power(bins / (item - bins), power)\n    \n    absolute_diff_term = np.abs(bins - item)\n    \n    quadratic_term = np.zeros_like(bins)\n    quadratic_term[:7] = (bins[:7] ** 2) / 4\n    \n    power_factor = np.power(\n        weight * np.power(absolute_diff_term / (average_capacity * std_dev), power),\n        np.arange(1, len(bins)+1)\n    )\n    \n    priority_term = (np.abs(bins - max_capacity) / average_capacity) * priority_factor\n    \n    priority_boost = np.exp(-1 * np.abs(priority_factor - bins) / average_capacity)\n    \n    deviation_term = np.abs(bins - average_capacity)\n    \n    scores = (\n        polynomial_term\n        + exponential_decay_modified\n        + ratio_term\n        + absolute_diff_term\n        + quadratic_term\n        + power_factor\n        + priority_term\n        + priority_boost\n        + deviation_term\n    ) / (\n        np.max(\n            polynomial_term\n            + exponential_decay_modified\n            + ratio_term\n            + absolute_diff_term\n            + quadratic_term\n            + power_factor\n            + priority_term\n            + priority_boost\n            + deviation_term\n        )\n    )\n    \n    return scores",
          "objective": 0.00714,
          "other_inf": null
     }
]