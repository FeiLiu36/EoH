[
     {
          "algorithm": "Algorithm description: The new algorithm selects the bin with the maximum remaining capacity after the item is assigned as the primary bin, and calculates the scores for the other bins based on the bin capacities divided by the square root of the primary bin capacity, the exponential of the sum of the bin capacities divided by the primary bin capacity multiplied by the item size squared plus 1, and the exponential of the sum of the bin capacities minus the primary bin capacity divided by the square root of the item size plus 1. The scores are then multiplied together with the product term and the exponential of the primary bin capacity minus the sum of bin capacities.\n\nCode:\n```\n",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    primary_bin_capacity = np.max(bins) - item\n    bin_capacities = bins / np.sqrt(primary_bin_capacity)\n    product_term = np.prod(bin_capacities)\n    exp_term = np.exp((np.sum(bins) / primary_bin_capacity) * (np.square(item) + 1))\n    exp_sum = np.exp((np.sum(bins) - primary_bin_capacity) / np.sqrt(item + 1))\n    scores = product_term * exp_term * exp_sum * np.exp(primary_bin_capacity - np.sum(bins))\n\n    return scores",
          "objective": 0.04226,
          "other_inf": null
     }
]