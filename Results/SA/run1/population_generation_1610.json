[
     {
          "algorithm": "New Algorithm Description: The new algorithm assigns scores to bins based on a combination of factors including the remaining capacities of the bins, the difference between the bin capacity and the item size, penalty terms, and a new factor that considers the difference between each bin's remaining capacity and the average remaining capacity of all the bins. The algorithm aims to minimize the number of used bins by giving higher scores to bins with more remaining capacity and penalizing bins with a lower number of items already assigned. Additionally, the new algorithm introduces a regularization term that penalizes large differences in remaining capacity between bins.\n\nCode:\n\n```",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    max_capacity = np.max(bins)\n    average_capacity = np.mean(bins)\n    threshold = 0.4 * max_capacity\n    \n    quadratic_term = np.zeros_like(bins)\n    quadratic_term[:7] = (bins[:7] ** 2) / 4  # Quadratic term\n    \n    ratio_term = (bins ** 2) / ((item - bins) ** 2 + 1)  # Ratio term\n    \n    capacity_term = np.exp(-0.6 * (bins - item) / item)  # Capacity term\n    \n    difference_term = np.abs(bins - item)  # Difference term\n    \n    penalty_term = np.exp((bins - average_capacity) / (0.2 * max_capacity)) * (bins > average_capacity)  # Penalty term\n    \n    ratio_penalty_term = (item / bins) * ((bins - item) > 0)  # Ratio penalty term\n    \n    remaining_capacity_diff = np.abs(bins - average_capacity)  # Remaining capacity difference term\n    \n    regularization_term = np.exp(-0.2 * np.abs(bins - average_capacity))  # Regularization term\n    \n    scores = (\n        3 * capacity_term + quadratic_term + 2 * ratio_term - 1.5 * difference_term - 0.8 * penalty_term + ratio_penalty_term +\n        1 * remaining_capacity_diff + 0.3 * regularization_term\n    ) / (\n        np.max(\n            3 * capacity_term + quadratic_term + 2 * ratio_term - 1.5 * difference_term - 0.8 * penalty_term +\n            ratio_penalty_term + 1 * remaining_capacity_diff + 0.3 * regularization_term\n        )\n    )\n\n    return scores",
          "objective": 0.00845,
          "other_inf": null
     }
]