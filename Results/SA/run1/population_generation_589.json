[
     {
          "algorithm": "The new algorithm calculates the scores for the bins by taking the product of the exponential function raised to the power of the ratio between the maximum remaining capacity and the item size plus a constant, multiplied by the logarithm of the sum of the remaining capacities of all bins raised to the power of the maximum remaining capacity plus a constant, and the weights raised to the power of 2, then raising it to the power of the maximum score across all bins.\n\n```\n",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    \"\"\"The New Modified Score Algorithm calculates the scores for the bins by taking the product of the exponential function raised to the power of the ratio between the maximum remaining capacity and the item size plus a constant,\n    multiplied by the logarithm of the sum of the remaining capacities of all bins raised to the power of the maximum remaining capacity plus a constant,\n    and the weights raised to the power of 2,\n    then raising it to the power of the maximum score across all bins.\"\"\"\n\n    # Calculate the remaining capacity of each bin\n    remaining_capacity = bins - item\n\n    # Calculate the maximum remaining capacity\n    max_remaining_capacity = np.max(remaining_capacity)\n\n    # Calculate the ratio between the maximum remaining capacity and the item size plus a constant\n    ratio = max_remaining_capacity / (item + 1e-10)\n\n    # Calculate the exponential function raised to the power of the ratio\n    exponential_ratio = np.exp(ratio)\n\n    # Calculate the sum of the remaining capacities of all bins raised to the power of the maximum remaining capacity plus a constant\n    sum_pow_max_capacity = np.power(np.sum(remaining_capacity), max_remaining_capacity + 1e-10)\n\n    # Calculate the logarithm of the sum of the remaining capacities of all bins raised to the power of the maximum remaining capacity plus a constant\n    log_sum_pow_max_capacity = np.log(sum_pow_max_capacity)\n\n    # Calculate the product of the exponential ratio and the logarithm of the sum plus a constant\n    product = exponential_ratio * log_sum_pow_max_capacity\n\n    # Calculate the weights raised to the power of 2\n    weights_powered = np.power(np.arange(1, len(bins) + 1), 2)\n\n    # Calculate the maximum score across all bins\n    max_score = np.max(product)\n\n    # Raise the product to the power of the maximum score\n    scores = np.power(product, max_score)\n\n    return scores",
          "objective": 0.04226,
          "other_inf": null
     }
]