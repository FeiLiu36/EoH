[
     {
          "algorithm": "new algorithm description: \n\nThe new algorithm calculates the scores for the bins by taking the product of the inverse of the remaining capacity of each bin and the inverse of the item size, divides it by the product of the bin capacity and the logarithm of the product of the item size and the bin capacity, subtracts the minimum value across all bins from the obtained scores, adds the maximum value across all bins to the scores, and finally normalizes the scores by dividing them by the maximum score.\n\nnew algorithm implementation:\n\n```\nCode:\n\nCode:\n",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    \"\"\"The new algorithm calculates the scores for the bins by taking the product of the inverse of the remaining capacity of each bin and the inverse of the item size, divides it by the product of the bin capacity and the logarithm of the product of the item size and the bin capacity, subtracts the minimum value across all bins from the obtained scores, adds the maximum value across all bins to the scores, and finally normalizes the scores by dividing them by the maximum score.\"\"\"\n\n    # Calculate the inverse of the remaining capacity of each bin\n    inverse_capacity = 1 / bins\n\n    # Calculate the inverse of the item size\n    inverse_item_size = 1 / item\n\n    # Calculate the product of the inverse capacity and the inverse item size\n    product = inverse_capacity * inverse_item_size\n\n    # Calculate the logarithm of the product of the item size and the bin capacity\n    logarithm = np.log(item * bins)\n\n    # Calculate the scores by dividing the product by the product of the bin capacity and the logarithm\n    scores = product / (bins * logarithm)\n\n    # Subtract the minimum value across all bins from the scores\n    scores -= np.min(scores)\n\n    # Add the maximum value across all bins to the scores\n    scores += np.max(scores)\n\n    # Normalize the scores by dividing them by the maximum score\n    scores /= np.max(scores)\n\n    return scores",
          "objective": 0.03984,
          "other_inf": null
     }
]