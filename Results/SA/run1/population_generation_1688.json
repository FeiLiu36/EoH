[
     {
          "algorithm": "New Algorithm: Modified Exponential Score Function\n\nIn this modified algorithm, we introduce an additional exponential term to the original algorithm to enhance the scoring mechanism. The exponential term is applied to the capacity term, deviation term, and balance term, thereby amplifying the effect of these terms in the scoring process. By including this exponential term, we aim to achieve a more sensitive and refined assignment of items to bins, ultimately leading to a reduction in the number of used bins.\n\n```",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    max_capacity = np.max(bins)\n    average_capacity = np.mean(bins)\n    \n    # Additional variables\n    penalty_factor = 0.8\n    power_factor = 0.5\n    count_factor = 0.6\n    weight_factor = 0.3\n    balance_factor = 0.2\n    exponential_factor = 0.4  # New exponential factor\n    \n    # Scoring terms\n    quadratic_term = np.zeros_like(bins)\n    quadratic_term[:7] = (bins[:7] ** 2) / 4  # Quadratic term\n    \n    ratio_term = np.power(bins / (item - bins), 2)  # Ratio term\n    \n    capacity_term = np.exp(power_factor * (bins / max_capacity))  # Capacity term with exponential factor\n    \n    difference_term = np.power(np.abs(bins - item), power_factor)  # Difference term with power factor\n    \n    count_term = np.exp(-count_factor * bins)  # Count term\n    \n    penalty_term = (\n        np.exp(penalty_factor * (bins - average_capacity) / (0.3 * max_capacity)) *\n        (bins > average_capacity)\n    )  # Penalty term\n    \n    deviation_term = np.exp(-penalty_factor * np.abs(bins - average_capacity) / max_capacity)  # Deviation term with penalty factor\n    \n    optimization_term = weight_factor * (1 / (bins + 1))  # Optimization term with weight factor\n    \n    balance_term = np.exp(-balance_factor * np.square(bins - average_capacity) / (max_capacity ** 2))  # Balance term with balance factor and exponential factor\n    \n    # Calculate scores with the modified exponential algorithm\n    scores = (\n        3 * capacity_term + quadratic_term + 2 * ratio_term - penalty_factor * difference_term - penalty_factor * penalty_term +\n        count_term + deviation_term + optimization_term - balance_term\n    ) / (\n        np.max(\n            3 * capacity_term + quadratic_term + 2 * ratio_term - penalty_factor * difference_term - penalty_factor * penalty_term +\n            count_term + deviation_term + optimization_term - balance_term\n        )\n    )\n    \n    return scores",
          "objective": 0.00795,
          "other_inf": null
     }
]