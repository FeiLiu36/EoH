[
     {
          "algorithm": "New Algorithm: Modified Exponential Score Function Algorithm\n\nThe new algorithm aims to improve the scoring system by introducing an exponential term instead of the quadratic term to account for different factors affecting bin assignment. The exponential term rewards bins with larger capacities and penalizes bins with smaller capacities.\n\nCode:\n\n```",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    max_capacity = np.max(bins)\n    weight = 0.5\n    alpha = 0.1\n    m = 5\n\n    sorted_bins = np.sort(bins)\n    logarithmic_term = np.log(bins + 1)\n    exponential_term = np.exp(-bins / max_capacity)\n\n    exponential_term2 = weight * np.exp((max_capacity - bins) / max_capacity)\n\n    quadratic_term2 = np.zeros_like(bins)\n    quadratic_term2[:m] = alpha * (bins[:m] ** 2)\n\n    ratio_term = weight * (bins ** 2 + 1) / ((item - bins) + 1)\n    capacity_term = weight * (bins / max_capacity)\n    penalty_term = weight * ((bins - max_capacity) / max_capacity) ** 2\n    proximity_term = weight * ((max_capacity - bins) / max_capacity) ** 2\n\n    scores = (\n        ratio_term + quadratic_term2 + capacity_term - penalty_term - proximity_term\n        + logarithmic_term + exponential_term + exponential_term2\n    )\n\n    sorted_scores = np.sort(scores)[::-1]\n\n    return scores",
          "objective": 0.01197,
          "other_inf": null
     }
]