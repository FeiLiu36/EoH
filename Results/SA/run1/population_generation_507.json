[
     {
          "algorithm": "New Algorithm: Weighted Score Algorithm\n\nThe Weighted Score Algorithm calculates the scores as a weighted sum of two components: the ratio between the item size and the rest capacity, and the ratio between the item size and the average capacity of the bins. The scores are further adjusted by taking into account the position of the bin in the sorted rest capacities array.\n\nCode:\n\n```\n\nCode:\n",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    \"\"\"The weighted score algorithm calculates the scores as a weighted sum of two components: the ratio between the item size and the rest capacity,\n    and the ratio between the item size and the average capacity of the bins. The scores are further adjusted by taking into account the position of the bin in the sorted rest capacities array.\"\"\"\n\n    # Sort the rest capacities in ascending order\n    sorted_bins = np.sort(bins)\n    \n    # Calculate the weighted sum of two components\n    component1 = item / sorted_bins\n    component2 = item / np.mean(bins)\n    \n    # Assign higher weights to component1 by multiplying with the position-adjusted exponent\n    weights = np.exp(np.arange(1, len(bins) + 1))\n    \n    # Calculate the scores as a weighted sum of the two components\n    scores = component1 + component2\n    scores *= weights\n    \n    # Normalize the scores by dividing them by the sum of all scores\n    scores /= np.sum(scores)\n    \n    return scores",
          "objective": 0.04226,
          "other_inf": null
     }
]