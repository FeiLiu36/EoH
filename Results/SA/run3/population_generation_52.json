[
     {
          "algorithm": "The new algorithm calculates the score for each bin by taking the sum of the remaining capacity and the item size, multiplied by the square root of the remaining capacity, divided by the logarithm of the remaining capacity plus 1. The algorithm encourages the utilization of bins with higher remaining capacity, considering both the size of the item and the remaining capacity of the bins.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    remaining_capacity = bins - item\n    scores = ((remaining_capacity + item) * np.sqrt(remaining_capacity)) / (np.log(remaining_capacity + 1))\n    scores = np.where(remaining_capacity >= item, np.full_like(scores, np.inf), scores)\n    return scores",
          "objective": 0.01972,
          "other_inf": null
     }
]