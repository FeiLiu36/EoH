[
     {
          "algorithm": "The new algorithm calculates the score for each bin by taking the product of the remaining capacity and the logarithm of the remaining capacity divided by the maximum capacity, then dividing it by the square root of bin index to encourage the use of bins with higher indexes, and assigning maximum scores for bins with remaining capacity equal to or greater than the item size.\n\nHere is the implementation of the new algorithm in Python:\n\n```",
          "code": "import numpy as np\nimport math\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    remaining_capacity = bins - item\n\n    # Calculate the score for each bin\n    remaining_log = np.log(remaining_capacity / np.max(bins))\n    scores = remaining_capacity * remaining_log / np.sqrt(np.arange(len(bins)) + 1)\n\n    # Assign maximum scores for bins with remaining capacity >= item size\n    scores = np.where(remaining_capacity >= item, np.inf, scores)\n\n    return scores",
          "objective": 0.01207,
          "other_inf": null
     }
]