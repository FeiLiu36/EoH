[
     {
          "algorithm": "The new algorithm calculates the score for each bin by taking the ratio between the remaining capacity and the item size, then multiplying it by the logarithm of the remaining capacity divided by the maximum capacity. Additionally, it divides the scores by the square root of bin index to encourage the use of bins with higher indexes, and assigns maximum scores for bins with remaining capacity equal to or greater than the item size.",
          "code": "import numpy as np\nimport math\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    remaining_capacity = bins - item\n\n    # Calculate the score for each bin\n    ratio = remaining_capacity / item\n    remaining_log = np.log(remaining_capacity / np.max(bins))\n    scores = remaining_log * ratio\n\n    # Divide the scores by the square root of bin index\n    scores = scores / np.sqrt(np.arange(len(bins)) + 1)\n\n    # Assign maximum scores for bins with remaining capacity >= item size\n    scores = np.where(remaining_capacity >= item, np.inf, scores)\n\n    return scores",
          "objective": 0.01207,
          "other_inf": null
     }
]