[
     {
          "algorithm": "The new algorithm aims to score the bins based on the remaining capacity and the item size, with a penalty for bins with higher remaining capacity. The score is calculated by dividing the remaining capacity by the logarithm of the item size (base 2), and further multiplied by a constant factor. The algorithm promotes the usage of bins with lower remaining capacity by applying a modified penalty term.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    remaining_capacity = bins - item\n\n    # Calculate the ratio of the remaining capacity to the logarithm of the item size (base 2)\n    capacity_ratio = remaining_capacity / np.log2(item)\n\n    # Calculate the penalty for bins with higher remaining capacity\n    penalty = np.exp(-capacity_ratio)\n\n    # Calculate the adjusted score based on the capacity ratio and the penalty, multiplied by a constant factor\n    adjusted_score = capacity_ratio * penalty * 10\n\n    # Calculate the final scores, adjusting them based on the inverse of the remaining capacity of the bin\n    scores = np.where(remaining_capacity >= item, 1e9, adjusted_score / remaining_capacity)\n\n    return scores",
          "objective": 0.01358,
          "other_inf": null
     }
]