[
     {
          "algorithm": "Algorithm Description: The new algorithm calculates the score for each bin based on a modified formula: score = (sqrt(remaining_capacity) / item) * ((1 / (log(remaining_capacity) * remaining_capacity)) + 1) * (exp(remaining_capacity) / item).\n\n1. Calculate the remaining capacity for each bin by subtracting the item size from the rest capacities of the bins.\n2. Calculate the square root of the remaining capacity.\n3. Calculate the reciprocal of the natural logarithm of the remaining capacity multiplied by the remaining capacity and add 1 to the result.\n4. Calculate the exponent of the remaining capacity.\n5. Calculate the reciprocal of the item size.\n6. Calculate the product of the square root from step 2, the reciprocal from step 3 (with an added 1), and the exponent from step 4.\n7. Calculate the final scores by multiplying the product from step 6 with the reciprocal from step 5.\n8. Assign maximum scores for bins with remaining capacity greater than or equal to the item size.\n9. Multiply the scores with a mask to make scores of unused bins equal to 0.\n\nCode:\n``` \n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    remaining_capacity = bins - item\n\n    # Calculate the square root of the remaining capacity\n    sqrt_remaining_capacity = np.sqrt(remaining_capacity)\n\n    # Calculate the reciprocal of the natural logarithm of the remaining capacity multiplied by the remaining capacity and add 1\n    log_ratio = 1 / (np.log(remaining_capacity) * remaining_capacity) + 1\n\n    # Calculate the exponent of the remaining capacity\n    capacity_exp = np.exp(remaining_capacity)\n\n    # Calculate the reciprocal of the item size\n    item_reciprocal = 1 / item\n\n    # Calculate the product of the square root, modified reciprocal, and exponent\n    weighted_product = sqrt_remaining_capacity * log_ratio * (capacity_exp * item_reciprocal)\n\n    # Calculate the final scores by multiplying the product with the reciprocal of the item size\n    scores_step7 = weighted_product * item_reciprocal\n\n    # Assign maximum scores for bins with remaining capacity >= item size\n    scores_step8 = np.where(remaining_capacity >= item, np.inf, scores_step7)\n\n    # Multiply scores with mask to make scores of unused bins equal to 0\n    scores = scores_step8 * (1 - np.where(remaining_capacity == bins, 1, 0))\n\n    return scores",
          "objective": 0.01157,
          "other_inf": null
     }
]