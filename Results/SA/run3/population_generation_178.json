[
     {
          "algorithm": "The new algorithm is a modified version of the provided algorithm. It follows the same steps as the original algorithm but incorporates an additional step to penalize bins that have a large difference between the item size and the remaining capacity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    remaining_capacity = bins - item\n    differences = remaining_capacity - item\n    squared_differences = 1000 * differences**2\n    reciprocal_capacity = 100 / remaining_capacity\n    penalized_differences = squared_differences + reciprocal_capacity + 1e6 * np.abs(differences)\n    scores = np.where(remaining_capacity >= item, np.full_like(penalized_differences, 1e9), penalized_differences)\n    return scores",
          "objective": 0.01358,
          "other_inf": null
     }
]