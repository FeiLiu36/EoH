[
     {
          "algorithm": "\nNew algorithm: The modified algorithm calculates the score for each bin by multiplying the reciprocal of the remaining capacity divided by the item size with the cube root of the ratio between the remaining capacity and the maximum capacity raised to the power of the item size, then subtracting the logarithm of the remaining capacity plus a constant value, finally dividing the score by the cube root of the item size plus the square root of the maximum capacity.\n",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    remaining_capacity = bins - item\n\n    # Calculate the score for each bin\n    reciprocal = 1 / (remaining_capacity / item)\n    ratio_power_cuberoot = ((remaining_capacity / bins) ** item) ** (1/3)\n    log = np.log(remaining_capacity + 1)\n    scores = (reciprocal * ratio_power_cuberoot - log) / ((item ** (1/3)) + np.sqrt(np.max(bins)))\n\n    # Assign maximum score for bins with remaining capacity equal to maximum capacity minus item size\n    max_capacity = np.max(bins)\n    max_score = (1 / ((max_capacity - item) / item)) * (((max_capacity - item) / bins) ** item) ** (1/3) - np.log(max_capacity - item + 1)\n    scores = np.where(remaining_capacity == (max_capacity - item), max_score, scores)\n\n    # Assign maximum scores for bins with remaining capacity >= item size\n    scores = np.where(remaining_capacity >= item, np.inf, scores)\n\n    return scores",
          "objective": 0.01358,
          "other_inf": null
     }
]