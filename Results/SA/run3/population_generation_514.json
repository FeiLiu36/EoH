[
     {
          "algorithm": "Algorithm description: The new modified algorithm is based on the following formula: score = sqrt(remaining_capacity) / (item * sqrt(remaining_capacity)) / (log(remaining_capacity) * item) * sqrt(remaining_capacity / sum(bins)^2) * (remaining_capacity / item) * exp(remaining_capacity). The main steps of the algorithm are as follows:\n\n1. Calculate the remaining capacity for each bin by subtracting the item size from the rest capacities of the bins.\n2. Calculate the square root of the remaining capacity.\n3. Calculate the ratio of the square root of the remaining capacity to the square root of the item size multiplied by the remaining capacity.\n4. Calculate the ratio of the logarithm of the remaining capacity to the item size.\n5. Calculate the square root of the remaining capacity divided by the sum of the bin sizes squared.\n6. Calculate the ratio of the remaining capacity to the item size.\n7. Calculate the exponent of the remaining capacity.\n8. Calculate the product of all the factors.\n9. Calculate the final score by multiplying the product from step 8 with the exponent of the remaining capacity.\n10. Assign maximum scores for bins with remaining capacity greater than or equal to the item size.\n11. Multiply the scores with a mask to make scores of unused bins equal to 0.\n\nCode:\n\n```\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    remaining_capacity = bins - item\n\n    # Calculate the square root of the remaining capacity\n    sqrt_remaining_capacity = np.sqrt(remaining_capacity)\n\n    # Calculate the ratio of the square root of the remaining capacity to the square root of the item size multiplied by the remaining capacity\n    sqrt_ratio = sqrt_remaining_capacity / (np.sqrt(item) * sqrt_remaining_capacity)\n\n    # Calculate the ratio of the logarithm of the remaining capacity to the item size\n    log_ratio = np.log(remaining_capacity) / item\n\n    # Calculate the square root of the remaining capacity divided by the sum of the bin sizes squared\n    sum_ratio = sqrt_remaining_capacity / np.sum(bins)**2\n\n    # Calculate the ratio of the remaining capacity to the item size\n    capacity_ratio = remaining_capacity / item\n\n    # Calculate the exponent of the remaining capacity\n    capacity_exp = np.exp(remaining_capacity)\n\n    # Calculate the product of all the factors\n    weighted_product = (sqrt_ratio / (log_ratio * item)) * sum_ratio * capacity_ratio * capacity_exp\n\n    # Calculate the final scores by multiplying the product with the exponent of the remaining capacity\n    scores_step9 = weighted_product * capacity_exp\n\n    # Assign maximum scores for bins with remaining capacity >= item size\n    scores_step10 = np.where(remaining_capacity >= item, np.inf, scores_step9)\n\n    # Multiply scores with mask to make scores of unused bins equal to 0\n    scores = scores_step10 * (1 - np.where(remaining_capacity == bins, 1, 0))\n\n    return scores",
          "objective": 0.01238,
          "other_inf": null
     }
]