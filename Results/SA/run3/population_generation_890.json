[
     {
          "algorithm": "The new algorithm calculates the score for each bin by taking the logarithm of the ratio between the remaining capacity and the item size, multiplying it by the ratio between the item size and the remaining capacity, raising it to a power determined by a constant factor, and subtracting it from the reciprocal of the remaining capacity multiplied by the item size, while also considering the ratio between the remaining capacity and the maximum capacity as a penalty factor.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    remaining_capacity = bins - item\n\n    # Define constant factor\n    constant_factor = 0.5\n\n    # Calculate the score for each bin\n    reciprocal = 1 / (remaining_capacity * item)\n    ratio = remaining_capacity / item\n    exponent = ratio ** constant_factor\n    log_ratio = np.log(ratio)\n    penalty_factor = item / remaining_capacity\n    scores = reciprocal - (exponent * log_ratio * penalty_factor)\n\n    # Assign maximum scores for bins with remaining capacity >= item size\n    scores = np.where(remaining_capacity >= item, np.inf, scores)\n\n    return scores",
          "objective": 0.01358,
          "other_inf": null
     }
]