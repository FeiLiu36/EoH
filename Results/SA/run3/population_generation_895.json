[
     {
          "algorithm": "\nAlgorithm description: The new algorithm calculates the score for each bin by multiplying the square root of the ratio between the item size and the remaining capacity by the exponential of the negative exponential of the ratio between the item size and the remaining capacity, and subtracting it from the reciprocal of the remaining capacity multiplied by the item size, while also considering the reciprocal of the ratio between the remaining capacity and the maximum capacity as a penalty factor.\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    remaining_capacity = bins - item\n\n    # Calculate the score for each bin\n    ratio_sqrt = np.sqrt(item / remaining_capacity)\n    ratio_exp = np.exp(-item / remaining_capacity)\n    reciprocal = 1 / (remaining_capacity * item)\n    penalty_factor = 1 / (remaining_capacity / bins)\n    scores = reciprocal - (ratio_sqrt * ratio_exp * penalty_factor)\n\n    # Assign maximum scores for bins with remaining capacity >= item size\n    scores = np.where(remaining_capacity >= item, np.inf, scores)\n\n    return scores",
          "objective": 0.01358,
          "other_inf": null
     }
]