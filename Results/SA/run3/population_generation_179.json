[
     {
          "algorithm": "The new algorithm is a modified version of the provided algorithm. \nThe main steps of the algorithm are as follows:\n1. Calculate the remaining capacity of each bin by subtracting the item size from the rest capacities of bins.\n2. Calculate the absolute differences between the remaining capacity and the item size.\n3. Square the absolute differences and multiply them by a factor of 1000.\n4. Calculate the reciprocal of the remaining capacity and multiply it by a factor of 100.\n5. Calculate the penalized differences by adding the squared differences, reciprocal capacity, and a large constant value (1e6) multiplied by the absolute differences.\n6. Generate the scores for each bin by comparing the remaining capacity with the item size. If the remaining capacity is greater than or equal to the item size, assign a very high score (1e9), otherwise assign the penalized differences.\n7. Return the scores for the bins.\n\nHere is the implementation of the new algorithm in Python:\n\n```",
          "code": "import numpy as np\n\ndef score(item, bins):\n    remaining_capacity = bins - item\n    differences = np.abs(remaining_capacity - item)\n    squared_differences = 1000 * differences**2\n    reciprocal_capacity = 100 / remaining_capacity\n    penalized_differences = squared_differences + reciprocal_capacity + 1e6 * differences\n    scores = np.where(remaining_capacity >= item, np.full_like(penalized_differences, 1e9), penalized_differences)\n    return scores",
          "objective": 0.01358,
          "other_inf": null
     }
]