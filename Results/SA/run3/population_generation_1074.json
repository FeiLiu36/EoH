[
     {
          "algorithm": "\nThe new algorithm calculates the score for each bin by taking the product of the remaining capacity and the logarithm of the remaining capacity divided by the maximum capacity, then multiplying it by the bin index raised to the power of the item size, and assigning maximum scores for bins with remaining capacity equal to or greater than the item size, while also adjusting the scores based on the item size and the remaining capacity ratio, to promote performance and minimize the number of used bins.\n",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    remaining_capacity = bins - item\n    max_capacity = np.max(bins)\n    \n    # Calculate the score for each bin\n    scores = (remaining_capacity ** 2) * (np.log(remaining_capacity / max_capacity) ** 3) * (np.arange(len(bins), 0, -1) ** item)\n    \n    # Adjust the scores based on the item size and remaining capacity ratio\n    item_ratio = item / max_capacity\n    scores -= scores * item_ratio\n    \n    # Assign maximum scores for bins with remaining capacity >= item size\n    scores = np.where(remaining_capacity >= item, np.inf, scores)\n    \n    return scores",
          "objective": 0.01268,
          "other_inf": null
     }
]