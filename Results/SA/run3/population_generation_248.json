[
     {
          "algorithm": "New Algorithm Description: The new algorithm assigns a score to each bin based on the remaining capacity and item size, giving higher scores to bins with more available capacity and bins that can accommodate the item size without being too close to maximum capacity. It also penalizes bins with lower remaining capacity than the item size to prevent overloading. Additionally, the algorithm incorporates a proximity score that assigns higher scores to bins that have less remaining capacity relative to their maximum capacity.\n\nCode:\n\n```",
          "code": "import numpy as np\n\ndef score(item, bins):\n    remaining_capacity = bins - item\n    \n    # Calculate the penalty for bins with remaining capacity close to the maximum capacity\n    capacity_penalty = np.exp(-(remaining_capacity - bins) / item) * np.logical_not(remaining_capacity == bins)\n    \n    # Calculate the score for capacity\n    capacity_score = np.exp(-remaining_capacity / item) + capacity_penalty\n    \n    # Calculate the score for proximity to maximum capacity\n    proximity_score = np.exp(-(remaining_capacity - bins) / bins)\n    \n    # Calculate the reward for bins with item size close to the remaining capacity\n    size_reward = np.exp((item - remaining_capacity) / bins) * np.logical_not(item == remaining_capacity)\n    \n    # Calculate the score for size\n    size_score = np.exp(item / remaining_capacity) + size_reward\n    \n    # Calculate the penalty for bins with lower remaining capacity than item size\n    capacity_diff_penalty = np.exp(-(item - remaining_capacity))\n    \n    # Calculate the proximity penalty for bins with less remaining capacity relative to their maximum capacity\n    proximity_penalty = np.exp((bins - remaining_capacity) / bins)\n    \n    # Calculate the final scores\n    scores = np.where(remaining_capacity >= item, np.full_like(remaining_capacity, 1e9),\n                     capacity_score + size_score + proximity_score + capacity_diff_penalty + proximity_penalty)\n    \n    return scores",
          "objective": 0.01197,
          "other_inf": null
     }
]