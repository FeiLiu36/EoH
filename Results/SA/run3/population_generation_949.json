[
     {
          "algorithm": "New algorithm: The modified algorithm calculates the score for each bin by taking the ratio between the item size and the remaining capacity, then multiplying it with the ratio between the square root of the remaining capacity and the maximum capacity, finally dividing the score by the sum of the square root of the item size and the square root of the maximum capacity.\n\nCode:\n",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    remaining_capacity = bins - item\n\n    # Calculate the score for each bin\n    ratio = item / remaining_capacity\n    ratio2 = np.sqrt(remaining_capacity) / np.max(bins)\n    scores = (ratio * ratio2) / (np.sqrt(item) + np.sqrt(np.max(bins)))\n\n    # Assign maximum scores for bins with remaining capacity >= item size\n    scores = np.where(remaining_capacity >= item, np.inf, scores)\n\n    return scores",
          "objective": 0.01358,
          "other_inf": null
     }
]