[
     {
          "algorithm": "New algorithm: \n1. Calculate the reciprocal of the remaining capacity.\n2. Multiply the reciprocal by a factor of 1000.\n3. Calculate the logarithm of the absolute differences between the remaining capacity and the item size.\n4. Multiply the logarithm by a factor of 100.\n5. Calculate the penalized differences by adding the multiplied reciprocal, squared differences, and a large constant value (1e6) multiplied by the absolute differences.\n6. Generate the scores for each bin by comparing the remaining capacity with the item size. If the remaining capacity is greater than or equal to the item size, assign a very high score (1e9), otherwise assign the penalized differences.\n7. Return the scores for the bins.\n\nCode:\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    remaining_capacity = bins - item\n    reciprocal_capacity = 1000 / remaining_capacity\n    logarithm_differences = np.log(np.abs(remaining_capacity - item))\n    multiplied_logarithm = 100 * logarithm_differences\n    penalized_differences = reciprocal_capacity + multiplied_logarithm + 1e6 * np.abs(remaining_capacity - item)\n    scores = np.where(remaining_capacity >= item, np.full_like(penalized_differences, 1e9), penalized_differences)\n    return scores",
          "objective": 0.01358,
          "other_inf": null
     }
]