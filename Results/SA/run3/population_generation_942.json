[
     {
          "algorithm": "New algorithm: The modified algorithm calculates the score for each bin by taking the product of the ratio between the remaining capacity and the item size, and the logarithm of the ratio between the remaining capacity and the maximum capacity, then subtracting the square root of the remaining capacity, finally dividing the score by the square root of the item size plus the square root of the maximum capacity.\n\nCode:\n```",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    remaining_capacity = bins - item\n\n    # Calculate the score for each bin\n    ratio = remaining_capacity / item\n    log = np.log(remaining_capacity / bins)\n    sqrt = np.sqrt(remaining_capacity)\n    scores = (ratio * log - sqrt) / (np.sqrt(item) + np.sqrt(np.max(bins)))\n\n    # Assign maximum scores for bins with remaining capacity >= item size\n    scores = np.where(remaining_capacity >= item, np.inf, scores)\n\n    return scores",
          "objective": 0.01358,
          "other_inf": null
     }
]