[
     {
          "algorithm": "New Algorithm: In the modified algorithm, the score for each bin is calculated by taking the square root of the ratio between the remaining capacity and the item size, then multiplying it by the logarithm of the ratio between the item size and the maximum capacity, finally multiplying it by the natural logarithm of the remaining capacity.\n\nCode:\n\n```",
          "code": "import numpy as np\nimport math\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    remaining_capacity = bins - item\n\n    # Calculate the score for each bin\n    ratio = remaining_capacity / item\n    ratio_sqrt = np.sqrt(remaining_capacity / item)\n    ratio_log = np.log(item / np.max(bins))\n    remaining_log = np.log(remaining_capacity)\n    scores = ratio_sqrt * ratio_log * remaining_log\n    \n    # Assign maximum scores for bins with remaining capacity >= item size\n    scores = np.where(remaining_capacity >= item, np.inf, scores)\n\n    return scores",
          "objective": 0.01358,
          "other_inf": null
     }
]