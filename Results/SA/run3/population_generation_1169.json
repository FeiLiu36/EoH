[
     {
          "algorithm": "New algorithm description: The modified algorithm calculates the score for each bin by multiplying the remaining capacity ratio with the logarithm of the bin's index, dividing it by the square root of the remaining capacity, and further multiplying it with the logarithm of the remaining capacity. It assigns the maximum score for bins with remaining capacity greater than or equal to the item size, and adjusts the scores based on the difference between the remaining capacity ratio and the square root of the bin index. The scores are then multiplied by the square root of the bin index, and a penalty is added to the scores for bins that have remaining capacity less than the item size and the remaining capacity ratio is less than or equal to 0.8. In addition, a penalty is also added to the scores for bins that have remaining capacity ratio below a certain threshold ratio.\n\nCode:\n\n```",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    remaining_capacity = bins - item\n    max_capacity = np.max(bins)\n    remaining_capacity_ratio = remaining_capacity / max_capacity\n    \n    # Calculate the score for each bin\n    scores = (remaining_capacity_ratio * np.log(np.arange(len(bins), 0, -1))) / (np.sqrt(remaining_capacity) * np.log(remaining_capacity))\n    \n    # Adjust the scores based on the difference between the remaining capacity ratio and the square root of the bin index\n    scores -= (remaining_capacity_ratio - np.sqrt(np.arange(len(bins), 0, -1)))\n    \n    # Assign maximum scores for bins with remaining capacity >= item size\n    scores = np.where(remaining_capacity >= item, np.inf, scores)\n    \n    # Multiply scores by square root of bin index\n    scores *= np.sqrt(np.arange(len(bins)))\n    \n    # Penalty for bins with remaining capacity less than item size and ratio <= 0.8\n    scores -= np.where((remaining_capacity < item) & (remaining_capacity_ratio <= 0.8), np.log(item), 0)\n    \n    # Additional penalty for bins with low remaining capacity ratio\n    threshold_ratio = 0.5\n    scores -= np.where(remaining_capacity_ratio < threshold_ratio, np.log(1 + threshold_ratio - remaining_capacity_ratio), 0)\n    \n    return scores",
          "objective": 0.00976,
          "other_inf": null
     }
]