[
     {
          "algorithm": "The new algorithm calculates the score for each bin by taking the cube root of the item size divided by the square root of the remaining capacity, multiplied by a constant factor. The constant factor is chosen to optimize the scoring function.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    remaining_capacity = bins - item\n\n    # Define constant factor\n    constant_factor = 1.5\n\n    # Calculate the score for each bin\n    ratios = (item ** (1/3)) / np.sqrt(remaining_capacity)\n    scores = ratios * constant_factor\n\n    # Assign maximum scores for bins with remaining capacity >= item size\n    scores = np.where(remaining_capacity >= item, np.inf, scores)\n\n    return scores",
          "objective": 0.0157,
          "other_inf": null
     }
]