[
     {
          "algorithm": "Algorithm description: The new algorithm calculates the score for each bin by taking the reciprocal of the remaining capacity multiplied by the item size, applying a logarithmic function to this reciprocal value, multiplying it by a constant factor and subtracting it from the ratio between the remaining capacity and the maximum capacity, while also considering the ratio between the item size and the remaining capacity as a penalty factor.\n\nCode:\n\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    remaining_capacity = bins - item\n\n    # Define constant factor\n    constant_factor = 0.7\n\n    # Calculate the score for each bin\n    reciprocal = 1 / (remaining_capacity * item)\n    log_reciprocal = np.log(reciprocal)\n    penalty_factor = item / remaining_capacity\n    scores = reciprocal - (log_reciprocal * constant_factor * penalty_factor)\n\n    # Assign maximum scores for bins with remaining capacity >= item size\n    scores = np.where(remaining_capacity >= item, np.inf, scores)\n\n    return scores",
          "objective": 0.01358,
          "other_inf": null
     }
]