[
     {
          "algorithm": "Algorithm description: My new algorithm assigns a score to each bin based on the difference between the remaining capacity and the item size, penalizing bins with lower remaining capacity, and also taking into account the difference between the item size and the remaining capacity.\n\nCode:\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    remaining_capacity = bins - item\n\n    # Calculate the penalty for bins with lower remaining capacity than the item size\n    remaining_capacity_penalty = np.log(item / remaining_capacity)\n\n    # Calculate the difference between the item size and the remaining capacity\n    size_difference = item - remaining_capacity\n\n    # Calculate the score for capacity based on remaining capacity, penalty, and size difference\n    capacity_score = remaining_capacity + remaining_capacity_penalty + size_difference\n\n    # Calculate the final scores\n    scores = np.where(remaining_capacity >= item, 1e9, capacity_score)\n\n    return scores",
          "objective": 0.01358,
          "other_inf": null
     }
]