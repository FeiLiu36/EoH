[
     {
          "algorithm": "New Algorithm: In the modified algorithm, the score for each bin is calculated by taking the log base 2 of the ratio between the item size and the remaining capacity, then raising it to the power of e (the base of natural logarithm), multiplying it by the square root of the remaining capacity divided by the maximum capacity, finally adding a constant term and subtracting the natural logarithm of the item size.\n\nCode:\n\n```",
          "code": "import numpy as np\nimport math\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    remaining_capacity = bins - item\n\n    # Calculate the score for each bin\n    ratio = item / remaining_capacity\n    ratio_log2 = np.log2(ratio)\n    ratio_log2_e = np.power(ratio_log2, math.e)\n    ratio2 = np.sqrt(remaining_capacity) / np.sqrt(np.max(bins))\n    scores = ratio_log2_e * ratio2 + 10 - np.log(item)\n\n    # Assign maximum scores for bins with remaining capacity >= item size\n    scores = np.where(remaining_capacity >= item, np.inf, scores)\n\n    return scores",
          "objective": 0.01358,
          "other_inf": null
     }
]