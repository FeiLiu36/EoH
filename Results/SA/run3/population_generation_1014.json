[
     {
          "algorithm": "New Algorithm: The score for each bin is calculated by taking the ratio between the remaining capacity and the item size, then multiplying it by the logarithm of the ratio between the item size and the maximum capacity, and finally multiplying it by the natural logarithm of the remaining capacity. Additionally, for bins with half or more remaining capacity, the scores are halved to encourage the use of bins with less remaining capacity.\n\nHere is the implementation of the score function:\n\n```",
          "code": "import numpy as np\nimport math\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    remaining_capacity = bins - item\n\n    # Calculate the score for each bin\n    ratio = remaining_capacity / item\n    ratio_log = np.log(item / np.max(bins))\n    remaining_log = np.log(remaining_capacity)\n    scores = ratio * ratio_log * remaining_log\n    \n    # Halve the scores for bins with half or more remaining capacity\n    scores = np.where(remaining_capacity >= 0.5 * bins, scores / 2, scores)\n    \n    # Assign maximum scores for bins with remaining capacity >= item size\n    scores = np.where(remaining_capacity >= item, np.inf, scores)\n\n    return scores",
          "objective": 0.01358,
          "other_inf": null
     }
]