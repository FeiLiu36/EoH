[
     {
          "algorithm": "New Algorithm Description: Algorithm: Improved algorithm with additional steps\n\n1. Calculate the ratio between the remaining capacity and the item size, raised to the power of 2 and multiplied by a factor of 200.\n2. Calculate the cube of the absolute difference between the logarithms of the remaining capacity divided by the item size and a constant value (3), and multiply it by a factor of 100.\n3. Generate the scores for each bin by comparing the remaining capacity with the item size. If the remaining capacity is greater than or equal to the item size, assign a high score (1e7), otherwise assign the maximum value between the sum of the ratio and the squared absolute difference, and the sum of the ratio and the cube of the logarithm difference, and multiply it by a factor of 20.\n4. Multiply the scores by a factor of 0.8, raise it to the power of the inverse of the item size, and round it to the nearest integer.\n5. Return the scores for the bins.\n\nCode:\n\n```",
          "code": "import numpy as np\n\ndef score(item, bins):\n    remaining_capacity = bins - item\n    ratio = 200 * (remaining_capacity / item)**2\n    logarithm_difference = np.abs(np.log(remaining_capacity / item) - 3)\n    cubed_difference = 100 * np.power(logarithm_difference, 3)\n    scores = np.where(remaining_capacity >= item, np.full_like(remaining_capacity, 1e7), 20 * np.maximum(ratio + cubed_difference, ratio + np.square(logarithm_difference)))\n    scores = np.round(scores * 0.8**(1/item))\n    return scores",
          "objective": 0.01358,
          "other_inf": null
     }
]