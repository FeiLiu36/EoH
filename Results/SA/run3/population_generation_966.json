[
     {
          "algorithm": "New algorithm: The modified algorithm calculates the score for each bin by taking the square root of the ratio between the item size and the remaining capacity, then raising it to the power of pi, where pi is a mathematical constant, multiplying it by the square root of the remaining capacity divided by the maximum capacity, finally subtracting the natural logarithm of the item size.\n\nCode:\n```",
          "code": "import numpy as np\nimport math\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    remaining_capacity = bins - item\n\n    # Calculate the score for each bin\n    ratio = item / remaining_capacity\n    ratio_sqrt = np.sqrt(ratio)\n    ratio_pi = np.power(ratio_sqrt, np.pi)\n    ratio2 = np.sqrt(remaining_capacity) / np.sqrt(np.max(bins))\n    scores = ratio_pi * ratio2 - np.log(item)\n\n    # Assign maximum scores for bins with remaining capacity >= item size\n    scores = np.where(remaining_capacity >= item, np.inf, scores)\n\n    return scores",
          "objective": 0.01358,
          "other_inf": null
     }
]