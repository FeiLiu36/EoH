[
     {
          "algorithm": "New Algorithm Description: The new algorithm calculates the score for each bin by dividing the remaining capacity ratio of the bin by the square root of the bin index, multiplying it with the logarithm of the remaining capacity ratio, and further multiplying it with the cube root of the remaining capacity ratio. It assigns maximum scores for bins with remaining capacity greater than or equal to the item size and adjusts the scores based on the difference between the remaining capacity ratio and the logarithm of the bin index. The scores are then multiplied by the cubic root of the bin index, and a penalty is added to the scores for bins that have remaining capacity less than the item size and the remaining capacity ratio is less than or equal to 0.9.\n\nHere's the implementation of the new algorithm in Python:\n\n```",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    remaining_capacity = bins - item\n    max_capacity = np.max(bins)\n    remaining_capacity_ratio = remaining_capacity / max_capacity\n    \n    # Calculate the score for each bin\n    scores = remaining_capacity_ratio / np.sqrt(np.arange(len(bins), 0, -1)) * np.log(remaining_capacity_ratio) * np.cbrt(remaining_capacity_ratio)\n    \n    # Adjust the scores based on the difference between the remaining capacity ratio and the logarithm of the bin index\n    scores -= (remaining_capacity_ratio - np.log(np.arange(len(bins), 0, -1)))\n    \n    # Assign maximum scores for bins with remaining capacity >= item size\n    scores = np.where(remaining_capacity >= item, np.inf, scores)\n    \n    # Multiply scores by cubic root of bin index\n    scores *= np.cbrt(np.arange(len(bins)))\n    \n    # Penalty for bins with remaining capacity less than item size and ratio <= 0.9\n    scores -= np.where((remaining_capacity < item) & (remaining_capacity_ratio <= 0.9), np.log(item), 0)\n    \n    return scores",
          "objective": 0.01157,
          "other_inf": null
     }
]