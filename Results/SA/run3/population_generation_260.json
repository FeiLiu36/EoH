[
     {
          "algorithm": "My new algorithm assigns a score to each bin based on the remaining capacity, item size, and a penalty term that penalizes bins with lower remaining capacity. The algorithm aims to maximize the score for bins that have more available capacity and are closer in size to the remaining capacity of the bin.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    remaining_capacity = bins - item\n\n    # Calculate the penalty for bins with lower remaining capacity than the item size\n    remaining_capacity_penalty = np.log(item / remaining_capacity)\n\n    # Calculate the score for capacity based on remaining capacity and penalty\n    capacity_score = item - remaining_capacity + remaining_capacity_penalty\n\n    # Calculate the score for size based on item size and remaining capacity\n    size_score = item**2 / remaining_capacity\n\n    # Calculate the final scores\n    scores = np.where(remaining_capacity >= item, 1e9, capacity_score + size_score)\n\n    return scores",
          "objective": 0.01358,
          "other_inf": null
     }
]