[
     {
          "algorithm": "The new algorithm calculates the score for each bin by taking the reciprocal of the remaining capacity multiplied by the item size, applying a square root function to this reciprocal value, multiplying it by a constant factor, and subtracting it from the ratio between the remaining capacity and the maximum capacity, while also considering the coefficient of variation of the remaining capacities for all bins as a penalty factor.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    remaining_capacity = bins - item\n\n    # Define constant factor\n    constant_factor = 0.7\n\n    # Calculate the score for each bin\n    reciprocal = 1 / (remaining_capacity * item)\n    sqrt_reciprocal = np.sqrt(reciprocal)\n    penalty_factor = np.std(remaining_capacity) / np.mean(remaining_capacity)\n    scores = reciprocal - (sqrt_reciprocal * constant_factor * penalty_factor)\n\n    # Assign maximum scores for bins with remaining capacity >= item size\n    scores = np.where(remaining_capacity >= item, np.inf, scores)\n\n    return scores",
          "objective": 0.01358,
          "other_inf": null
     }
]