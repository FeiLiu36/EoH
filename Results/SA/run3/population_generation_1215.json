[
     {
          "algorithm": "The new algorithm calculates the score for each bin by taking the inverse of the remaining capacity ratio raised to the power of the bin index, dividing it by the remaining capacity, and further multiplying it with the logarithm of the remaining capacity. It assigns the maximum score for bins with remaining capacity greater than or equal to the item size, and adjusts the scores based on the difference between the remaining capacity ratio and the square root of the bin index. The scores are then multiplied by the square root of the bin index, and a penalty is added to the scores for bins that have remaining capacity less than the item size and for bins that have remaining capacity ratio below a certain threshold ratio.",
          "code": "import numpy as np\n\ndef score(item: int, bins: np.ndarray) -> np.ndarray:\n    remaining_capacity = bins - item\n    max_capacity = np.max(bins)\n\n    remaining_capacity_ratio = remaining_capacity / max_capacity\n\n    # Calculate the score for each bin\n    scores = (1 / (remaining_capacity_ratio ** np.arange(len(bins)))) / (remaining_capacity * np.log(remaining_capacity))\n\n    # Adjust the scores based on the difference between the remaining capacity ratio and the square root of the bin index\n    scores -= (remaining_capacity_ratio - np.sqrt(np.arange(len(bins), 0, -1)))\n\n    # Assign maximum scores for bins with remaining capacity >= item size\n    scores = np.where(remaining_capacity >= item, np.inf, scores)\n\n    # Multiply scores by the square root of bin index\n    scores *= np.sqrt(np.arange(len(bins)))\n\n    # Penalty for bins with remaining capacity less than item size\n    scores -= np.where(remaining_capacity < item, np.log(item), 0)\n\n    # Additional penalty for bins with low remaining capacity ratio\n    threshold_ratio = 0.5\n    scores -= np.where(remaining_capacity_ratio < threshold_ratio, np.log(1 + threshold_ratio - remaining_capacity_ratio), 0)\n\n    return scores",
          "objective": 0.00976,
          "other_inf": null
     }
]