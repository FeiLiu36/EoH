[
     {
          "algorithm": "My new algorithm assigns an item to the bin with the maximum score and updates the rest capacity of the bin accordingly, until all items are assigned. The score for each bin is calculated as a weighted sum of the bin's current capacity, the difference between the bin's capacity and the item size, the number of times the bin has been used, and the bin's current capacity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    normalized_remaining_capacities = (bins - item) / item\n    normalized_capacities = bins / item\n    scores = normalized_remaining_capacities / normalized_remaining_capacities.min() + normalized_capacities / normalized_capacities.min() + np.arange(len(bins))\n    return scores",
          "objective": 0.01197,
          "other_inf": null
     },
     {
          "algorithm": "\nThe algorithm assigns an item to the bin with the maximum score and updates the rest capacity of the bin accordingly, until all items are assigned. The score for each bin is calculated as the bin's current capacity divided by the difference between the bin's capacity and the item size, plus the number of times the bin has been used.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    normalized_remaining_capacities = bins - item\n    scores = normalized_remaining_capacities / normalized_remaining_capacities.min() + np.arange(len(bins))\n    return scores",
          "objective": 0.01328,
          "other_inf": null
     },
     {
          "algorithm": "Calculate scores using a combination of normalized capacity, item size, bin index, and a penalty for bins with low remaining capacity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    normalized_capacity = bins / max_capacity\n    normalized_item = item / max_capacity\n    bin_index = np.arange(len(bins))\n    penalty = 1 - (bins - item) / (bins - item + 1)\n    scores = normalized_capacity + normalized_item + np.sqrt(bin_index) + penalty\n    return scores",
          "objective": 0.01821,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm is inspired by the idea of combining multiplication and addition operations to calculate the scores, but it introduces a unique formulation involving the reciprocal of a complex term and a weighted sum of bin properties.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    normalized_remaining_capacities = bins - item / bins\n    normalized_item_size = item / bins.max()\n    scores = bins / (bins - item) + (normalized_remaining_capacities * (1 - normalized_item_size)) + np.arange(len(bins))\n    return scores",
          "objective": 0.01881,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm finds the score of each bin utilizing the sum of the normalized remaining capacity, the reciprocal of the remaining capacity, the current capacity, and the number of utilized bins, all divided by their respective maximum values.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    normalized_remaining_capacities = (bins - item) / (bins - item).max()\n    reciprocal_remaining_capacities = (bins - item) / (bins - item).max() * np.log2(bins - item)\n    scores = normalized_remaining_capacities + reciprocal_remaining_capacities + bins / bins.max() + np.arange(len(bins))\n    return scores",
          "objective": 0.01962,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Assign an item to the bin with the maximum score calculated as the square of the bin's current capacity divided by the difference between the bin's capacity and the item size, plus the number of times the bin has been used, plus the square of the bin's distance to the center of bins.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    normalized_remaining_capacities = (bins - item) / item\n    distances_to_the_center = np.abs(bins - np.mean(bins)) / np.std(bins)\n    scores = (normalized_remaining_capacities**2) / normalized_remaining_capacities.min() + np.arange(len(bins)) + (distances_to_the_center**2)\n    return scores",
          "objective": 0.01972,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm assigns an item to the bin with the maximum score and updates the rest capacity of the bin accordingly, until all items are assigned. The score for each bin is calculated as the square of the bin's current capacity divided by the difference between the bin's capacity and the item size, plus the number of times the bin has been used.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    normalized_remaining_capacities = (bins - item) / item\n    scores = (normalized_remaining_capacities**2) / normalized_remaining_capacities.min() + np.arange(len(bins))\n    return scores",
          "objective": 0.02183,
          "other_inf": null
     },
     {
          "algorithm": "New Algorithm: Assign an item to the bin with the maximum score by penalizing bins with small ratio of rest capacity to maximum capacity, rewarding smaller bin indexes, and considering the quadratic ratio of the item size to the maximum capacity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    normalized_capacity = bins / np.max(bins)\n    normalized_item = item / np.max(bins)\n    bin_index = np.arange(len(bins))\n    penalty = 1 - (bins - item) / (bins - item + 1)\n    scores = normalized_capacity - normalized_item**2 + 1 / np.sqrt(bin_index + 1) + penalty\n    return scores",
          "objective": 0.03079,
          "other_inf": null
     },
     {
          "algorithm": "Assign an item to the bin with the maximum score by penalizing bins with low remaining capacity and rewarding smaller bin indexes, while considering the ratio of the item size to the maximum capacity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    normalized_capacity = bins / np.max(bins)\n    normalized_item = item / np.max(bins)\n    bin_index = np.arange(len(bins))\n    penalty = 1 - (bins - item) ** 2 / (bins - item + 1) ** 2\n    scores = normalized_capacity - normalized_item + 1 / np.sqrt(bin_index + 1) + penalty\n    return scores",
          "objective": 0.03481,
          "other_inf": null
     },
     {
          "algorithm": "The new score function assigns a higher score to bins with relatively larger rest capacity while considering the item size, encouraging diversity and avoiding early saturation of bins.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    normalized_remaining_capacities = (bins - item) / item\n    scores = normalized_remaining_capacities / np.power(normalized_remaining_capacities, 1 + item / bins) + np.arange(len(bins))\n    return scores",
          "objective": 0.03783,
          "other_inf": null
     },
     {
          "algorithm": "Calculate each bin's score by multiplying the bin's current load by the reciprocal of the difference between the bin's capacity and the item size, plus the number of times the bin has been used.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = bins / (bins - item + 1) + np.arange(len(bins))\n    return scores",
          "objective": 0.03833,
          "other_inf": null
     },
     {
          "algorithm": "\nThe algorithm assigns an item to the bin with the maximum score and updates the rest capacity of the bin accordingly, until all items are assigned. The score for each bin is calculated as the bin's current capacity divided by the difference between the bin's capacity and the item size, plus the number of times the bin has been used.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = bins / (bins - item) + np.arange(len(bins))\n    return scores",
          "objective": 0.03843,
          "other_inf": null
     },
     {
          "algorithm": "Utilizes a weighted sum of the normalized bin capacities, the number of items in each bin, and a penalty term for bins with less remaining capacity",
          "code": "import numpy as np\n\ndef score(item, bins):\n  normalized_capacities = bins - item\n  num_items_in_bin = np.arange(len(bins)) + 1\n  penalty = 1 / (normalized_capacities + 1)\n  scores = 0.5 * normalized_capacities / max(bins) + 0.3 * penalty + 0.2 * num_items_in_bin\n  return scores",
          "objective": 0.03864,
          "other_inf": null
     },
     {
          "algorithm": "A modified algorithm using a weighted sum of normalized bin capacities, the reciprocal of remaining capacity, and a preference for bins with fewer items assigned",
          "code": "import numpy as np\n\ndef score(item, bins):\n  normalized_capacities = bins - item\n  reciprocal_remaining_capacity = bins / (bins - item)\n  num_items_in_bin = np.arange(len(bins)) + 1\n  scores = 0.5 * normalized_capacities / max(bins) + 0.3 * reciprocal_remaining_capacity + 0.2 * num_items_in_bin\n  return scores",
          "objective": 0.03874,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm calculates the score of a bin by multiplying the bin's current load by the reciprocal of the difference between the bin's capacity and the item size, plus a random number that is drawn from a uniform distribution.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = (bins / (bins - item + 1)) + np.random.uniform(0, 1, len(bins))\n    return scores",
          "objective": 0.03884,
          "other_inf": null
     },
     {
          "algorithm": "Calculate each bin's score by multiplying the bin's current load by the reciprocal of the difference between the bin's capacity and the item size, plus the reciprocal of the number of times the bin has been used.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = bins / (bins - item + 1) + 1 / (np.arange(len(bins))+1)\n    return scores",
          "objective": 0.03894,
          "other_inf": null
     },
     {
          "algorithm": "\nThe algorithm assigns an item to the bin with the maximum score, considering the rest capacity of each bin, in order to minimize the number of used bins. \n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.zeros_like(bins)\n    scores[bins != bins.max()] = item / (bins[bins != bins.max()] - item + 1)\n    return scores",
          "objective": 0.03914,
          "other_inf": null
     },
     {
          "algorithm": "Adjust weights of the existing score function to prioritize bins with fewer items and larger remaining capacities.",
          "code": "import numpy as np\n\ndef score(item, bins):\n  normalized_capacities = bins - item\n  reciprocal_remaining_capacity = bins / (bins - item)\n  num_items_in_bin = np.arange(len(bins)) + 1\n  scores = 0.6 * normalized_capacities / max(bins) + 0.3 * reciprocal_remaining_capacity - 0.1 * num_items_in_bin\n  return scores",
          "objective": 0.03924,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm calculates a bin's score as the sum of the bin's current capacity divided by the difference between the bin's capacity and the item size and the bin's previous total fill percentage, multiplied by the number of items assigned to the bin.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = bins / (bins - item) + bins / bins.max()\n    scores = scores * (np.arange(1, len(bins) + 1))\n    return scores",
          "objective": 0.03934,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm assigns an item to the bin with the maximum score and updates the rest capacity of the bin accordingly, until all items are assigned. The score for each bin is calculated as the bin's current capacity divided by the difference between the bin's capacity and the item size, plus the bin's previous total fill percentage.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = bins / (bins - item) + bins / bins.max()\n    return scores",
          "objective": 0.03954,
          "other_inf": null
     }
]