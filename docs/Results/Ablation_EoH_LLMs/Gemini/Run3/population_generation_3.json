[
     {
          "algorithm": "My new algorithm assigns an item to the bin with the maximum score and updates the rest capacity of the bin accordingly, until all items are assigned. The score for each bin is calculated as a weighted sum of the bin's current capacity, the difference between the bin's capacity and the item size, the number of times the bin has been used, and the bin's current capacity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    normalized_remaining_capacities = (bins - item) / item\n    normalized_capacities = bins / item\n    scores = normalized_remaining_capacities / normalized_remaining_capacities.min() + normalized_capacities / normalized_capacities.min() + np.arange(len(bins))\n    return scores",
          "objective": 0.01197,
          "other_inf": null
     },
     {
          "algorithm": "\nThe algorithm assigns an item to the bin with the maximum score and updates the rest capacity of the bin accordingly, until all items are assigned. The score for each bin is calculated as the bin's current capacity divided by the difference between the bin's capacity and the item size, plus the number of times the bin has been used.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    normalized_remaining_capacities = bins - item\n    scores = normalized_remaining_capacities / normalized_remaining_capacities.min() + np.arange(len(bins))\n    return scores",
          "objective": 0.01328,
          "other_inf": null
     },
     {
          "algorithm": "Calculate scores using a combination of normalized capacity, item size, bin index, and a penalty for bins with low remaining capacity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    normalized_capacity = bins / max_capacity\n    normalized_item = item / max_capacity\n    bin_index = np.arange(len(bins))\n    penalty = 1 - (bins - item) / (bins - item + 1)\n    scores = normalized_capacity + normalized_item + np.sqrt(bin_index) + penalty\n    return scores",
          "objective": 0.01821,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm assigns an item to the bin with the maximum score and updates the rest capacity of the bin accordingly, until all items are assigned. The score for each bin is calculated as the square of the bin's current capacity divided by the difference between the bin's capacity and the item size, plus the number of times the bin has been used.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    normalized_remaining_capacities = (bins - item) / item\n    scores = (normalized_remaining_capacities**2) / normalized_remaining_capacities.min() + np.arange(len(bins))\n    return scores",
          "objective": 0.02183,
          "other_inf": null
     },
     {
          "algorithm": "Assign an item to the bin with the maximum score by penalizing bins with low remaining capacity and rewarding smaller bin indexes, while considering the ratio of the item size to the maximum capacity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    normalized_capacity = bins / np.max(bins)\n    normalized_item = item / np.max(bins)\n    bin_index = np.arange(len(bins))\n    penalty = 1 - (bins - item) ** 2 / (bins - item + 1) ** 2\n    scores = normalized_capacity - normalized_item + 1 / np.sqrt(bin_index + 1) + penalty\n    return scores",
          "objective": 0.03481,
          "other_inf": null
     },
     {
          "algorithm": "The new score function assigns a higher score to bins with relatively larger rest capacity while considering the item size, encouraging diversity and avoiding early saturation of bins.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    normalized_remaining_capacities = (bins - item) / item\n    scores = normalized_remaining_capacities / np.power(normalized_remaining_capacities, 1 + item / bins) + np.arange(len(bins))\n    return scores",
          "objective": 0.03783,
          "other_inf": null
     },
     {
          "algorithm": "Calculate each bin's score by multiplying the bin's current load by the reciprocal of the difference between the bin's capacity and the item size, plus the number of times the bin has been used.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = bins / (bins - item + 1) + np.arange(len(bins))\n    return scores",
          "objective": 0.03833,
          "other_inf": null
     },
     {
          "algorithm": "\nThe algorithm assigns an item to the bin with the maximum score and updates the rest capacity of the bin accordingly, until all items are assigned. The score for each bin is calculated as the bin's current capacity divided by the difference between the bin's capacity and the item size, plus the number of times the bin has been used.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = bins / (bins - item) + np.arange(len(bins))\n    return scores",
          "objective": 0.03843,
          "other_inf": null
     },
     {
          "algorithm": "Utilizes a weighted sum of the normalized bin capacities, the number of items in each bin, and a penalty term for bins with less remaining capacity",
          "code": "import numpy as np\n\ndef score(item, bins):\n  normalized_capacities = bins - item\n  num_items_in_bin = np.arange(len(bins)) + 1\n  penalty = 1 / (normalized_capacities + 1)\n  scores = 0.5 * normalized_capacities / max(bins) + 0.3 * penalty + 0.2 * num_items_in_bin\n  return scores",
          "objective": 0.03864,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm calculates the score of a bin by multiplying the bin's current load by the reciprocal of the difference between the bin's capacity and the item size, plus a random number that is drawn from a uniform distribution.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = (bins / (bins - item + 1)) + np.random.uniform(0, 1, len(bins))\n    return scores",
          "objective": 0.03884,
          "other_inf": null
     },
     {
          "algorithm": "Calculate each bin's score by multiplying the bin's current load by the reciprocal of the difference between the bin's capacity and the item size, plus the reciprocal of the number of times the bin has been used.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = bins / (bins - item + 1) + 1 / (np.arange(len(bins))+1)\n    return scores",
          "objective": 0.03894,
          "other_inf": null
     },
     {
          "algorithm": "\nThe algorithm assigns an item to the bin with the maximum score, considering the rest capacity of each bin, in order to minimize the number of used bins. \n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.zeros_like(bins)\n    scores[bins != bins.max()] = item / (bins[bins != bins.max()] - item + 1)\n    return scores",
          "objective": 0.03914,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm calculates a bin's score as the sum of the bin's current capacity divided by the difference between the bin's capacity and the item size and the bin's previous total fill percentage, multiplied by the number of items assigned to the bin.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = bins / (bins - item) + bins / bins.max()\n    scores = scores * (np.arange(1, len(bins) + 1))\n    return scores",
          "objective": 0.03934,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm assigns an item to the bin with the maximum score and updates the rest capacity of the bin accordingly, until all items are assigned. The score for each bin is calculated as the bin's current capacity divided by the difference between the bin's capacity and the item size, plus the bin's previous total fill percentage.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = bins / (bins - item) + bins / bins.max()\n    return scores",
          "objective": 0.03954,
          "other_inf": null
     },
     {
          "algorithm": "Assign items to bins with scores based on the remaining capacity but also incorporate the item size, giving preference to bins that can accommodate the item without leaving too much empty space.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.zeros_like(bins)\n    max_bin = np.max(bins)\n    available_space = bins - item\n    scores[available_space >= 0] = max_bin - (available_space[available_space >= 0] * item / max_bin)\n    return scores",
          "objective": 0.03974,
          "other_inf": null
     },
     {
          "algorithm": "Assign bins inversely proportional to the sum of bin's current capacity and the item size to give precedence to bins with lower current capacities and minimize the usage of additional bins.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = 1 / (bins + item)\n    return scores",
          "objective": 0.03984,
          "other_inf": null
     },
     {
          "algorithm": "`The new algorithm calculates each bin's score by taking the difference between the bin's current capacity and the maximum capacity of the bin, multiplying it by the square root of the bin's load plus one, and dividing by the bin's capacity.`",
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = np.full_like(bins, fill_value=0)\n    for i, bin_capacity in enumerate(bins):\n        if bin_capacity != max_capacity:\n            scores[i] = (max_capacity - bin_capacity) * np.sqrt(bin_capacity + 1) / bin_capacity\n    return scores",
          "objective": 0.04004,
          "other_inf": null
     },
     {
          "algorithm": "Calculate each bin's score by multiplying the bin's current load by the reciprocal of the bin's remaining capacity, exponentially penalized by a factor that discourages repeated use of the bin.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    normalized_remaining_capacities = (bins - item) / item\n    scores = bins / (bins - item + 1) * np.power(0.5, np.arange(len(bins)))\n    return scores",
          "objective": 0.04014,
          "other_inf": null
     },
     {
          "algorithm": "Prioritizes bins with smaller remaining capacities and larger capacities and uses a polynomial function to calculate scores.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.zeros_like(bins)\n    remaining_capacity = bins - item\n    scores[remaining_capacity < 0] = -1  # Mark bins with not enough capacity as -1\n    scores[remaining_capacity >= 0] = 2 * (np.cos(np.pi * (remaining_capacity[remaining_capacity >= 0] / bins[remaining_capacity >= 0])) + 1)**2 + item / bins[remaining_capacity >= 0]\n    return scores",
          "objective": 0.04035,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm calculates each bin's score by taking the difference between the bin's current capacity and the maximum capacity of the bin, multiplying it by the cubic root of the bin's load plus one, and dividing by the bin's capacity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = np.full_like(bins, fill_value=0)\n    for i, bin_capacity in enumerate(bins):\n        if bin_capacity != max_capacity:\n            scores[i] = (max_capacity - bin_capacity) * np.cbrt(bin_capacity + 1) / bin_capacity\n    return scores",
          "objective": 0.04045,
          "other_inf": null
     }
]