[
     {
          "algorithm": "The new algorithm scores based on the bin's current utilization, the number of times the bin has been used, the cube roots of the difference between the bin's capacity and the item size and the bin's remaining capacity, and the square roots of the bin's maximum capacity and the item size.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = bins / (bins - item + 1) + np.arange(len(bins)) + np.power(bins - item + 1, 1/3) + np.power(bins - item + 1, 1/3) + np.sqrt(bins) * np.sqrt(item)\n    return scores",
          "objective": 0.00986,
          "other_inf": null
     },
     {
          "algorithm": "Score bins based on a weighted sum of the bin's current utilization, the modified number of times the bin has been used, the difference between the bin's capacity and the item size, and the cube root of the bin's remaining capacity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = bins / (bins - item + 1) + 2 * np.arange(len(bins)) + bins - item + np.power(bins - item + 1, 1/3)\n    return scores",
          "objective": 0.01016,
          "other_inf": null
     },
     {
          "algorithm": "Score bins based on a weighted sum of the bin's current utilization, the number of times the bin has been used, the geometric mean of the bin's capacity and the item size, and the cube root of the difference between the bin's capacity and the item size.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = bins / (bins - item + 1) + np.arange(len(bins)) + np.sqrt(bins * item) + np.power(bins - item + 1, 1/3)\n    return scores",
          "objective": 0.01087,
          "other_inf": null
     },
     {
          "algorithm": "Prioritize bins with the lowest surplus capacity relative to item size, considering only bins below the maximum capacity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    surplus = bins - item\n    scores = np.zeros_like(surplus)\n    scores[surplus > 0] = (surplus[surplus > 0] - np.mean(surplus)) / bins[surplus > 0]\n    return scores",
          "objective": 0.01127,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm scores based on the bin's current utilization, the number of times the bin has been used, the cube roots of the difference between the bin's capacity and the item size and the bin's remaining capacity, and the square roots of the bin's maximum capacity and the item size.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = bins / (bins - item + 1) + np.arange(len(bins)) + np.power(bins - item + 1, 1/6) + np.power(bins - item + 1, 1/6) + np.sqrt(bins) * np.sqrt(item)\n    return scores",
          "objective": 0.01147,
          "other_inf": null
     },
     {
          "algorithm": "Scores are computed as the sum of the bin's current utilization, the number of times the bin has been used, and the geometric mean between the item size and the bin's capacity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = bins / (bins - item + 1) + np.arange(len(bins)) + np.sqrt(item * bins)\n    return scores",
          "objective": 0.01227,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm assigns an item to the bin with the maximum score that is calculated as the sum of a term that increases as the bin index increases and a term that increases as the remaining capacity of the bin increases with a power.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.zeros_like(bins)\n    scores[bins >= item] = bins - np.arange(len(bins)) + item / (bins - item + 1)**2\n    return scores",
          "objective": 0.01479,
          "other_inf": null
     },
     {
          "algorithm": "Prioritize bins with the maximum surplus capacity relative to item size, considering only bins below the maximum capacity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    surplus = bins - item\n    scores = np.zeros_like(surplus)\n    scores[surplus > 0] = (surplus[surplus > 0] - np.mean(surplus)) / (bins[surplus > 0] + np.sqrt(item))\n    return scores",
          "objective": 0.01489,
          "other_inf": null
     },
     {
          "algorithm": "Algorithm: Start by calculating a tentative score for each bin by subtracting the bin capacity from the maximum capacity and then dividing the result by the item size. Round the resulting scores down to the nearest integer and, if the rest capacity of a bin is less than or equal to the item size, set its score to 0. Finally, return the scores as a Numpy array.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.ceil((bins - np.max(bins)) / item)\n    scores[bins <= item] = 0\n    return scores",
          "objective": 0.01539,
          "other_inf": null
     },
     {
          "algorithm": "Modify the score function by introducing a parameter 'beta' to control the trade-off between bin utilization and the number of used bins.",
          "code": "import numpy as np\n\ndef score(item, bins, beta=1):\n    scores = np.ceil((beta * (bins - np.max(bins)) - item) / item)\n    scores[bins <= item] = 0\n    return scores",
          "objective": 0.0157,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm scores based on the bin's current utilization, the number of times the bin has been used, the square roots of the difference between the bin's capacity and the item size and the bin's remaining capacity, and the cube roots of the bin's maximum capacity and the item size.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = bins / (bins - item + 1) + np.arange(len(bins)) + np.sqrt(bins - item + 1) + np.sqrt(bins - item + 1) + np.power(bins, 1/3) * np.power(item, 1/3)\n    return scores",
          "objective": 0.0162,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm assigns an item to the bin with the maximum score that is calculated as the sum of a term that increases as the bin index increases and two terms that increase as the remaining capacity of the bin decreases.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.zeros_like(bins)\n    scores[bins >= item] = bins - np.arange(len(bins)) + item / (bins - item + 1) + np.log(bins) / (bins - item + 1)\n    return scores",
          "objective": 0.0163,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm assigns an item to the bin with the maximum score that is calculated as the sum of a term that increases as the bin index increases and a term that increases as the remaining capacity of the bin decreases.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.zeros_like(bins)\n    scores[bins >= item] = bins - np.arange(len(bins)) + item / (bins - item + 1)\n    return scores",
          "objective": 0.0166,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Assigning items according to the bin's utilization percentage, usage count, rest capacity, and difference between the rest capacity and the item size.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = bins / (bins - item + 1) + np.arange(len(bins)) + bins +  np.log((bins - item + 1)/(bins + 1))\n    return scores",
          "objective": 0.0167,
          "other_inf": null
     },
     {
          "algorithm": "My new algorithm considers the sum of the bin's current utilization, the number of times the bin has been used, the bin's remaining capacity and the reciprocal of the difference between the bin's capacity and the item size.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = bins / (bins - item + 1) + np.arange(len(bins)) + bins + 1 / (bins - item + 1)\n    return scores",
          "objective": 0.0169,
          "other_inf": null
     },
     {
          "algorithm": "Consider the sum of the bin's current utilization, the number of times the bin has been used, the bin's remaining capacity, the reciprocal of the difference between the bin's capacity and the item size, and the square root of the difference between the bin's capacity and the item size.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = bins / (bins - item + 1) + np.arange(len(bins)) + bins + 1 / (bins - item + 1) + np.sqrt(bins - item + 1)\n    return scores",
          "objective": 0.0171,
          "other_inf": null
     },
     {
          "algorithm": "My new algorithm calculates the score as the sum of the bin's current utilization, the number of times the bin has been used, the bin's remaining capacity and the square root of the difference between the bin's capacity and the item size.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = bins / (bins - item + 1) + np.arange(len(bins)) + bins\n    return scores",
          "objective": 0.0172,
          "other_inf": null
     },
     {
          "algorithm": "Compute scores based on a weighted sum of the bin's utilization, the number of items that are already in the bin, the difference between the item's size and the remaining capacity of the bin, and the ratio between the item's size and the bin's total capacity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = bins / (bins - item + 1) + np.arange(len(bins)) + bins - item + 1 + (item / bins) ** 3\n    return scores",
          "objective": 0.01731,
          "other_inf": null
     },
     {
          "algorithm": "My new algorithm calculates the score as the sum of the bin's current utilization, the number of times the bin has been used, the bin's remaining capacity, and the logarithm of the difference between the bin's capacity and the item size.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = bins / (bins - item + 1) + np.arange(len(bins)) + bins + np.log(bins - item + 1)\n    return scores",
          "objective": 0.01741,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: The score includes a reciprocal of bin size penalty and an item size normalized bin utilization; other terms are kept.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = bins / (bins - item + 1) + np.arange(len(bins)) + bins + np.sqrt(bins - item + 1) + np.log(bins - item + 1) / np.log(bins) * (item / bins)\n    return scores",
          "objective": 0.01751,
          "other_inf": null
     }
]