[
     {
          "algorithm": "Algorithm: Start by calculating a tentative score for each bin by subtracting the bin capacity from the maximum capacity and then dividing the result by the item size. Round the resulting scores down to the nearest integer and, if the rest capacity of a bin is less than or equal to the item size, set its score to 0. Finally, return the scores as a Numpy array.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.ceil((bins - np.max(bins)) / item)\n    scores[bins <= item] = 0\n    return scores",
          "objective": 0.01539,
          "other_inf": null
     },
     {
          "algorithm": "\nThe algorithm assigns an item to the bin with the maximum score and updates the rest capacity of the bin accordingly, until all items are assigned. The score for each bin is calculated as the bin's current capacity divided by the difference between the bin's capacity and the item size, plus the number of times the bin has been used.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = bins / (bins - item) + np.arange(len(bins))\n    return scores",
          "objective": 0.03843,
          "other_inf": null
     },
     {
          "algorithm": "\nThe algorithm assigns an item to the bin with the maximum score, considering the rest capacity of each bin, in order to minimize the number of used bins. \n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.zeros_like(bins)\n    scores[bins >= item] = item / (bins[bins >= item] - item + 1)\n    return scores",
          "objective": 0.03914,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm prioritizes bins with greater remaining capacity and takes into consideration the maximum capacity of existing bins when assigning items, aiming to minimize the number of bins used.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = np.zeros_like(bins)\n    scores[bins >= item] = (item / bins[bins >= item]) * (max_capacity / bins[bins >= item])\n    return scores",
          "objective": 0.03934,
          "other_inf": null
     },
     {
          "algorithm": " The new algorithm determines the score of each feasible bin based on a weighted combination of the item's size and the bin's remaining capacity, penalized by the bin's maximum capacity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = np.zeros_like(bins)\n    mask = bins >= item\n    scores[mask] = item / bins[mask] * ((bins[mask] / item) ** 0.3) * ((max_capacity / bins[mask]) ** 1.7)\n    return scores",
          "objective": 0.03974,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm assigns scores to each bin based on its remaining capacity and the item's size, where bins with a higher remaining capacity receive higher scores.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = (-1/item) * bins\n    return scores",
          "objective": 0.03984,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm calculates the score for each bin as the maximum possible item that can be assigned to it, the remaining capacity, and the gap between the bin capacity and item size",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.zeros_like(bins)\n    scores[bins >= item] = np.maximum(bins[bins >= item] - item, item) - np.maximum(bins[bins >= item] - item - 1, 0)\n    return scores",
          "objective": 0.04055,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm adjusts the weights of the bin's rest capacity and bin's index to adapt to specific scenarios, achieving better performance in minimizing bin utilization.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.empty_like(bins)\n    max_capacity = np.max(bins)\n    bin_capacities = bins - item\n    \n    for i in range(len(bins)):\n        if bins[i] == max_capacity:\n            scores[i] = 0\n        else:\n            scores[i] = (i + 1) * (1 - bins[i] / item)\n    \n    return scores",
          "objective": 0.04085,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm assigns items to bins based on a score function, where each bin is assigned the item with the maximum score, and empty bins with maximum capacity are not used; the goal is to minimize the number of used bins.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.zeros_like(bins)\n    scores[bins >= item] = item / bins[bins >= item]\n    return scores",
          "objective": 0.04095,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm calculates scores based on the number of bins needed to accommodate the remaining items after placing the current item in each bin, while maximizing bin utilization.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_bins = np.max(np.ceil(bins / item))  # Calculate the maximum number of bins needed to hold the remaining items\n    scores = max_bins * bins - item * np.arange(1, len(bins) + 1)  # Calculate scores\n    return scores",
          "objective": 0.04216,
          "other_inf": null
     },
     {
          "algorithm": "Algorithm: Start by calculating a tentative score for each bin by subtracting the bin capacity from the maximum capacity and then dividing the result by the item size. Round the resulting scores down to the nearest integer and, if the rest capacity of a bin is less than or equal to the item size, set its score to 0. Finally, return the scores as a Numpy array.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.ones(len(bins))\n    return scores",
          "objective": 0.04226,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm adjusts the weights of the bin's rest capacity and bin's index to adapt to specific scenarios, achieving better performance in minimizing bin utilization.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.empty_like(bins)\n    max_capacity = np.max(bins)\n    bin_capacities = bins - item\n    \n    for i in range(len(bins)):\n        if bins[i] == max_capacity:\n            scores[i] = 0\n        else:\n            scores[i] = (1 - bin_capacities[i] / item) * (i + 1) * np.exp(-bins[i] / item)\n    \n    return scores",
          "objective": 0.04246,
          "other_inf": null
     },
     {
          "algorithm": "\nThe algorithm assigns an item to the bin with the maximum score, considering the rest capacity of each bin, in order to minimize the number of used bins. \n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.zeros_like(bins)\n    scores[bins >= item] = item / (bins[bins >= item] - item/2)\n    return scores",
          "objective": 0.04256,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm adjusts the weights of the bin's rest capacity and bin's index to adapt to specific scenarios, achieving better performance in minimizing bin utilization.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.empty_like(bins)\n    max_capacity = np.max(bins)\n    bin_capacities = bins - item\n    \n    for i in range(len(bins)):\n        if bins[i] == max_capacity:\n            scores[i] = 0\n        else:\n            scores[i] = np.exp(-bin_capacities[i] / item) * (i + 1) * np.exp(-bins[i] / item)\n    \n    return scores",
          "objective": 0.04276,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm assigns an item to the bin with the maximum score calculated as the bin's current capacity divided by the square root of the product of the bin's capacity and the item size, plus the number of times the bin has been used.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = bins / np.sqrt(bins * item) + np.arange(len(bins))\n    return scores",
          "objective": 0.04286,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm adjusts the weights of the bin's rest capacity and bin's index to adapt to specific scenarios, achieving better performance in minimizing bin utilization.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.empty_like(bins)\n    max_capacity = np.max(bins)\n    bin_capacities = bins - item\n    \n    for i in range(len(bins)):\n        if bins[i] == max_capacity:\n            scores[i] = 0\n        else:\n            scores[i] = (i + 1) * np.exp(-bins[i] / item)\n    \n    return scores",
          "objective": 0.04487,
          "other_inf": null
     },
     {
          "algorithm": "New Algorithm: The algorithm takes the input of the size 'item' and the rest capacities of feasible bins 'bins' and outputs the scores for the bins for assignment. The algorithm calculates the score for each bin by dividing the available capacity by the square of the difference between 'bins_max' and the available capacity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    bins_max = np.max(bins)\n    capacities = bins - item\n    mask = capacities != bins_max\n    scores = np.zeros_like(bins)\n    scores[mask] = capacities[mask] / (bins_max - capacities[mask]) ** 2\n    return scores",
          "objective": 0.04497,
          "other_inf": null
     },
     {
          "algorithm": "This new algorithm utilizes a redesigned score function, which includes the remaining capacity ratio, item size, and square root of the remaining capacity to item size ratio.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = np.zeros_like(bins)\n\n    scores[bins != max_capacity] = ((bins[bins != max_capacity] - item) / (max_capacity - item) * np.sqrt(bins[bins != max_capacity] / item))**3\n    \n    return scores",
          "objective": 0.04618,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm calculates the score of each bin using a combination of the bin's remaining capacity and the item's size, taking into account the maximum capacity of the bins.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = np.zeros_like(bins)\n\n    scores[bins != max_capacity] = (bins[bins != max_capacity] - item) / (max_capacity - item) * np.sqrt(bins[bins != max_capacity] / item)\n    \n    return scores",
          "objective": 0.04628,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm scores bins based on a combination of their remaining capacity, the item size, and the squared difference between the bin capacity and the item size.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.empty_like(bins)\n    max_capacity = np.max(bins)\n    bin_capacities = bins - item\n    \n    for i in range(len(bins)):\n        if bins[i] == max_capacity:\n            scores[i] = 0\n        else:\n            scores[i] = np.exp(-bin_capacities[i] / item) * (i + 1) * np.exp(-(bins[i] - item) ** 2 / item ** 2)\n    \n    return scores",
          "objective": 0.04709,
          "other_inf": null
     }
]