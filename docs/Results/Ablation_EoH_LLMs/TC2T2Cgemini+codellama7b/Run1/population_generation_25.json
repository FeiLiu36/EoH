[
     {
          "algorithm": "New algorithm: Calculate the product of the square root of rest capacity raised to bin's index, divided by the square root of the difference between bin's capacity and the item size.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the product of the square root of rest capacity raised to bin's index, divided by the square root of the difference between bin's capacity and the item size\n    scores = np.sqrt(bins) ** (np.arange(len(bins)) + 1) / np.sqrt(bins - item)\n    \n    # Return the scores for the bins\n    return scores",
          "objective": 0.01097,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Score is the product of square root of rest capacity to the power of bin index multiplied by the sum of rest capacity and item size, divided by their difference.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the scores for each bin\n    scores = np.sqrt(bins) ** (np.arange(len(bins)) + 1) * (bins + item) / (bins - item)\n    \n    # Return the scores in descending order\n    return scores",
          "objective": 0.01157,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: The new algorithm calculates the score for each bin as the weighted sum of its rest capacity and the reciprocal of the difference between its capacity and the item size, where the weights are the square root of the bin's index or the square root of the inverse of the number of bins.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the weighted sum of the rest capacity and the reciprocal of the difference between the capacity and the item size\n    weights = np.sqrt(np.arange(len(bins)) + 1) / np.sqrt(len(bins))\n    scores = (weights * bins) / (item - bins)\n    \n    # Return the scores for the bins\n    return scores",
          "objective": 0.01519,
          "other_inf": null
     },
     {
          "algorithm": "Novel Algorithm: Calculate the score for each bin as the weighted sum of the rest capacity and the reciprocal of the difference between the capacity and the item size, where the weights are the bin's index multiplied by the bin's rest capacity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the score for each bin as the weighted sum of the rest capacity and the reciprocal of the difference between the capacity and the item size\n    scores = (bins * bins) / (item - bins)\n    \n    # Return the scores for the bins for assignment\n    return scores",
          "objective": 0.0156,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm calculates the score for each bin as the weighted sum of its rest capacity and the reciprocal of the difference between its capacity and the item size, where the weights are the bin's index or the square root of the number of bins.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the weighted sum of the rest capacity and the reciprocal of the difference between the capacity and the item size\n    weights = np.sqrt(np.arange(len(bins))) + 1\n    scores = (weights * bins) / (item - bins)\n    \n    # Return the scores for the bins\n    return scores",
          "objective": 0.02646,
          "other_inf": null
     },
     {
          "algorithm": "Assign to each bin the value of the rest capacity raised to the power of the index of that bin, and then divide this value by the square root of the absolute difference between the current capacity and the size of the item.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the rest capacities raised to the power of the index of each bin\n    rest_capacities = np.power(bins, np.arange(len(bins)))\n    \n    # Calculate the absolute difference between the current capacity and the size of the item\n    abs_diff = np.abs(np.subtract(bins, item))\n    \n    # Divide the rest capacities by the square root of the absolute difference\n    scores = np.divide(rest_capacities, np.sqrt(abs_diff))\n    \n    return scores",
          "objective": 0.03391,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Assign score to each bin as the multiplication of the reciprocal of the difference between the bin's rest capacity and the item size and the bin's index raised to the power of the rest capacity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the reciprocal of the difference between the bin's rest capacity and the item size\n    reciprocal_diff = 1 / (bins - item)\n    \n    # Raise the bin's index to the power of the rest capacity\n    powered_index = np.power(np.arange(len(bins)), bins)\n    \n    # Multiply the reciprocal difference and the powered index\n    scores = reciprocal_diff * powered_index\n    \n    return scores",
          "objective": 0.03491,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Divide the sum of bin's index raised to the power of rest capacity by the product of the square of item size and the square of the difference between bin's capacity and the item size",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the sum of the indices of the bins raised to the power of their rest capacities\n    idx_pow = np.power(np.arange(len(bins)), bins)\n    # Calculate the product of the square of the item size and the square of the difference between the bin's capacity and the item size\n    item_size_sq = np.square(item)\n    bin_capacity_diff_sq = np.square(bins - item)\n    # Calculate the scores for each bin based on the formula\n    scores = idx_pow / (item_size_sq * bin_capacity_diff_sq)\n    return scores",
          "objective": 0.03572,
          "other_inf": null
     },
     {
          "algorithm": "Compute the score for each bin as the rest capacity raised to the bin's index divided by the difference between the capacity and the item size, to prioritize bins with higher remaining capacity while accounting for item size.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Compute the score for each bin as the rest capacity raised to the bin's index divided by the difference between the capacity and the item size\n    scores = np.power(bins, np.arange(len(bins))) / (bins - item)\n    \n    # Return the scores for the bins\n    return scores",
          "objective": 0.03672,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm calculates the score for each bin as the weighted sum of its rest capacity and the reciprocal of the difference between its capacity and the item size, where the weights are the bin's index or the inverse of the number of bins.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the score for each bin as the weighted sum of its rest capacity and the reciprocal of the difference between its capacity and the item size\n    scores = (bins * (1 - item / bins)) / (bins - item)\n    \n    # Return the scores for the bins\n    return scores",
          "objective": 0.03682,
          "other_inf": null
     },
     {
          "algorithm": "Updated algorithm: Compute the sum of rest capacities raised to the bin's index, multiplied by the bin's index, divided by the difference between the square of bin's capacity and the square of item size, to minimize the number of used bins.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the sum of rest capacities raised to the bin's index, multiplied by the bin's index, divided by the difference between the square of bin's capacity and the square of item size\n    scores = (np.power(bins, np.arange(len(bins))) * np.arange(len(bins)) / (np.square(bins) - np.square(item)))\n    \n    # Return the scores for the bins\n    return scores",
          "objective": 0.03763,
          "other_inf": null
     },
     {
          "algorithm": "Calculate the product of the bin's index raised to the bin's rest capacity divided by the power of the difference between the bin's capacity and item's size with the power being a new parameter.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the product of the bin's index raised to the bin's rest capacity\n    # divided by the power of the difference between the bin's capacity and item's size\n    scores = (np.arange(len(bins)) + 1) ** (bins - item) / (bins - item) ** 0.5\n    \n    # Return the scores for the bins for assignment\n    return scores",
          "objective": 0.03773,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Calculate the difference between the bin's capacity raised to the bin's index and the item size raised to the bin's index, divided by the difference between the square of bin's capacity and the square of item size, to minimize the number of used bins.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the difference between the bin's capacity raised to the bin's index and the item size raised to the bin's index\n    diff = (bins ** (np.arange(len(bins)) + 1) - item ** (np.arange(len(bins)) + 1))\n    \n    # Divide the difference by the difference between the square of bin's capacity and the square of item size\n    scores = diff / (bins ** 2 - item ** 2)\n    \n    return scores",
          "objective": 0.03783,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Calculate the scores as the square root of the exponential of the difference between the rest capacity of the bin and the item size and the bin's index.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the scores as the square root of the exponential of the difference between the rest capacity of the bin and the item size and the bin's index\n    scores = np.sqrt(np.exp(-((bins - item) ** 2)))\n    \n    # Add a small value to avoid division by zero\n    scores += 1e-6\n    \n    # Normalize the scores to ensure they sum up to 1\n    scores /= np.sum(scores)\n    \n    return scores",
          "objective": 0.03803,
          "other_inf": null
     },
     {
          "algorithm": " Algorithm Description: Calculate the scores as the sum of the exponential of the difference between the bin's capacity and the item size and the logarithm of the bin's index. ",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the scores as the sum of the exponential of the difference between the bin's capacity and the item size and the logarithm of the bin's index\n    scores = np.exp(-np.abs(bins - item)) + np.log(np.arange(len(bins)))\n    return scores",
          "objective": 0.03833,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm scores each bin by multiplying its rest capacity with the inverse of the difference between its capacity and the item size, and then subtracting the bin's index from the result.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the inverse of the difference between the item size and the bin capacity\n    inv_diff = 1 / (np.array(bins) - item)\n    \n    # Multiply the inverse of the difference with the rest capacity of each bin\n    scores = inv_diff * np.array(bins)\n    \n    # Subtract the bin index from the scores\n    scores -= np.arange(len(bins))\n    \n    return scores",
          "objective": 0.03854,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Compute the sum of rest capacity raised to bin's index, divided by the difference between the square of bin's capacity and the square of item size, multiplied by bin's rest capacity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the sum of rest capacities raised to the power of the bin index\n    rest_capacities = np.power(bins, np.arange(len(bins)))\n    # Calculate the difference between the square of the bin capacity and the square of the item size\n    diff = np.square(bins) - np.square(item)\n    # Calculate the scores for each bin\n    scores = (rest_capacities / diff) * bins\n    return scores",
          "objective": 0.03864,
          "other_inf": null
     },
     {
          "algorithm": "The proposed algorithm calculates the score of each bin as the sum of the remaining capacity and the reciprocal of the bin's index multiplied by the reciprocal of the remaining capacity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the remaining capacity for each bin\n    remaining_capacity = bins - item\n    \n    # Calculate the reciprocal of the bin index and the reciprocal of the remaining capacity\n    reciprocal_bin_index = 1 / (np.arange(len(bins)) + 1)\n    reciprocal_remaining_capacity = 1 / remaining_capacity\n    \n    # Calculate the score for each bin\n    scores = reciprocal_bin_index * reciprocal_remaining_capacity\n    \n    return scores",
          "objective": 0.03884,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm calculates the score for each bin as a weighted sum of the number of items it can still accommodate and the reciprocal of the difference between its capacity and the item size, where the weights are the square of the bin's index or the logarithm of the number of bins.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the score for each bin as a weighted sum of the number of items it can still accommodate and the reciprocal of the difference between its capacity and the item size\n    scores = (np.minimum(bins, item) / np.maximum(bins - item, 0)) ** 2 + (np.log(bins) / np.log(item)) ** 2\n    \n    # Return the scores for the bins\n    return scores",
          "objective": 0.03904,
          "other_inf": null
     },
     {
          "algorithm": "For each bin, score is computed as a weighted sum of the bin's capacity, rest capacity, and the reciprocal of the difference between the capacity and the item size, where the weights are inversely proportional to the square root of the bin's index, capacity, and rest capacity",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Compute the scores for each bin based on the given formula\n    scores = (np.sqrt(bins) * item / (bins - item)) + (np.sqrt(bins) * (bins - item) / (bins - item))\n    \n    # Return the scores as a NumPy array\n    return scores",
          "objective": 0.03914,
          "other_inf": null
     }
]