[
     {
          "algorithm": "New Algorithm: Assign the item to the bin with the maximum score computed by finding the sum of the inverse of the difference between the bin's capacity and the item's size, and the bin's index multiplied by the cosine of the square of the rest capacity divided by the item's size. ",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Compute the inverse of the difference between the bin's capacity and the item's size\n    inv_diff = 1 / (bins - item)\n    \n    # Compute the cosine of the square of the rest capacity divided by the item's size\n    cos_sqr = np.cos(np.square(bins * inv_diff))\n    \n    # Compute the sum of the inverse of the difference and the cosine\n    scores = inv_diff + cos_sqr\n    \n    return scores",
          "objective": 0.03431,
          "other_inf": null
     },
     {
          "algorithm": "Assign the item to the bin with the maximum score computed by finding the sum of the inverse of the square of the difference between the bin's capacity and the item's size, and the inverse of the square of the bin's index, multiplied by the cosine of the square of the rest capacity divided by the item's size.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Compute the inverse of the square of the difference between the bin's capacity and the item's size\n    inv_sq_diff = 1 / (np.square(bins - item) + 1e-8)\n    \n    # Compute the inverse of the square of the bin's index\n    inv_sq_idx = 1 / (np.square(np.arange(len(bins))) + 1e-8)\n    \n    # Compute the cosine of the square of the rest capacity divided by the item's size\n    cos_sq_rest_capacity = np.cos(np.square(bins - item) / item)\n    \n    # Multiply the inverse of the square of the difference between the bin's capacity and the item's size, and the inverse of the square of the bin's index, by the cosine of the square of the rest capacity divided by the item's size\n    scores = inv_sq_diff * inv_sq_idx * cos_sq_rest_capacity\n    \n    return scores",
          "objective": 0.03501,
          "other_inf": null
     },
     {
          "algorithm": "Calculate bins scores by summing the exponential of the negative difference between bin capacity and item size, and the logarithm of the negative difference between the bin's index and the number of bins.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the exponential of the negative difference between bin capacity and item size\n    exp_diff = np.exp(-(bins - item))\n    \n    # Calculate the logarithm of the negative difference between the bin's index and the number of bins\n    log_diff = np.log(-(np.arange(len(bins)) - len(bins)))\n    \n    # Sum the two terms to get the total score for each bin\n    scores = exp_diff + log_diff\n    \n    return scores",
          "objective": 0.03833,
          "other_inf": null
     },
     {
          "algorithm": "New Algorithm: Assign bin scores by subtracting the bin capacity from the item capacity and multiplying the result by the bin index.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the scores for each bin based on the item size and bin capacity\n    scores = (item - bins) * (np.arange(len(bins)) + 1)\n    \n    # Return the scores as a NumPy array\n    return scores",
          "objective": 0.03884,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Score each bin by subtracting its square root multiplied by its index and the item size.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the square root of the indices of the bins\n    sqrt_indices = np.sqrt(np.arange(len(bins)))\n    \n    # Subtract the square root multiplied by the item size from the rest capacities\n    scores = bins - (sqrt_indices * item)\n    \n    # Return the scores\n    return scores",
          "objective": 0.03914,
          "other_inf": null
     },
     {
          "algorithm": "Score each bin by taking the ratio of its rest capacity to item size and subtracting the square root of its index.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the ratios of rest capacity to item size for each bin\n    ratios = bins / item\n    \n    # Subtract the square root of the index from the ratios\n    scores = ratios - np.sqrt(np.arange(len(ratios)))\n    \n    return scores",
          "objective": 0.03954,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: The score function will calculate the scores for each bin based on the difference between the bin's rest capacity and the item's value, with a penalty for bins with a rest capacity smaller than a threshold.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the difference between the item's value and the bin's rest capacity\n    diff = np.abs(item - bins)\n    \n    # Apply a penalty for bins with a rest capacity smaller than a threshold\n    penalties = np.where(diff < 50, 10 * (50 - diff), 0)\n    \n    # Calculate the scores for each bin\n    scores = diff + penalties\n    \n    return scores",
          "objective": 0.03964,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Score bins by subtracting the item's size divided by the rest capacity multiplied by bin's capacity and rest capacity squared.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the scores for each bin\n    scores = (item / bins) - (bins ** 2)\n    \n    # Return the scores as a NumPy array\n    return scores",
          "objective": 0.03984,
          "other_inf": null
     },
     {
          "algorithm": "Score function for bins is calculated as the exponential decay of the difference between item size and rest capacity, multiplied with the bin index.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the exponential decay of the difference between item size and rest capacity\n    decay = np.exp(-(bins - item) / (bins * item))\n    \n    # Multiply the decay by the bin index\n    scores = decay * np.arange(len(bins))\n    \n    return scores",
          "objective": 0.03994,
          "other_inf": null
     },
     {
          "algorithm": "Assign each bin a score by subtracting the square root of the bin\u2019s index multiplied by the item size and the square root of half of the bin's rest capacity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the scores for each bin\n    scores = np.sqrt(np.arange(len(bins)) * item) - np.sqrt(bins / 2)\n    \n    # Return the scores as a NumPy array\n    return scores",
          "objective": 0.04014,
          "other_inf": null
     },
     {
          "algorithm": " New score function: Calculating the score as the difference between the logarithm of rest capacity and the bin index, multiplied by the ratio of item size to average bin size. ",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the logarithmic rest capacity of each bin\n    log_rest_capacity = np.log(bins)\n    \n    # Calculate the ratio of item size to average bin size\n    item_size_ratio = item / np.mean(bins)\n    \n    # Calculate the score for each bin\n    scores = log_rest_capacity - item_size_ratio * (bins - item)\n    \n    return scores",
          "objective": 0.04025,
          "other_inf": null
     },
     {
          "algorithm": "Calculate the score of each bin by subtracting a penalty from the sum of power of rest capacity and power of half of the item value.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the penalty for each bin based on its rest capacity\n    penalties = np.power(bins - item, 2)\n    \n    # Calculate the score for each bin by subtracting the penalty\n    scores = bins - penalties\n    \n    return scores",
          "objective": 0.04045,
          "other_inf": null
     },
     {
          "algorithm": "The item will be assigned to the bin with the maximum score by computing the difference between the bin's capacity and the item's size, and adding to the result the inverse of the square of the bin's index, multiplied by the cosine of the square of the rest capacity divided by the item's size.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Compute the difference between the bin's capacity and the item's size\n    diff = np.abs(bins - item)\n    \n    # Add the inverse of the square of the bin's index to the result\n    scores = diff + (np.arange(len(bins)) ** 2) / (item ** 2)\n    \n    # Multiply the scores by the cosine of the square of the rest capacity divided by the item's size\n    scores *= np.cos((bins - item) ** 2 / item)\n    \n    return scores",
          "objective": 0.04055,
          "other_inf": null
     },
     {
          "algorithm": "Modified Algorithm: Calculate scores for each bin by subtracting the bin's capacity from its index and returning a Numpy array of these scores for assignment.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the scores for each bin by subtracting the bin's capacity from its index\n    scores = np.subtract(np.arange(len(bins)), bins)\n    \n    # Return the scores for assignment\n    return scores",
          "objective": 0.04075,
          "other_inf": null
     },
     {
          "algorithm": "{New algorithm: Score bins by subtracting the item size from half the bin capacity and dividing by the absolute difference between the half bin capacity and item size.}",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the scores for each bin\n    scores = (bins - item) / abs(bins - item)\n    \n    # Return the scores as a NumPy array\n    return scores",
          "objective": 0.04095,
          "other_inf": null
     },
     {
          "algorithm": "\nNew algorithm: The score function will calculate the scores for each bin based on the remaining capacity, with a penalty for bins with maximum capacity to minimize the number of used bins.\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = (max_capacity - bins) + (bins == max_capacity) * item\n    return scores",
          "objective": 0.04105,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm calculates the score for each bin as the product of the rest capacity and the power of the item to the inverse exponential decay of the index.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the rest capacities of the bins\n    rest_capacities = bins - item\n    \n    # Calculate the scores for each bin\n    scores = (rest_capacities ** (-np.arange(len(bins)) / len(bins))) * item\n    \n    return scores",
          "objective": 0.04115,
          "other_inf": null
     },
     {
          "algorithm": "Score bins as the logarithm of the sum of rest capacity and the inverse of minimum capacity increment.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the logarithmic score for each bin\n    scores = np.log(bins + item) / np.log(bins)\n    \n    # Add the inverse of the minimum capacity increment to the scores\n    scores += 1 / (np.min(bins) - item)\n    \n    return scores",
          "objective": 0.04165,
          "other_inf": null
     },
     {
          "algorithm": " New Algorithm: Score bins by multiplying their index by a weight and adding their capacity to the result. ",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the scores for each bin based on its index and capacity\n    scores = (np.arange(len(bins)) * item) + bins\n    \n    # Return the scores as a NumPy array\n    return scores",
          "objective": 0.04196,
          "other_inf": null
     },
     {
          "algorithm": "Modified Algorithm: Score bins by multiplying their index by a weight and subtracting their capacity from the result.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the scores for each bin based on its index and weight\n    scores = (np.arange(len(bins)) * item) - bins\n    \n    # Return the scores as a NumPy array\n    return scores",
          "objective": 0.04216,
          "other_inf": null
     }
]