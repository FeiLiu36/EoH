[
     {
          "algorithm": "Assign the score of each bin using a sigmoid function involving the ratio of the item size to the bin's rest capacity, with a higher score for bins closer to being full.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the ratio of the item size to the bin's rest capacity\n    ratios = item / (bins - item)\n    \n    # Apply the sigmoid function to the ratios\n    scores = 1 / (1 + np.exp(-ratios))\n    \n    # Return the scores\n    return scores",
          "objective": 0.03984,
          "other_inf": null
     },
     {
          "algorithm": "For each bin, calculate its ratio of rest capacity to item size; if greater than 1, the score is 0, otherwise, the score is the inverse of the ratio.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the ratio of rest capacity to item size for each bin\n    ratios = (bins - item) / item\n    \n    # Set the score for each bin based on the ratio\n    scores = np.where(ratios > 1, 0, 1 / ratios)\n    \n    return scores",
          "objective": 0.03994,
          "other_inf": null
     },
     {
          "algorithm": "\nNew algorithm: The score function will calculate the scores for each bin based on the remaining capacity, with a penalty for bins with maximum capacity to minimize the number of used bins.\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = (max_capacity - bins) + (bins == max_capacity) * item\n    return scores",
          "objective": 0.04105,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm calculates scores for each bin based on the ratio of the remaining capacity to the total usable capacity, prioritizing bins with higher remaining capacities to maximize space utilization.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the ratio of remaining capacity to total usable capacity for each bin\n    ratios = (bins - item) / bins\n    \n    # Prioritize bins with higher remaining capacities\n    scores = np.argsort(-ratios)\n    \n    # Return the scores for the bins\n    return scores",
          "objective": 0.04155,
          "other_inf": null
     },
     {
          "algorithm": "\nNew algorithm: \n1. Initialize an empty array named 'scores' with the same length as the input array 'bins'.\n2. Calculate the scores for each bin by taking the minimum between the rest capacity of the bin and the size of the item.\n3. Set the score of a bin with maximum capacity to a very small negative value to prevent it from being used.\n4. Return the 'scores' array.\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.minimum(bins, item)\n    max_capacity_bin_index = np.argmax(bins)\n    scores[max_capacity_bin_index] = -99999999\n    return scores",
          "objective": 0.04226,
          "other_inf": null
     },
     {
          "algorithm": "New Algorithm: Reduce the favoring threshold for bins with capacities closely matching the item size, down from 0.5 to 0.25.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the difference between the item size and the bin capacities\n    diff = np.abs(item - bins)\n    \n    # Calculate the favoring threshold for each bin\n    thresholds = np.maximum(diff / (item + 1), 0.25)\n    \n    # Calculate the scores for each bin\n    scores = np.exp(-thresholds)\n    \n    return scores",
          "objective": 0.04246,
          "other_inf": null
     },
     {
          "algorithm": "\nDescription: \nThe algorithm calculates the scores for each bin based on their rest capacities and assigns the item to the bin with the maximum score, minimizing the number of used bins.\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = bins / np.maximum((bins - item), 1)\n    scores[bins == bins.max()] = 0\n    return scores",
          "objective": 0.04306,
          "other_inf": null
     },
     {
          "algorithm": "Prioritize bins with sufficient capacity and penalize bins with excessive capacity, while considering the item's size to favor bins with capacities closest to the item size.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the difference between the bin capacity and the item size\n    diff = np.abs(bins - item)\n    \n    # Prioritize bins with sufficient capacity\n    priority_mask = (diff <= 0.5 * item)\n    priority_scores = np.where(priority_mask, 1, 0)\n    \n    # Penalize bins with excessive capacity\n    penalty_mask = (diff > 0.5 * item) & (diff < 1.5 * item)\n    penalty_scores = np.where(penalty_mask, 0.5, 0)\n    \n    # Combine the priority and penalty scores\n    scores = priority_scores + penalty_scores\n    \n    # Normalize the scores to ensure they sum to 1\n    scores /= np.sum(scores)\n    \n    return scores",
          "objective": 0.04407,
          "other_inf": null
     },
     {
          "algorithm": "New Algorithm: Prioritize bins based on the ratio of the available capacity to the item size, favoring bins with capacities closely matching the item size.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the ratio of available capacity to item size for each bin\n    ratios = (bins - item) / item\n    \n    # Favor bins with capacities closely matching the item size\n    scores = np.where(ratios < 0.5, 1, 0)\n    \n    # Normalize the scores to ensure they sum up to 1\n    scores = scores / np.sum(scores)\n    \n    return scores",
          "objective": 0.04427,
          "other_inf": null
     },
     {
          "algorithm": "New Algorithm: Adjust the priority and penalty thresholds to prioritize bins with smaller capacity differences, especially when the item size is small.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the capacity difference between each bin and the item size\n    diff = np.abs(bins - item)\n    \n    # Prioritize bins with smaller capacity differences\n    priority = np.argsort(diff)\n    \n    # Penalize bins with large capacity differences\n    penalty = np.exp(-np.square(diff))\n    \n    # Combine the priority and penalty scores\n    scores = priority * penalty\n    \n    return scores",
          "objective": 0.04618,
          "other_inf": null
     },
     {
          "algorithm": "\nNew algorithm: \n1. Calculate the ratio of item size to each bin's rest capacity.\n2. Calculate the score for each bin based on the ratio and the condition of the rest capacity.\n3. Return the scores for the bins for assignment. \n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.zeros_like(bins, dtype=float)\n    for i in range(len(bins)):\n        if bins[i] == item:\n            scores[i] = -1\n        elif bins[i] > item:\n            scores[i] = item / bins[i]\n    return scores",
          "objective": 0.05071,
          "other_inf": null
     },
     {
          "algorithm": "Algorithm: Calculate scores by dividing each bin's rest capacity by the maximum between the difference between its capacity and the item size and 1, excluding bins at max capacity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the scores for each bin\n    scores = np.divide(bins - item, np.maximum(bins - item, 1))\n    \n    # Exclude bins at maximum capacity\n    scores[np.where(bins == bins.max())] = 0\n    \n    return scores",
          "objective": 0.05091,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Calculate the ratio of each bin's rest capacity to the item size, then if the ratio is less than or equal to 0.5, square the ratio; otherwise, set the score to -1 if the bin is full or 0 if the bin is not full to maximize the score of the bins that can take the item.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the ratio of each bin's rest capacity to the item size\n    ratios = (bins / item)\n    \n    # Square the ratio if it is less than or equal to 0.5\n    ratios[ratios <= 0.5] **= 2\n    \n    # Set the score to -1 if the bin is full or 0 if the bin is not full\n    scores = np.where(bins == item, -1, 0)\n    \n    # Return the scores\n    return scores",
          "objective": 0.05383,
          "other_inf": null
     },
     {
          "algorithm": "\nNew algorithm: \n1. Calculate the available capacity for each bin by subtracting the item size from the rest capacities of feasible bins. \n2. Set the score for each bin to 0 if the available capacity is less than the item size, otherwise set the score to the available capacity. \n3. If the rest capacity of a bin equals the maximum capacity, set the score to -1 to indicate that it will not be used. \n4. Return the scores for the bins for assignment. \n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    available_capacity = bins - item\n    scores = np.where(available_capacity < item, 0, available_capacity)\n    scores = np.where(bins == np.max(bins), -1, scores)\n    return scores",
          "objective": 0.05795,
          "other_inf": null
     },
     {
          "algorithm": "\n  The new algorithm will calculate the score for each bin based on the rest capacity, using a weighted average of the rest capacity and the inverse of the bin number, then return the scores for each bin for assignment. \n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    num_bins = len(bins)\n    weights = np.arange(1, num_bins + 1)\n    normalized_capacity = 1 - (bins / np.max(bins))\n    scores = normalized_capacity * weights\n    return scores",
          "objective": 0.05815,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: The score function will calculate the scores for each bin based on the remaining capacity, with a penalty for bins with maximum capacity and a bonus for bins with minimum capacity to minimize the number of used bins.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the scores for each bin based on the remaining capacity\n    scores = np.zeros(len(bins))\n    for i, bin_capacity in enumerate(bins):\n        if bin_capacity >= item:\n            scores[i] = (bin_capacity - item) / (bin_capacity + 1)\n        else:\n            scores[i] = 0\n    \n    # Penalize bins with maximum capacity\n    max_capacity = np.max(bins)\n    scores -= (max_capacity - bins) / (max_capacity + 1)\n    \n    # Bonus for bins with minimum capacity\n    min_capacity = np.min(bins)\n    scores += (min_capacity - bins) / (min_capacity + 1)\n    \n    return scores",
          "objective": 0.06771,
          "other_inf": null
     },
     {
          "algorithm": "\nDefine a function named score that takes in inputs 'item' and 'bins' and returns the output 'scores' as a Numpy array, implementing a novel scoring algorithm to assign the item to the bins with the maximum score while minimizing the number of used bins.\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.zeros_like(bins)\n    feasible_bins = np.where(bins >= item)[0]\n    \n    if len(feasible_bins) == 0:\n        return scores\n    \n    min_capacity = np.min(bins[feasible_bins])\n    \n    for i in feasible_bins:\n        if bins[i] == min_capacity:\n            scores[i] = -1\n        else:\n            scores[i] = (bins[i] - item) / bins[i]\n    \n    return scores",
          "objective": 0.06962,
          "other_inf": null
     },
     {
          "algorithm": "\nNew algorithm: The score function will calculate the scores for each bin based on the rest capacity, prioritizing bins with higher rest capacity and lower index, and returning a Numpy array of scores for assignment. \n\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = bins * (bins == np.max(bins)) - (2 * np.arange(len(bins)))\n    return scores",
          "objective": 0.07073,
          "other_inf": null
     },
     {
          "algorithm": "Prioritize bins with available capacity exceeding a threshold, while considering the item's size to favor bins with capacities closest to the item size.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the difference between the bin capacity and the item size\n    diff = np.abs(bins - item)\n    \n    # Prioritize bins with available capacity exceeding a threshold\n    threshold = 0.5 * item\n    mask = (diff <= threshold).astype(int)\n    \n    # Favor bins with capacities closest to the item size\n    scores = np.where(mask, diff, 0)\n    \n    return scores",
          "objective": 0.07184,
          "other_inf": null
     },
     {
          "algorithm": "My new algorithm is to calculate a score for each bin based on its rest capacity and its index, with higher rest capacity and a lower index receiving a higher score as follows: score = (rest capacity - 2 * index), returning a Numpy array of scores for assignment.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the score for each bin based on its rest capacity and index\n    scores = np.zeros(len(bins))\n    for i, bin_capacity in enumerate(bins):\n        if bin_capacity >= item:\n            scores[i] = (bin_capacity - 2 * i)\n    \n    # Return the scores for assignment\n    return scores",
          "objective": 0.07878,
          "other_inf": null
     }
]