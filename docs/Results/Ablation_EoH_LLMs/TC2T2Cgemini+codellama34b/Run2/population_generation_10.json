[
     {
          "algorithm": "Main steps: Penalize bins with more than 30% of the item's capacity while increasing the penalty term; prioritize bins with less than 5% free capacity and decrease the priority term.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the maximum capacity of the bins\n    max_capacity = np.max(bins)\n    \n    # Calculate the remaining capacity of the bins\n    remaining_capacity = bins - item\n    \n    # Calculate the percentage of the item's capacity used by each bin\n    usage_percentage = (remaining_capacity / max_capacity) * 100\n    \n    # Calculate the penalty term based on the usage percentage\n    penalty_term = np.where(usage_percentage > 30, 100 - usage_percentage, 0)\n    \n    # Calculate the priority term based on the remaining capacity\n    priority_term = np.where(remaining_capacity < 5, 100 - remaining_capacity, 0)\n    \n    # Combine the penalty and priority terms to get the final score\n    scores = penalty_term + priority_term\n    \n    return scores",
          "objective": 0.01751,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm reducing penalty for bins with less than 30% capacity and increasing priority for bins with less than 20% capacity while adding a double penalty for bins with less than 10% capacity",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the remaining capacity of each bin\n    remaining_capacity = bins - item\n    \n    # Calculate the score for each bin based on its remaining capacity\n    scores = np.zeros(len(bins))\n    scores[remaining_capacity >= 0.3 * bins] = 1\n    scores[remaining_capacity < 0.3 * bins] = 0.5\n    scores[remaining_capacity < 0.2 * bins] = 0.75\n    scores[remaining_capacity < 0.1 * bins] = 1.5\n    \n    return scores",
          "objective": 0.01821,
          "other_inf": null
     },
     {
          "algorithm": "A new algorithm to prioritize bins that have less than 10% free capacity and penalizing bins that have more than 40% of the item's capacity while increasing the penalty term .",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the percentage of free capacity for each bin\n    free_capacity = (bins - item) / bins\n    \n    # Penalize bins with more than 40% of the item's capacity\n    penalty = np.where(free_capacity > 0.4, 1, 0)\n    \n    # Prioritize bins with less than 10% free capacity\n    priority = np.where(free_capacity < 0.1, 1, 0)\n    \n    # Combine the penalty and priority scores\n    scores = penalty + priority\n    \n    return scores",
          "objective": 0.01841,
          "other_inf": null
     },
     {
          "algorithm": "Algorithm prioritizing bins with less than 10% free capacity and penalizing bins that have more than 60% of the item's capacity while decreasing the penalty term to zero for bins with less than 30% free capacity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the free capacity of each bin\n    free_capacity = np.maximum(bins - item, 0)\n    \n    # Prioritize bins with less than 10% free capacity\n    priority = np.where(free_capacity < 0.1 * bins, 1, 0)\n    \n    # Penalize bins that have more than 60% of the item's capacity\n    penalty = np.where(free_capacity > 0.6 * item, 1, 0)\n    \n    # Decrease the penalty term to zero for bins with less than 30% free capacity\n    penalty = np.where(free_capacity < 0.3 * bins, 0, penalty)\n    \n    # Calculate the score for each bin\n    scores = priority + penalty\n    \n    return scores",
          "objective": 0.01881,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Prioritize bins that can fit the item leaving less than 10% free capacity, and penalize bins that leave more than 30% free capacity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the free capacity of each bin\n    free_capacity = bins - item\n    \n    # Prioritize bins that can fit the item leaving less than 10% free capacity\n    priority_bins = np.where(free_capacity < 0.1 * bins, 1, 0)\n    \n    # Penalize bins that leave more than 30% free capacity\n    penalty_bins = np.where(free_capacity > 0.3 * bins, 1, 0)\n    \n    # Calculate the total score for each bin\n    scores = priority_bins + penalty_bins\n    \n    return scores",
          "objective": 0.01902,
          "other_inf": null
     },
     {
          "algorithm": "Prioritizing bins with less than 10% free capacity and penalizing bins that have more than 40% of the item's capacity while decreasing the penalty term.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the free capacity of each bin\n    free_capacity = np.maximum(bins - item, 0)\n    \n    # Prioritize bins with less than 10% free capacity\n    priority = np.where(free_capacity < 0.1 * bins, 1, 0)\n    \n    # Penalize bins that have more than 40% of the item's capacity\n    penalty = np.where(free_capacity > 0.4 * item, 1, 0)\n    \n    # Decrease the penalty term for bins with less than 50% free capacity\n    penalty = np.where(free_capacity < 0.5 * bins, 0.5 * penalty, penalty)\n    \n    # Calculate the final score for each bin\n    scores = priority + penalty\n    \n    return scores",
          "objective": 0.02073,
          "other_inf": null
     },
     {
          "algorithm": "Prioritizing bins that have more than 50% of their capacity and giving a larger penalty to bins that have less than 10% free capacity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the available capacity for each bin\n    available_capacity = bins - item\n    \n    # Prioritize bins with more than 50% capacity\n    priority_mask = (available_capacity > bins * 0.5)\n    priority_score = np.where(priority_mask, 1, 0)\n    \n    # Penalize bins with less than 10% free capacity\n    penalization_mask = (available_capacity < bins * 0.1)\n    penalization_score = np.where(penalization_mask, 1, 0)\n    \n    # Combine the priority and penalization scores\n    scores = priority_score + penalization_score\n    \n    return scores",
          "objective": 0.02193,
          "other_inf": null
     },
     {
          "algorithm": "Assign the item to the bin with the minimum free capacity, penalized if the free capacity is at least 50% of the bin, and increase the score if the free capacity is at most 10%.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the free capacity of each bin\n    free_capacity = bins - item\n    \n    # Penalize bins with free capacity at least 50% of the bin\n    penalty = np.where(free_capacity >= 0.5 * bins, 1, 0)\n    \n    # Increase the score for bins with free capacity at most 10%\n    bonus = np.where(free_capacity <= 0.1 * bins, 1, 0)\n    \n    # Calculate the total score for each bin\n    scores = penalty + bonus\n    \n    return scores",
          "objective": 0.02203,
          "other_inf": null
     },
     {
          "algorithm": "Assign priority to bins with close capacity to the size of the item, while penalizing bins with smaller capacities and omitting those with higher capacities.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the difference between the bin capacity and the item size\n    diff = np.abs(bins - item)\n    \n    # Penalize bins with smaller capacities\n    penalty = np.where(diff < 0.5 * item, 0.5 * diff, 0)\n    \n    # Calculate the score for each bin\n    scores = np.exp(-penalty / (0.5 * item))\n    \n    return scores",
          "objective": 0.03059,
          "other_inf": null
     },
     {
          "algorithm": "Prioritizing bins that have less than 20% free capacity and penalizing bins that have more than 60% of the item's capacity, but only if the bin's capacity exceeds twice the item's size.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the free capacity of each bin\n    free_capacity = bins - item\n    \n    # Prioritize bins with less than 20% free capacity\n    priority = np.where(free_capacity < 0.2 * bins, 1, 0)\n    \n    # Penalize bins with more than 60% of the item's capacity\n    penalty = np.where(free_capacity > 0.6 * item, 1, 0)\n    \n    # Combine the priority and penalty scores\n    scores = priority + penalty\n    \n    # Normalize the scores to ensure they are between 0 and 1\n    scores = scores / np.max(scores)\n    \n    return scores",
          "objective": 0.03441,
          "other_inf": null
     },
     {
          "algorithm": "Prioritizing bins that have less than 20% free capacity and penalizing bins that have more than 60% of the item's capacity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the free capacity of each bin\n    free_capacity = np.maximum(bins - item, 0)\n    \n    # Prioritize bins with less than 20% free capacity\n    priority = np.where(free_capacity < 0.2 * bins, 1, 0)\n    \n    # Penalize bins with more than 60% of the item's capacity\n    penalty = np.where(free_capacity > 0.6 * item, 1, 0)\n    \n    # Calculate the score for each bin\n    scores = (priority + penalty) / (1 + penalty)\n    \n    return scores",
          "objective": 0.03562,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm prioritizing bins with less than 20% free capacity and penalizing bins that have more than 30% of the item's capacity while decreasing the penalty term to zero for bins with less than 40% free capacity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the free capacity of each bin\n    free_capacity = np.maximum(bins - item, 0)\n    \n    # Prioritize bins with less than 20% free capacity\n    priority = np.where(free_capacity < 0.2 * bins, 1, 0)\n    \n    # Penalize bins that have more than 30% of the item's capacity\n    penalty = np.where(free_capacity > 0.3 * item, 1, 0)\n    \n    # Decrease the penalty term to zero for bins with less than 40% free capacity\n    penalty = np.where(free_capacity < 0.4 * bins, 0, penalty)\n    \n    # Calculate the final score for each bin\n    scores = priority + penalty\n    \n    return scores",
          "objective": 0.03572,
          "other_inf": null
     },
     {
          "algorithm": "Algorithm for minimizing the number of used bins: Prioritize bins that can fit the item leaving less than 20% free capacity, and penalize bins that leave more than 40% free capacity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the free capacity of each bin\n    free_capacity = bins - item\n    \n    # Prioritize bins that can fit the item leaving less than 20% free capacity\n    priority_bins = np.where(free_capacity < 0.2 * bins, 1, 0)\n    \n    # Penalize bins that leave more than 40% free capacity\n    penalty_bins = np.where(free_capacity > 0.4 * bins, 1, 0)\n    \n    # Combine the prioritization and penalization scores\n    scores = priority_bins + penalty_bins\n    \n    return scores",
          "objective": 0.03582,
          "other_inf": null
     },
     {
          "algorithm": "Prioritize bins that can fit the item leaving less than 20% free capacity, and penalizing bins that leave more than 40% free capacity based on the item size.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the free capacity of each bin\n    free_capacity = bins - item\n    \n    # Prioritize bins that can fit the item leaving less than 20% free capacity\n    priority_mask = (free_capacity < 0.2 * bins) & (free_capacity >= 0)\n    priority_scores = np.where(priority_mask, 1, 0)\n    \n    # Penalize bins that leave more than 40% free capacity based on the item size\n    penalty_mask = (free_capacity > 0.4 * bins) & (free_capacity <= 0.6 * bins)\n    penalty_scores = np.where(penalty_mask, 1, 0)\n    \n    # Combine the priority and penalty scores\n    scores = priority_scores + penalty_scores\n    \n    return scores",
          "objective": 0.03592,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Assign the item to the bin with minimum free capacity, penalized if the free capacity is at least 25% of the bin, and increase the score if the free capacity is at most 5%",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the free capacity of each bin\n    free_capacity = bins - item\n    \n    # Penalize bins with free capacity at least 25% of the bin\n    penalty = np.where(free_capacity >= 0.25 * bins, 1, 0)\n    \n    # Increase the score for bins with free capacity at most 5%\n    bonus = np.where(free_capacity <= 0.05 * bins, 1, 0)\n    \n    # Calculate the total score for each bin\n    scores = penalty + bonus\n    \n    return scores",
          "objective": 0.03622,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Prioritizing bins that have less than 25% free capacity and penalizing bins that have more than 75% of the item's capacity",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the free capacity of each bin\n    free_capacity = np.maximum(0, bins - item)\n    \n    # Calculate the score for each bin based on its free capacity\n    scores = np.where(free_capacity < 0.25 * bins, 1 + (0.25 - free_capacity / bins), 0)\n    scores = np.where(free_capacity > 0.75 * bins, 1 - (free_capacity - 0.75 * bins) / bins, scores)\n    \n    return scores",
          "objective": 0.03632,
          "other_inf": null
     },
     {
          "algorithm": " Penalize bins with more than 20% excessive capacity and reward bins with more than 65% of their capacity, considering the item's size and the average capacity utilization of all bins.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the excess capacity of each bin\n    excess_capacity = bins - item\n    \n    # Calculate the percentage of excess capacity for each bin\n    percent_excess = excess_capacity / bins * 100\n    \n    # Penalize bins with more than 20% excess capacity\n    penalized_bins = np.where(percent_excess > 20, 0, 1)\n    \n    # Reward bins with more than 65% of their capacity\n    rewarded_bins = np.where(percent_excess > 65, 1, 0)\n    \n    # Combine the penalties and rewards\n    scores = penalized_bins + rewarded_bins\n    \n    return scores",
          "objective": 0.03652,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Penalizing bins with more than 15% excessive capacity and rewarding bins with more than 75% of their capacity, considering the item's size.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the excess capacity of each bin\n    excess_capacity = bins - item\n    \n    # Calculate the percentage of excess capacity for each bin\n    percent_excess = excess_capacity / bins * 100\n    \n    # Reward bins with more than 75% of their capacity\n    rewards = np.where(percent_excess > 75, 1, 0)\n    \n    # Penalize bins with more than 15% excess capacity\n    penalties = np.where(percent_excess > 15, -1, 0)\n    \n    # Combine rewards and penalties to get the final score\n    scores = rewards + penalties\n    \n    return scores",
          "objective": 0.03753,
          "other_inf": null
     },
     {
          "algorithm": " Prioritize bins that can fit the item leaving less than 30% free capacity, penalized bins that have more than 30% free capacity, and assign a small bonus to bins that leave less than 10% free capacity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the free capacity of each bin\n    free_capacity = bins - item\n    \n    # Penalize bins with more than 30% free capacity\n    penalty = np.where(free_capacity > (bins * 0.3), 0, (bins * 0.3) - free_capacity)\n    \n    # Bonus for bins with less than 10% free capacity\n    bonus = np.where(free_capacity < (bins * 0.1), (bins * 0.1) - free_capacity, 0)\n    \n    # Calculate the total score for each bin\n    scores = penalty + bonus\n    \n    return scores",
          "objective": 0.03803,
          "other_inf": null
     },
     {
          "algorithm": "Algorithm with a score function that penalizes bins with less than 25% capacity, gives priority to bins with less than 15% capacity, and doubles the penalty for bins with less than 5% capacity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the percentage of capacity remaining in each bin\n    percent_remaining = (bins - item) / bins\n    \n    # Penalize bins with less than 25% capacity\n    penalties = np.where(percent_remaining < 0.25, 1, 0)\n    \n    # Give priority to bins with less than 15% capacity\n    priorities = np.where(percent_remaining < 0.15, 2, 1)\n    \n    # Double the penalty for bins with less than 5% capacity\n    double_penalty = np.where(percent_remaining < 0.05, 4, 1)\n    \n    # Calculate the total score for each bin\n    scores = penalties * priorities * double_penalty\n    \n    return scores",
          "objective": 0.03833,
          "other_inf": null
     }
]