[
     {
          "algorithm": "The new algorithm prioritizes larger bins by their rest capacity and penalizes smaller ones, while introducing a random factor based on the item's size relative to bin capacity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the rest capacity of each bin\n    rest_capacity = bins - item\n    \n    # Prioritize larger bins by their rest capacity\n    priority = np.argsort(-rest_capacity)\n    \n    # Penalize smaller bins\n    penalty = np.exp(-np.log(rest_capacity))\n    \n    # Introduce a random factor based on the item's size relative to bin capacity\n    randomness = np.random.randint(0, 100, size=len(bins))\n    \n    # Combine the priority, penalty, and randomness to get the final score\n    scores = (priority + penalty + randomness) / 3\n    \n    return scores",
          "objective": 0.01912,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Prioritize larger bins by their inverse rest capacity, penalizing smaller ones, while introducing a random factor proportional to the item's size relative to the maximum capacity",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the inverse rest capacity for each bin\n    inv_rest_capacity = 1 / (bins - item)\n    \n    # Calculate the penalty for smaller bins\n    penalty = np.maximum(0, (bins - item) / (bins + 1))\n    \n    # Calculate the random factor\n    rand_factor = np.random.randint(0, 100, size=len(bins))\n    \n    # Calculate the final score for each bin\n    scores = inv_rest_capacity * (1 - penalty) + rand_factor\n    \n    return scores",
          "objective": 0.02022,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Prioritize bins with larger rest capacity and higher total capacity by combining inverse rest capacity and total capacity, introducing randomness to prevent constant assignment to the same bin.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the inverse rest capacity and total capacity for each bin\n    inv_rest_capacity = 1 / (bins - item)\n    total_capacity = np.sum(bins)\n    \n    # Combine the inverse rest capacity and total capacity using a weighted average\n    weighted_average = 0.5 * inv_rest_capacity + 0.5 * total_capacity\n    \n    # Add randomness to the scores to prevent constant assignment to the same bin\n    randomness = np.random.randint(0, 10, size=len(bins))\n    scores = weighted_average + randomness\n    \n    return scores",
          "objective": 0.02535,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Prioritize bins by inverse rest capacity, introducing randomness with a random number sampled from a uniform distribution with a range [0, constant].",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the inverse rest capacity for each bin\n    inv_rest_capacity = 1 / (bins - item)\n    \n    # Add randomness to the scores\n    randomness = np.random.uniform(0, 1, size=len(bins))\n    scores = inv_rest_capacity + randomness\n    \n    # Return the scores\n    return scores",
          "objective": 0.02696,
          "other_inf": null
     },
     {
          "algorithm": "Prioritize bins by dividing the inverse rest capacity by the bin index, introducing randomness, and then taking the logarithm of the result.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the inverse rest capacity for each bin\n    inv_rest_capacity = 1 / (bins - item)\n    \n    # Add randomness to the scores\n    randomness = np.random.rand(len(bins))\n    scores = inv_rest_capacity + randomness\n    \n    # Take the logarithm of the scores\n    scores = np.log(scores)\n    \n    return scores",
          "objective": 0.02767,
          "other_inf": null
     },
     {
          "algorithm": "New Algorithm: Prioritize bins by adding randomness to the sum of inverse rest capacity with a random number between 0 and 1",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the inverse rest capacity for each bin\n    inv_rest_capacity = 1 / (bins - item)\n    \n    # Add randomness to the scores\n    random_component = np.random.uniform(0, 1, len(bins))\n    scores = inv_rest_capacity + random_component\n    \n    # Return the scores\n    return scores",
          "objective": 0.02817,
          "other_inf": null
     },
     {
          "algorithm": "New Algorithm: Prioritize bins by adding a random number between 0 and 1 to the sum of the inverse rest capacity with the bin's capacity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the inverse rest capacity for each bin\n    inv_rest_capacity = 1 / (bins - item)\n    \n    # Add a random number between 0 and 1 to the sum of the inverse rest capacity\n    # and the bin's capacity\n    scores = inv_rest_capacity + np.random.uniform(size=len(bins))\n    \n    # Return the scores\n    return scores",
          "objective": 0.02857,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm introduces a configurable parameter alpha that balances between prioritizing remaining capacity (alpha < 1) and randomness (alpha > 1) in the score function: score = (1 - alpha) * inv_rest_capacity + alpha * rand_factor.",
          "code": "import numpy as np\n\ndef score(item, bins, alpha=0.5):\n    # Calculate the inverse of the remaining capacity for each bin\n    inv_rest_capacity = 1 / (bins - item)\n    \n    # Calculate the random factor for each bin\n    rand_factor = np.random.rand(len(bins))\n    \n    # Calculate the score for each bin using the formula provided\n    scores = (1 - alpha) * inv_rest_capacity + alpha * rand_factor\n    \n    return scores",
          "objective": 0.02888,
          "other_inf": null
     },
     {
          "algorithm": "Calculate the score by dividing the inverse rest capacity by the total capacity and introduce randomness to balance diversity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the inverse rest capacity for each bin\n    inv_rest_capacity = 1 / (bins - item)\n    \n    # Add randomness to balance diversity\n    randomness = np.random.uniform(0, 1, len(bins))\n    \n    # Calculate the final score for each bin\n    scores = inv_rest_capacity + randomness\n    \n    return scores",
          "objective": 0.02898,
          "other_inf": null
     },
     {
          "algorithm": "New Algorithm: Prioritize bins by adding randomness to the sum of inverse rest capacity with a random number between 0 and 1.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the inverse rest capacity for each bin\n    inv_rest_capacity = 1 / (bins - item)\n    \n    # Add randomness to the scores\n    random_component = np.random.rand(len(bins))\n    scores = inv_rest_capacity + random_component\n    \n    # Return the scores\n    return scores",
          "objective": 0.02908,
          "other_inf": null
     },
     {
          "algorithm": "Prioritize bins by subtracting inverse rest capacity from total capacity, and introducing randomness to enhance utilization.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the inverse rest capacity for each bin\n    inv_rest_capacity = 1 / (bins - item)\n    \n    # Add randomness to the scores to enhance utilization\n    randomness = np.random.uniform(0, 1, size=len(bins))\n    scores = inv_rest_capacity + randomness\n    \n    # Return the scores for the bins\n    return scores",
          "objective": 0.02928,
          "other_inf": null
     },
     {
          "algorithm": "The backbone idea of the provided algorithms is to combine the inverse rest capacity with a random factor to prioritize bins with higher remaining capacity while introducing randomness to prevent constant assignment to the same bin. The new algorithm uses a score function that combines a random factor with the number of bins to divide the inverse rest capacity and then adds a constant value to the score.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the inverse rest capacity for each bin\n    inv_rest_capacity = 1 / (bins - item)\n    \n    # Add a random factor to prioritize bins with higher remaining capacity\n    random_factor = np.random.uniform(0, 1, size=len(bins))\n    inv_rest_capacity += random_factor\n    \n    # Divide by the number of bins to normalize the scores\n    scores = inv_rest_capacity / len(bins)\n    \n    # Add a constant value to the scores to ensure that all bins are considered\n    scores += 1\n    \n    return scores",
          "objective": 0.02938,
          "other_inf": null
     },
     {
          "algorithm": "New Algorithm: Prioritize bins by adding randomness to the sum of inverse rest capacity with a random number between 0 and 0.5.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the inverse rest capacity for each bin\n    inv_rest_capacity = 1 / (bins - item)\n    \n    # Add randomness to the scores\n    random_component = np.random.uniform(0, 0.5, size=len(bins))\n    scores = inv_rest_capacity + random_component\n    \n    # Return the scores\n    return scores",
          "objective": 0.03018,
          "other_inf": null
     },
     {
          "algorithm": "Prioritize bins by inverse rest capacity, introducing randomness with a constant value to balance diversity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the inverse rest capacity for each bin\n    inv_rest_capacity = 1 / (bins - item)\n    \n    # Add randomness to the scores to balance diversity\n    randomness = np.random.uniform(0, 1, len(bins))\n    scores = inv_rest_capacity + randomness\n    \n    # Normalize the scores to ensure they sum to 1\n    scores = scores / np.sum(scores)\n    \n    return scores",
          "objective": 0.03028,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Prioritize bins by calculating the product of the inverse rest capacity with a score based on the item's size relative to the bin capacity and applying a random factor.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the product of the inverse rest capacity with a score based on the item's size relative to the bin capacity\n    scores = (1 / (bins - item)) * (item / bins)\n    \n    # Apply a random factor to the scores\n    scores += np.random.uniform(0, 1, size=len(bins))\n    \n    # Return the scores\n    return scores",
          "objective": 0.03069,
          "other_inf": null
     },
     {
          "algorithm": " Modified algorithm assigns the item to the bin with the highest score calculated by subtracting a squared random factor from the inverse rest capacity to prioritize bins with lower remaining capacity. ",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the inverse rest capacity for each bin\n    inv_rest_capacity = 1 / (bins - item)\n    \n    # Subtract a squared random factor from the inverse rest capacity\n    # to prioritize bins with lower remaining capacity\n    random_factor = np.random.uniform(0, 1, size=len(bins)) ** 2\n    scores = inv_rest_capacity - random_factor\n    \n    # Return the scores for the bins\n    return scores",
          "objective": 0.03129,
          "other_inf": null
     },
     {
          "algorithm": "New Algorithm: Calculate a score for each bin by dividing the inverse rest capacity by a term that combines the item size and normalized bin capacity, and then adding a random factor to prioritize bins with lower remaining capacity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the inverse rest capacity for each bin\n    inv_rest_capacity = 1 / (bins - item)\n    \n    # Calculate the normalized bin capacity\n    norm_bin_capacity = bins / np.sum(bins)\n    \n    # Combine the item size and normalized bin capacity\n    combined = item * norm_bin_capacity\n    \n    # Add a random factor to prioritize bins with lower remaining capacity\n    random_factor = np.random.rand(len(bins))\n    \n    # Calculate the final score for each bin\n    scores = inv_rest_capacity + combined + random_factor\n    \n    return scores",
          "objective": 0.0329,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm multiplies the inverse of the remaining capacity by a constant factor to prioritize bins with higher remaining capacity, adds a random factor to introduce randomness, and divides the result by the total capacity to normalize the scores.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the inverse of the remaining capacity\n    inv_remaining_capacity = 1 / (bins - item)\n    \n    # Multiply the inverse of the remaining capacity by a constant factor\n    # to prioritize bins with higher remaining capacity\n    priority_factor = 0.5\n    scores = inv_remaining_capacity * priority_factor\n    \n    # Add a random factor to introduce randomness\n    random_factor = np.random.uniform(size=len(bins))\n    scores += random_factor\n    \n    # Normalize the scores by dividing them by the total capacity\n    total_capacity = np.sum(bins)\n    scores /= total_capacity\n    \n    return scores",
          "objective": 0.03401,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm uses a score function that multiplies the inverse rest capacity with a constant factor to prioritize bins with higher remaining capacity and then adding a random factor to introduce randomness and prevent constant assignment to the same bin.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the inverse rest capacity for each bin\n    inv_rest_capacity = 1 / (bins - item)\n    \n    # Multiply the inverse rest capacity by a constant factor to prioritize bins with higher remaining capacity\n    priority = inv_rest_capacity * 0.5\n    \n    # Add a random factor to introduce randomness and prevent constant assignment to the same bin\n    randomness = np.random.uniform(size=len(bins))\n    \n    # Combine the priority and randomness factors to get the final score for each bin\n    scores = priority + randomness\n    \n    return scores",
          "objective": 0.03451,
          "other_inf": null
     },
     {
          "algorithm": "Prioritize smaller bins by their inverse rest capacity and penalize larger ones, while introducing a random factor based on the item's size relative to bin capacity",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the inverse rest capacity of each bin\n    inv_rest_capacity = 1 / (bins - item)\n    \n    # Penalize larger bins by adding a random factor\n    random_factor = np.random.uniform(0, 1, size=len(bins))\n    penalized_inv_rest_capacity = inv_rest_capacity + random_factor\n    \n    # Calculate the scores for each bin\n    scores = penalized_inv_rest_capacity * (1 - random_factor)\n    \n    return scores",
          "objective": 0.03471,
          "other_inf": null
     }
]