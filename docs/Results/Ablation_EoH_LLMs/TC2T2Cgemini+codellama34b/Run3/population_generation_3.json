[
     {
          "algorithm": "Modified algorithm uses a score function that combines inverse rest capacity and a random factor to prioritize bins with higher remaining capacity while introducing randomness to prevent constant assignment to the same bin.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the inverse rest capacity for each bin\n    inv_rest_capacity = 1 / (bins - item)\n    \n    # Add a random factor to introduce randomness\n    random_factor = np.random.rand(len(bins))\n    \n    # Combine the inverse rest capacity and random factor\n    scores = inv_rest_capacity + random_factor\n    \n    # Return the scores\n    return scores",
          "objective": 0.02696,
          "other_inf": null
     },
     {
          "algorithm": "Modified algorithm: Calculate the scores for each bin by taking the minimum between the rest capacity of the bin and the size of the item. Then, multiply the scores by a weight that is inversely proportional to the bin's maximum capacity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the scores for each bin\n    scores = np.minimum(bins, item) * (1 / bins)\n    \n    # Return the scores\n    return scores",
          "objective": 0.03984,
          "other_inf": null
     },
     {
          "algorithm": "Algorithm 6: Score each bin by subtracting the squared difference between the bin's rest capacity and half of the bin's maximum capacity from the bin's maximum capacity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the squared difference between the bin's rest capacity and half of the bin's maximum capacity\n    diff = (bins - item) ** 2\n    \n    # Subtract the squared difference from the bin's maximum capacity\n    scores = bins - diff\n    \n    # Return the scores for the bins\n    return scores",
          "objective": 0.04045,
          "other_inf": null
     },
     {
          "algorithm": "\nNew algorithm: The score function will calculate the scores for each bin based on the remaining capacity, with a penalty for bins with maximum capacity to minimize the number of used bins.\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = (max_capacity - bins) + (bins == max_capacity) * item\n    return scores",
          "objective": 0.04105,
          "other_inf": null
     },
     {
          "algorithm": "Prioritize bins with high remaining capacity, then low fullness level. Penalize bins with zero remaining capacity, then high fullness level.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the remaining capacity of each bin\n    remaining_capacity = bins - item\n    \n    # Prioritize bins with high remaining capacity\n    priority = np.argsort(-remaining_capacity)\n    \n    # Penalize bins with zero remaining capacity\n    penalty = np.where(remaining_capacity == 0, 1, 0)\n    \n    # Combine the priority and penalty scores\n    scores = priority + penalty\n    \n    return scores",
          "objective": 0.04125,
          "other_inf": null
     },
     {
          "algorithm": "Modified algorithm calculates scores inversely proportional to the rest capacities of bins, prioritizing bins with higher remaining capacity to minimize the number of used bins.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the inverse of the rest capacities of the bins\n    inv_rest_capacities = 1 / (bins - item)\n    \n    # Prioritize bins with higher remaining capacity\n    scores = np.argsort(inv_rest_capacities)\n    \n    # Return the scores\n    return scores",
          "objective": 0.04155,
          "other_inf": null
     },
     {
          "algorithm": "Based on the common idea of prioritizing bins with higher rest capacity, the new algorithm assigns scores by taking the square of the rest capacity and dividing it by the index of the bin.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the rest capacity of each bin\n    rest_capacity = bins - item\n    \n    # Prioritize bins with higher rest capacity\n    priority = np.argsort(rest_capacity)\n    \n    # Assign scores based on the square of the rest capacity and the index of the bin\n    scores = (rest_capacity**2 / priority).astype(np.float32)\n    \n    return scores",
          "objective": 0.04175,
          "other_inf": null
     },
     {
          "algorithm": "\nNew algorithm: \n1. Initialize an empty array named 'scores' with the same length as the input array 'bins'.\n2. Calculate the scores for each bin by taking the minimum between the rest capacity of the bin and the size of the item.\n3. Set the score of a bin with maximum capacity to a very small negative value to prevent it from being used.\n4. Return the 'scores' array.\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.minimum(bins, item)\n    max_capacity_bin_index = np.argmax(bins)\n    scores[max_capacity_bin_index] = -99999999\n    return scores",
          "objective": 0.04226,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Calculate the square root of the ratio of item size to each bin's rest capacity while considering the condition that a bin's rest capacity should be larger than the item size.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the square root of the ratio of item size to each bin's rest capacity\n    scores = np.sqrt(item / bins)\n    \n    # Filter out bins with rest capacity less than or equal to the item size\n    scores = scores[bins > item]\n    \n    return scores",
          "objective": 0.04236,
          "other_inf": null
     },
     {
          "algorithm": "New Algorithm: The modified algorithm considers the volume of the item and the remaining capacity of the bins to calculate scores, minimizing the number of used bins and the total unused space.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the volume of the item\n    item_volume = item ** 3\n    \n    # Calculate the remaining capacity of each bin\n    bin_capacities = bins - item_volume\n    \n    # Calculate the score for each bin\n    scores = np.zeros(len(bins))\n    for i in range(len(bins)):\n        if bin_capacities[i] >= 0:\n            scores[i] = (bin_capacities[i] / item_volume) * (1 - (item_volume / bins[i]))\n        else:\n            scores[i] = 0\n    \n    return scores",
          "objective": 0.04266,
          "other_inf": null
     },
     {
          "algorithm": "\nDescription: \nThe algorithm calculates the scores for each bin based on their rest capacities and assigns the item to the bin with the maximum score, minimizing the number of used bins.\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = bins / np.maximum((bins - item), 1)\n    scores[bins == bins.max()] = 0\n    return scores",
          "objective": 0.04306,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: This algorithm calculates scores for each bin based on the product of rest capacity and inverse of bin index, giving higher priority to bins with larger capacity and lower index.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the scores for each bin based on the product of its rest capacity and inverse of its index\n    scores = np.multiply(bins, 1 / (np.arange(len(bins)) + 1))\n    \n    # Return the scores for the bins\n    return scores",
          "objective": 0.04407,
          "other_inf": null
     },
     {
          "algorithm": "Prioritize bins with low fullness level, then high remaining capacity. Penalize bins with high fullness level, then zero remaining capacity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the fullness level of each bin\n    fullness = (bins - item) / bins\n    \n    # Prioritize bins with low fullness level\n    priority_score = 1 - fullness\n    \n    # Penalize bins with high fullness level\n    penalty_score = fullness ** 2\n    \n    # Combine the priority and penalty scores\n    scores = priority_score + penalty_score\n    \n    # Normalize the scores to ensure they are between 0 and 1\n    scores = scores / np.max(scores)\n    \n    return scores",
          "objective": 0.04417,
          "other_inf": null
     },
     {
          "algorithm": "Score each bin by multiplying the ratio of the item's size to the bin's capacity with the bin's maximum capacity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the ratio of the item's size to the bin's capacity\n    ratios = np.divide(item, bins)\n    \n    # Multiply the ratios by the bin's maximum capacity\n    scores = np.multiply(ratios, bins)\n    \n    # Return the scores\n    return scores",
          "objective": 0.04518,
          "other_inf": null
     },
     {
          "algorithm": "\nNew algorithm: \n1. Calculate the ratio of item size to each bin's rest capacity.\n2. Calculate the score for each bin based on the ratio and the condition of the rest capacity.\n3. Return the scores for the bins for assignment. \n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.zeros_like(bins, dtype=float)\n    for i in range(len(bins)):\n        if bins[i] == item:\n            scores[i] = -1\n        elif bins[i] > item:\n            scores[i] = item / bins[i]\n    return scores",
          "objective": 0.05071,
          "other_inf": null
     },
     {
          "algorithm": "Algorithm: Calculate bin scores based on the product of rest capacity and square root of bin index, favoring larger capacity bins with lower indices for higher scores.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the product of the rest capacity and the square root of the bin index\n    scores = np.sqrt(bins) * (bins - item)\n    \n    # Favor larger capacity bins with lower indices for higher scores\n    scores[np.where(bins > item)] = np.inf\n    \n    return scores",
          "objective": 0.05383,
          "other_inf": null
     },
     {
          "algorithm": "The score function prioritizes bins with higher remaining capacity and lower fullness level, while penalizing bins with maximum capacity and high fullness level to minimize the number of used bins.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the remaining capacity and fullness level for each bin\n    remaining_capacity = bins - item\n    fullness_level = (bins - remaining_capacity) / bins\n    \n    # Prioritize bins with higher remaining capacity and lower fullness level\n    priority = np.where(remaining_capacity > 0, remaining_capacity, 0) + \\\n                   np.where(fullness_level < 1, 1 - fullness_level, 0)\n    \n    # Penalize bins with maximum capacity and high fullness level\n    penalty = np.where(bins == max(bins), 1, 0) + \\\n                  np.where(fullness_level >= 0.5, 1, 0)\n    \n    # Combine the priority and penalty scores\n    scores = priority * (1 - penalty)\n    \n    return scores",
          "objective": 0.05544,
          "other_inf": null
     },
     {
          "algorithm": "\nNew algorithm: \n1. Calculate the available capacity for each bin by subtracting the item size from the rest capacities of feasible bins. \n2. Set the score for each bin to 0 if the available capacity is less than the item size, otherwise set the score to the available capacity. \n3. If the rest capacity of a bin equals the maximum capacity, set the score to -1 to indicate that it will not be used. \n4. Return the scores for the bins for assignment. \n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    available_capacity = bins - item\n    scores = np.where(available_capacity < item, 0, available_capacity)\n    scores = np.where(bins == np.max(bins), -1, scores)\n    return scores",
          "objective": 0.05795,
          "other_inf": null
     },
     {
          "algorithm": "\n  The new algorithm will calculate the score for each bin based on the rest capacity, using a weighted average of the rest capacity and the inverse of the bin number, then return the scores for each bin for assignment. \n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    num_bins = len(bins)\n    weights = np.arange(1, num_bins + 1)\n    normalized_capacity = 1 - (bins / np.max(bins))\n    scores = normalized_capacity * weights\n    return scores",
          "objective": 0.05815,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: The score function will calculate the scores for each bin based on a combination of rest capacity and bin index, prioritizing bins with higher rest capacity and assigning a reasonable penalty for bins with a high index to encourage using fewer bins.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the scores for each bin based on a combination of rest capacity and bin index\n    scores = np.zeros(len(bins))\n    for i, bin in enumerate(bins):\n        if bin >= item:\n            scores[i] = (bin - item) / (i + 1)\n        else:\n            scores[i] = 0\n    \n    # Penalize bins with high indices to encourage using fewer bins\n    penalties = np.arange(len(bins)) ** 2\n    scores -= penalties\n    \n    return scores",
          "objective": 0.06027,
          "other_inf": null
     }
]