[
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = bins.max()\n    scores = np.where(bins == max_capacity, 0, -(bins - item) / item + 1)\n    return scores",
          "objective": 0.03803,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = bins.max()\n    scores = np.zeros_like(bins)\n    mask = bins != max_capacity\n    scores[mask] = (2 * max_capacity - bins[mask]) / (1 + np.square(bins[mask] - item))\n    return scores",
          "objective": 0.03813,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = bins.max()\n    scores = np.zeros_like(bins)\n    mask = bins != max_capacity\n\n    scores[mask] = (max_capacity - bins[mask]) * (bins[mask] >= item) / (1 + (bins[mask] - item) ** 2)\n\n    return scores",
          "objective": 0.03823,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = np.zeros_like(bins)\n    mask = bins < max_capacity\n    scores[mask] = ((max_capacity - bins[mask] + 1) * (bins[mask] >= item)) / ((bins[mask] - item + 1) ** 2 + 1)\n    return scores",
          "objective": 0.03864,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = np.where(bins == max_capacity, item / (bins + 1), (max_capacity - bins + 1) / item)\n    return scores",
          "objective": 0.03874,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = np.where(bins == max_capacity, item / (bins + 1), (max_capacity - bins) / item)\n    return scores",
          "objective": 0.03884,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = np.zeros_like(bins)\n    mask = bins == max_capacity\n    scores[mask] = item / (bins[mask] + 1)\n    scores[~mask] = 1 - bins[~mask] / item\n    scores[bins == item] = 1.5\n    return scores",
          "objective": 0.03904,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.zeros_like(bins)\n    scores[bins >= item] = item / (bins[bins >= item] - item + 1)\n    return scores",
          "objective": 0.03914,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.where(bins == bins.max(), 0, bins // (bins - item + 1))\n    return scores",
          "objective": 0.03924,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = np.zeros_like(bins)\n    mask = bins < max_capacity\n    scores[mask] = (2 * max_capacity - bins[mask]) / (np.abs(bins[mask] - item) + 1)\n    return scores",
          "objective": 0.03944,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    mask = bins == max_capacity\n    scores = np.where(mask, 0, max_capacity // (bins - item + 1))\n    return scores",
          "objective": 0.03954,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.zeros_like(bins)\n    max_capacity = np.max(bins)\n    mask = bins != max_capacity\n    scores[mask] = (2 * (max_capacity - bins[mask])) / (np.abs(bins[mask] - item) + 1)\n    return scores",
          "objective": 0.03964,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.zeros_like(bins)\n    max_capacity = np.max(bins)\n    mask = bins != max_capacity\n    scores[mask] = (max_capacity - item + 1) / (bins[mask] - item + 1)\n    return scores",
          "objective": 0.03974,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.exp(-bins/item)\n    return scores",
          "objective": 0.03984,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = np.zeros_like(bins)\n    mask = bins < max_capacity\n    scores[mask] = ((max_capacity - bins[mask]) ** 4) / (item ** 4)\n    return scores",
          "objective": 0.03994,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.zeros_like(bins)\n    mask = bins != bins.max()\n    scores[mask] = 1 / np.maximum(bins[mask] - item, 1)\n    return scores",
          "objective": 0.04014,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = np.where(bins == max_capacity, item, max_capacity - bins + 1)\n    return scores",
          "objective": 0.04025,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = (bins == bins.max()) - bins/item\n    return scores",
          "objective": 0.04035,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = (1 / np.maximum((bins - item), 1)) * (bins != bins.max())\n    return scores",
          "objective": 0.04045,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = np.zeros_like(bins)\n    mask = bins < max_capacity\n    scores[mask] = (4 * (max_capacity - bins[mask])) / item\n    return scores",
          "objective": 0.04055,
          "other_inf": null
     }
]