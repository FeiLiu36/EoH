[
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.zeros_like(bins)\n    max_capacity = np.max(bins)\n    scores[bins >= item] = item / (bins[bins >= item] - item + 1)\n    return scores",
          "objective": 0.03914,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = bins // (bins - item + 1)\n    max_capacity = np.max(bins)\n    np.putmask(scores, bins == max_capacity, 0)\n    return scores",
          "objective": 0.03924,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.where(bins == bins.max(), 0, bins / (bins - item + 1))\n    return scores",
          "objective": 0.03984,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.zeros_like(bins)\n    mask = bins != bins.max()\n    scores[mask] = 1 / np.maximum((bins[mask] - item), 1)\n    return scores",
          "objective": 0.04014,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = np.zeros_like(bins)\n    scores[bins == max_capacity] = item\n    scores[bins != max_capacity] = max_capacity - bins[bins != max_capacity] + 1\n    return scores",
          "objective": 0.04025,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = -bins/item + (bins == bins.max())\n    scores[bins < item] = 0\n    return scores",
          "objective": 0.04035,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = (1 / np.maximum((bins - item), 1)) * (bins != bins.max())\n    return scores",
          "objective": 0.04045,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_score = np.max(bins)\n    scores = np.zeros_like(bins)\n    \n    scores[bins >= item] = (item / bins[bins >= item]) - (max_score == bins)\n    \n    return scores",
          "objective": 0.04095,
          "other_inf": null
     },
     {
          "algorithm": "\nNew algorithm: The score function will calculate the scores for each bin based on the remaining capacity, with a penalty for bins with maximum capacity to minimize the number of used bins.\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = (max_capacity - bins) + (bins == max_capacity) * item\n    return scores",
          "objective": 0.04105,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    capacities = bins.copy()  # create a copy of bins\n    capacities[capacities == capacities.max()] = 0  # Ignore bins with maximum capacity\n\n    scores = np.zeros_like(bins)  \n    scores[capacities >= item] = -capacities[capacities >= item]/item + 1\n\n    return scores",
          "objective": 0.04125,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.zeros_like(bins)\n    indices = np.where(bins >= item)\n    scores[indices] = -bins[indices]/item + (bins[indices] == bins[indices].max())\n    return scores",
          "objective": 0.04216,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.zeros_like(bins)\n    bins = bins - item\n    mask = bins == np.max(bins)\n    scores[mask] = -99999999\n    return scores",
          "objective": 0.04226,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    mask = bins == max_capacity\n    scores = np.zeros_like(bins)\n    scores[~mask] = (bins[~mask] / np.maximum(bins[~mask] - item, 1))\n    return scores",
          "objective": 0.04256,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = np.zeros_like(bins)\n    mask = bins == max_capacity\n    scores[~mask] = (max_capacity - bins[~mask]) / item\n    return scores",
          "objective": 0.04286,
          "other_inf": null
     },
     {
          "algorithm": "\nDescription: \nThe algorithm calculates the scores for each bin based on their rest capacities and assigns the item to the bin with the maximum score, minimizing the number of used bins.\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = bins / np.maximum((bins - item), 1)\n    scores[bins == bins.max()] = 0\n    return scores",
          "objective": 0.04306,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = (bins - item - 2 * np.arange(len(bins))).astype(float)\n    scores[bins == max_capacity] = -2 * np.arange(len(bins))[bins == max_capacity]\n    return scores",
          "objective": 0.04507,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = np.zeros_like(bins)\n\n    mask = bins < max_capacity\n    scores[mask] = (max_capacity - item) / (max_capacity - bins[mask])\n\n    return scores",
          "objective": 0.04588,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    mask = (bins > item) & (bins < max_capacity)\n    scores = np.zeros_like(bins)\n    scores[mask] = item / (bins[mask] - item + 1)\n    return scores",
          "objective": 0.04668,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n  scores = np.zeros_like(bins)\n  max_capacity = np.max(bins)\n  mask1 = bins < max_capacity\n  mask2 = bins >= item\n  \n  scores[mask1] = bins[mask1] / (bins[mask1] - item + 1)\n  scores[bins == item] = -1\n  scores[bins == max_capacity] = -2\n  scores[~(mask1 | mask2)] = -3\n  \n  return scores",
          "objective": 0.04689,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the scores\n    scores = np.zeros_like(bins)\n    mask = bins > item\n    scores[mask] = bins[mask] / (bins[mask] - item)\n    scores[bins == bins.max()] = 0\n    \n    return scores",
          "objective": 0.04709,
          "other_inf": null
     }
]