[
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = np.where(bins == max_capacity, 0, -(bins - item) / item + 1)\n    return scores",
          "objective": 0.03803,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = np.zeros_like(bins)\n    scores = np.where(bins == max_capacity, item / (bins + 1), (max_capacity - bins + 1) / item)\n    return scores",
          "objective": 0.03874,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = np.zeros_like(bins)\n    scores = np.where(bins == max_capacity, item / (bins + 1), (max_capacity - bins) / item)\n    return scores",
          "objective": 0.03884,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.zeros_like(bins)\n    scores[bins >= item] = item / (bins[bins >= item] - item + 1)\n    return scores",
          "objective": 0.03914,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = bins // (bins - item + 1)\n    max_capacity = np.max(bins)\n    np.putmask(scores, bins == max_capacity, 0)\n    return scores",
          "objective": 0.03924,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = np.zeros_like(bins)\n    mask = bins < max_capacity\n    scores[mask] = (2 * (max_capacity - bins[mask]) * (bins[mask] >= item)) / (1 + bins[mask] - item)\n    return scores",
          "objective": 0.03964,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.zeros_like(bins)\n    max_capacity = np.max(bins)\n    mask = bins < max_capacity\n    scores[mask] = (max_capacity - bins[mask] + 1) / (bins[mask] - item + 1)\n    return scores",
          "objective": 0.03974,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.exp(-bins/item)\n    return scores",
          "objective": 0.03984,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.zeros_like(bins)\n    mask = bins != bins.max()\n    scores[mask] = 1 / np.maximum(bins[mask] - item, 1)\n    return scores",
          "objective": 0.04014,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = np.zeros_like(bins)\n    scores = np.where(bins == max_capacity, item, max_capacity - bins + 1)\n    return scores",
          "objective": 0.04025,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = (bins == bins.max()).astype(int) - bins/item\n    return scores",
          "objective": 0.04035,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = (1 / np.maximum((bins - item), 1)) * (bins != bins.max())\n    return scores",
          "objective": 0.04045,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = np.zeros_like(bins)\n    mask = bins < max_capacity\n    scores[mask] = (4 * (max_capacity - bins[mask])) / item\n    return scores",
          "objective": 0.04055,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n  scores = np.zeros_like(bins)\n  mask = bins != bins.max()\n  scores[mask] = 1 / (bins[mask] - item + 1)\n  return scores",
          "objective": 0.04095,
          "other_inf": null
     },
     {
          "algorithm": "\nNew algorithm: The score function will calculate the scores for each bin based on the remaining capacity, with a penalty for bins with maximum capacity to minimize the number of used bins.\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = (max_capacity - bins) + (bins == max_capacity) * item\n    return scores",
          "objective": 0.04105,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = np.zeros_like(bins)\n    scores[bins != max_capacity] = -(bins[bins != max_capacity] - item) / item + 1\n    return scores",
          "objective": 0.04115,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = np.zeros_like(bins)\n    scores[bins == max_capacity] = item / (bins[bins == max_capacity] + 1)\n    scores[bins < max_capacity] = 1 - bins[bins < max_capacity] / item\n    return scores",
          "objective": 0.04125,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = np.zeros_like(bins)\n    mask = bins < max_capacity\n    scores[mask] = (3 * (max_capacity - bins[mask])) / item\n    return scores",
          "objective": 0.04135,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = np.zeros_like(bins)\n    \n    mask = bins == max_capacity\n    scores[mask] = item / (bins[mask] + 1)\n    \n    mask = bins < max_capacity\n    scores[mask] = 1 - bins[mask] / (item + 1)\n    \n    return scores",
          "objective": 0.04145,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = -(bins - item) / item + (bins == max_capacity)\n    return scores",
          "objective": 0.04175,
          "other_inf": null
     }
]