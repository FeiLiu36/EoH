[
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = np.zeros_like(bins)\n    \n    for i in range(len(bins)):\n        if bins[i] == max_capacity:\n            scores[i] = 0\n        else:\n            scores[i] = bins[i] / (bins[i] - item + 1e-6)\n    \n    return scores",
          "objective": 0.03904,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = np.where(bins == max_capacity, -1, (item / bins)**2)\n    return scores",
          "objective": 0.03984,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = np.full_like(bins, -1)\n    mask = bins != max_capacity\n    scores[mask] = (item / bins[mask]) ** 2\n    return scores",
          "objective": 0.04095,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = max_capacity - bins + (bins == max_capacity) * item\n    return scores",
          "objective": 0.04105,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    num_bins = len(bins)\n    normalized_capacity = 1 - (bins / np.max(bins))\n    scores = np.power(normalized_capacity, num_bins) * np.arange(num_bins, 0, -1)\n    return scores",
          "objective": 0.04145,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = (2 * bins - item) / (1 + np.arange(len(bins)))\n    scores[bins == np.max(bins)] = -np.inf\n    return scores",
          "objective": 0.04155,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = (bins - item * (np.arange(len(bins)) + 1)) * (bins != max_capacity)\n    return scores",
          "objective": 0.04216,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.minimum(item, bins) / (1 + np.arange(len(bins)))\n    scores[bins == bins.max()] = 0\n    return scores",
          "objective": 0.04226,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    \n    mask = bins == max_capacity\n    scores = np.zeros_like(bins)\n    scores[mask] = 0\n    scores[~mask] = bins[~mask] / (np.maximum(1, bins[~mask] - item) + 1e-6)\n\n    return scores",
          "objective": 0.04236,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.zeros_like(bins)\n    max_capacity = bins.max()\n    \n    for i in range(len(bins)):\n        if bins[i] == max_capacity:\n            scores[i] = 0\n        else:\n            scores[i] = bins[i] / max(1, bins[i] - item)\n    \n    return scores",
          "objective": 0.04256,
          "other_inf": null
     },
     {
          "algorithm": "\nDescription: \nThe algorithm calculates the scores for each bin based on their rest capacities and assigns the item to the bin with the maximum score, minimizing the number of used bins.\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = bins / np.maximum((bins - item), 1)\n    scores[bins == bins.max()] = 0\n    return scores",
          "objective": 0.04306,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = bins - 2 * np.arange(len(bins))\n    scores[bins == max_capacity] = 0\n    return scores",
          "objective": 0.04507,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = np.zeros_like(bins)\n    mask = bins != max_capacity\n    \n    denom = bins - item\n    denom[denom == 0] = 1\n    \n    scores[mask] = denom[mask] / (1 + np.arange(len(bins)))[mask]\n    \n    return scores",
          "objective": 0.04528,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = np.zeros_like(bins)\n    scores[bins == max_capacity] = 0\n    scores[:] = (2 * bins - item) / (1 + np.arange(len(bins)))\n    return scores",
          "objective": 0.04668,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = (max_capacity - bins) / max_capacity\n    scores[bins == max_capacity] = 0\n    scores[bins <= item] = 0\n    return scores",
          "objective": 0.04779,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = np.zeros_like(bins)\n    mask = bins != max_capacity\n    scores[mask] = (bins[mask] - item) / (1 + np.arange(len(bins)))[mask]\n    return scores",
          "objective": 0.0487,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = bins - np.arange(len(bins))\n    scores[bins == max_capacity] = 0\n    return scores",
          "objective": 0.0498,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = np.zeros_like(bins)\n    mask = bins < max_capacity\n    scores[mask] = (max_capacity - item) / (bins[mask] - item)\n    return scores",
          "objective": 0.05051,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.zeros_like(bins, dtype=float)\n    mask = bins > item\n    scores[mask] = item / bins[mask]\n    return scores",
          "objective": 0.05071,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    capacity = bins - item\n    scores = np.where(capacity == bins.max() - item, 0, capacity / np.maximum(capacity, 1))\n    return scores",
          "objective": 0.05091,
          "other_inf": null
     }
]