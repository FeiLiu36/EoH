[
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = np.zeros_like(bins)\n    mask = bins != max_capacity\n    \n    scores[mask] = item / ((bins[mask] - item + 1) * np.log(bins[mask]))\n    return scores",
          "objective": 0.03843,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    mask = bins != max_capacity\n    scores = np.zeros_like(bins)\n    scores[mask] = item / (bins[mask] - item + 1e-6)\n    \n    return scores",
          "objective": 0.03904,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = np.zeros_like(bins)\n    mask = bins != max_capacity\n    scores[mask] = item / (bins[mask] - item + 1)\n    return scores",
          "objective": 0.03914,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = np.zeros_like(bins)\n\n    mask = bins != max_capacity\n    scores[mask] = bins[mask] / (bins[mask] - item + 1)\n\n    return scores",
          "objective": 0.03924,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = np.zeros_like(bins)\n    mask = bins != max_capacity\n    \n    scores[mask] = item / (bins[mask] - item + 1) * np.log(bins[mask])\n    return scores",
          "objective": 0.03954,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = np.where(bins == max_capacity, -1, (item / bins)**2)\n    return scores",
          "objective": 0.03984,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = np.zeros_like(bins)\n    mask = bins != max_capacity\n    scores[mask] = (item / bins[mask]) ** 2\n    return scores",
          "objective": 0.04095,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = max_capacity - bins + (bins == max_capacity) * item\n    return scores",
          "objective": 0.04105,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = np.zeros_like(bins)\n\n    mask = bins != max_capacity\n\n    scores[mask] = (3 * bins[mask] - 2 * item) / (2 * np.arange(len(bins)) + 2)[mask] + (2 * bins[mask] > 3 * item).astype(int)\n\n    return scores",
          "objective": 0.04125,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = np.zeros_like(bins)\n    \n    for i in range(len(bins)):\n        if bins[i] == max_capacity:\n            scores[i] = -1\n        else:\n            scores[i] = bins[i] / (np.maximum(1, bins[i] - item) + 1e-6) * (i+1)\n    \n    return scores",
          "objective": 0.04135,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    num_bins = len(bins)\n    normalized_capacity = 1 - (bins / np.max(bins))\n    scores = np.power(normalized_capacity, num_bins) * np.arange(num_bins, 0, -1)\n    return scores",
          "objective": 0.04145,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = (2 * bins - item) / (1 + np.arange(len(bins)))\n    scores[bins == np.max(bins)] = -np.inf\n    return scores",
          "objective": 0.04155,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = np.zeros_like(bins)\n    \n    mask = bins != max_capacity\n    scores[mask] = (3 * bins[mask] - 2 * item) / (2 + np.arange(len(bins)))[mask] + (2 * bins[mask] > 3 * item).astype(int)\n    \n    return scores",
          "objective": 0.04165,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = np.zeros_like(bins)\n    \n    mask = bins != max_capacity\n    scores[mask] = (2 * bins[mask] - item) / (1 + np.arange(len(bins)))[mask]\n    \n    return scores",
          "objective": 0.04186,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = (bins - item * np.arange(1, len(bins)+1)) * (bins != max_capacity)\n    return scores",
          "objective": 0.04216,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.minimum(item, bins) / (1 + np.arange(len(bins)))\n    scores[bins == bins.max()] = 0\n    return scores",
          "objective": 0.04226,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    mask = bins != np.max(bins)\n    scores = np.zeros_like(bins)\n    scores[mask] = bins[mask] / (np.maximum(1, bins[mask] - item) + 1e-6)\n    \n    return scores",
          "objective": 0.04236,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = np.zeros_like(bins)\n    mask = bins != max_capacity\n    \n    scores[mask] = bins[mask] / (1 + np.arange(len(bins)))[mask]\n    \n    return scores",
          "objective": 0.04246,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = bins - 3 * np.arange(len(bins))\n    scores[bins == max_capacity] -= 2 * item\n    return scores",
          "objective": 0.04256,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = np.zeros_like(bins)\n    \n    for i in range(len(bins)):\n        if bins[i] != max_capacity:\n            scores[i] = (3 * bins[i] - 2 * item) / (2 + i) + (bins[i] > item)\n    \n    return scores",
          "objective": 0.04276,
          "other_inf": null
     }
]