[
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n\n    scores = (item ** 3) / (bins ** 3 - item ** 3 + 1) + np.sqrt(bins) + (2 * bins > 3 * item).astype(int) + np.log(bins + 2)\n\n    scores[bins == max_capacity] = 0\n\n    return scores",
          "objective": 0.02918,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n\n    scores = (item ** 3) / (bins ** 3 - item ** 3 + 1) + np.sqrt(bins) + (2 * bins > 3 * item).astype(int) + np.log1p(bins) + (bins % item == 0).astype(int)\n\n    scores[bins == max_capacity] = 0\n\n    return scores",
          "objective": 0.02928,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    \n    scores = (item ** 4) / (bins ** 4 - item ** 4 + 1) + np.sqrt(bins) + (2 * bins > 3 * item).astype(int) + np.log(bins) + (bins % item == 0).astype(int)\n    \n    scores[bins == max_capacity] = 0\n    \n    return scores",
          "objective": 0.02938,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n\n    scores = item**3 / (bins**3 - item**3 + 1) + np.sqrt(bins) + (2 * bins > 3 * item).astype(int) + np.log(bins + 1)\n\n    scores[bins == max_capacity] = 0\n\n    return scores",
          "objective": 0.02948,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n\n    scores = (item ** 3) / (bins ** 3 - item ** 3 + 1) + np.sqrt(bins) + (2 * bins > 3 * item).astype(int) + np.log(bins) + (bins % item == 0).astype(int)\n\n    scores[bins == max_capacity] = 0\n\n    return scores",
          "objective": 0.02958,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = np.zeros_like(bins)\n\n    scores = (item**3) / (bins**3 - item**3 + 1) + np.sqrt(bins) + (2 * bins > 3 * item).astype(int)\n\n    scores[bins == max_capacity] = 0\n\n    return scores",
          "objective": 0.02968,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = ((item ** 3) / (bins ** 3 - item ** 3 + 1)) + (np.sqrt(bins)) + ((2 * bins) > (3 * item)).astype(int) + (2 * np.log(bins + 1))\n    scores[bins == max_capacity] = 0\n    return scores",
          "objective": 0.02978,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = np.zeros_like(bins)\n\n    scores = (item**5) / (bins**5 - item**5 + 1) + np.sqrt(bins) + (2 * bins > 3 * item).astype(int) + np.log(bins + 2)\n\n    scores[bins == max_capacity] = 0\n\n    return scores",
          "objective": 0.02988,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    \n    scores = (item ** 2) / (bins ** 2 - item ** 2 + 1) + np.sqrt(bins) + (2 * bins > 3 * item).astype(int) + 2 * np.log(bins + 1)\n    scores[bins == max_capacity] = 0\n    \n    return scores",
          "objective": 0.02998,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the first part of the score\n    scores = item / ((bins - item + 1) * (1 + np.log(bins - item + 1)))\n    \n    # Calculate the second part of the score\n    scores += 2 * (bins > 3 * item)\n    \n    return scores",
          "objective": 0.03008,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    \n    scores = (item ** 2) / (bins ** 2 - item ** 2 + 1) + np.sqrt(bins) + (2 * bins > 3 * item).astype(int) + np.log1p(bins) + ((bins % item) == 0).astype(int)\n\n    scores[bins == max_capacity] = 0\n\n    return scores",
          "objective": 0.03018,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n  scores = np.zeros_like(bins)\n  \n  diff = bins - item + 1\n  scores = np.where(bins != np.max(bins), item / (diff * np.log1p(diff)**2) + np.sqrt(bins) + (2 * bins > 3 * item), 0)\n\n  return scores",
          "objective": 0.03028,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    \n    scores = (item ** 2) / (bins ** 2 - item ** 2 + 1) + np.sqrt(bins) + (2 * bins > 3 * item).astype(int) + np.log1p(bins)\n    \n    scores[bins == max_capacity] = 0\n    \n    return scores",
          "objective": 0.03039,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    \n    scores = (item ** 2) / (bins ** 2 - item ** 2 + 1) + np.sqrt(bins) + (2 * bins > 3 * item).astype(int)\n    \n    scores[bins == max_capacity] = 0\n    \n    return scores",
          "objective": 0.03049,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = ((item ** 3) / (bins ** 3 - item ** 3 + 1)) + (2 * np.sqrt(bins)) + ((2 * bins) > (3 * item)).astype(int) + (3 * np.log(bins + 1))\n    scores[bins == max_capacity] = 0\n    return scores",
          "objective": 0.03059,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    \n    scores = (item**2) / ((bins**2 - item**2 + 1) * np.log(bins+1)) + np.sqrt(bins) + (2 * bins > 3 * item).astype(int)\n    \n    scores[bins == max_capacity] = 0\n    \n    return scores",
          "objective": 0.03069,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    \n    scores = item**3 / (bins**3 - item**3 + 1) + np.sqrt(bins) + ((3 * bins) > (2 * item)).astype(int)\n    \n    scores[bins == max_capacity] = 0\n    \n    return scores",
          "objective": 0.03079,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    \n    scores = (item ** 2) / (bins ** 2 - item ** 2 + 1) + np.sqrt(bins) + (3 * bins > 4 * item).astype(int) + 3 * np.log(bins + 1)\n    \n    scores[bins == max_capacity] = 0\n    \n    return scores",
          "objective": 0.03089,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    \n    scores = (item / (bins - item + 1)**2) + np.sqrt(bins) + np.log1p(bins) + (2 * bins > 3 * item).astype(int)\n    \n    scores[bins == max_capacity] = 0\n    \n    return scores",
          "objective": 0.03099,
          "other_inf": null
     },
     {
          "algorithm": null,
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    \n    scores = (item ** 3) / (bins ** 3 - item ** 3 + 1) + np.sqrt(bins) + (3 * bins > 4 * item).astype(int) + 3 * np.log(bins + 1)\n    \n    scores[bins == max_capacity] = 0\n    \n    return scores",
          "objective": 0.03109,
          "other_inf": null
     }
]