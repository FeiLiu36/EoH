[
     {
          "algorithm": "The new algorithm assigns scores to each bin based on the product of the bin's rest capacity and the cube root of the bin number, the logarithm of the ratio between the item size and the rest capacity squared, and the difference between the bin number and the item size divided by the sum of the bin capacity and the item size cubed, prioritizing bins with higher rest capacity and lower bin numbers while minimizing the number of used bins.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    rest_capacity = bins.copy()\n    rest_capacity[rest_capacity == item] = 0\n    bin_numbers = np.arange(1, len(bins) + 1)\n    \n    score_1 = rest_capacity * np.cbrt(bin_numbers)\n    score_2 = np.log(item / rest_capacity**2)\n    score_3 = (bin_numbers - item) / (bins + item**3)\n    \n    scores = score_1 * score_2 * score_3\n    return scores",
          "objective": 0.00785,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm assigns scores to each bin based on the sum of the bin's rest capacity divided by the square root of the bin number, the logarithm of the ratio between the rest capacity and the item size, and the product of the bin number and the square root of the ratio between the bin capacity and the item size, excluding bins with maximum capacity, in order to minimize the number of used bins.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.zeros_like(bins, dtype=np.float64)\n    max_capacity = np.max(bins)\n\n    for i, bin_capacity in enumerate(bins):\n        if bin_capacity == max_capacity:\n            continue\n        \n        rest_capacity = bin_capacity - item\n        \n        scores[i] = (rest_capacity / np.sqrt(i + 1)) * np.log(rest_capacity / item) * (i + 1) * np.sqrt(bin_capacity / item)\n    \n    return scores",
          "objective": 0.01006,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: The score function will calculate the scores for each bin based on a combination of rest capacity, the logarithm of the rest capacity, and the inverse of the bin number, prioritizing bins with higher rest capacity, lower bin numbers, and returning a Numpy array of scores for assignment.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    rest_capacity = bins - item\n    scores = rest_capacity * np.log(rest_capacity) * (1 / np.arange(1, len(bins) + 1))\n    return scores",
          "objective": 0.01419,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Assign scores to each bin based on the bin's rest capacity divided by the bin number squared, the inverse of the item size, and the logarithm of the ratio between the item size and the rest capacity, prioritizing bins with higher rest capacity, smaller bin numbers, and larger item sizes.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = bins / (np.arange(1, len(bins)+1)**2 * item * np.log(item / bins))\n    return scores",
          "objective": 0.01459,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm assigns scores to each bin based on the product of the bin's rest capacity and the square root of the bin number, the logarithm of the ratio between the item size and the rest capacity, and the absolute difference between the bin number and the item size divided by the sum of the bin capacity and the item size squared, prioritizing bins with higher rest capacity and lower bin numbers while minimizing the number of used bins.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    bin_nums = np.arange(1, len(bins) + 1)\n    \n    sqrtn_bin_nums = np.sqrt(bin_nums)\n    log_ratio = np.log(item / bins)\n    abs_diff = np.abs(bin_nums - item) / (bins + item**2)\n    \n    scores = bins * sqrtn_bin_nums * log_ratio * abs_diff\n    scores[bins == np.max(bins)] = 0\n    \n    return scores",
          "objective": 0.01479,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: The score function will calculate the scores for each bin based on the division of the rest capacity by the bin number, multiplied by the logarithm of three times the rest capacity, prioritizing bins with higher rest capacity and lower bin numbers, and returning a Numpy array of scores for assignment.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    rest_capacity = bins - item\n    scores = rest_capacity / np.arange(1, len(rest_capacity) + 1) * np.log(3 * rest_capacity)\n    return scores",
          "objective": 0.0169,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm will calculate the scores for each bin based on the rest capacity, the bin number, and a custom function that takes into account the item size, rest capacity, and bin number to prioritize the assignment of bins with higher rest capacities, higher bin numbers, and lower item-size-to-rest-capacity ratios.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    bin_numbers = np.arange(len(bins)) + 1\n    ratios = item / (bins - item)\n    scores = bins + bin_numbers + ratios\n    return scores",
          "objective": 0.017,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: The score function will calculate the scores for each bin based on the sum of the logarithm of the rest capacity, the square root of the bin number, and the reciprocal of the product of the rest capacity and the bin number, prioritizing bins with higher rest capacity, lower bin numbers, and a balanced ratio of rest capacity to bin number, and returning a Numpy array of scores for assignment.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    rest_capacity = bins\n    rest_capacity[rest_capacity == item] = 0\n    \n    scores = np.log(rest_capacity) + np.sqrt(np.arange(1, len(bins)+1)) + (1 / (rest_capacity * np.arange(1, len(bins)+1)))\n    return scores",
          "objective": 0.02173,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm assigns scores to bins based on the product of the bin's rest capacity divided by the bin number, the square root of the item size and the exponential function of the difference between the bin number and item size, in order to prioritize bins with higher rest capacities, lower bin numbers and larger differences between the bin number and item size, ultimately minimizing the number of used bins.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    bin_numbers = np.arange(1, len(bins) + 1)  # Generate bin numbers\n    rest_capacities = bins - item  # Calculate rest capacities\n    differences = np.abs(bin_numbers - item)  # Calculate differences between bin numbers and item size\n\n    # Calculate scores using the formula\n    scores = rest_capacities / bin_numbers * np.sqrt(item) * np.exp(differences)\n\n    return scores",
          "objective": 0.02535,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm assigns scores to each bin based on the product of the bin's rest capacity and the square root of the bin number, the natural logarithm of the ratio between the item size and the rest capacity, and the difference between the bin number and the item size, prioritizing bins with higher rest capacity, lower bin numbers, and larger differences between the bin number and item size.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = (bins * np.sqrt(np.arange(1, len(bins)+1))) * (np.log(item / bins)) * (np.abs(np.arange(1, len(bins)+1) - item))\n    return scores",
          "objective": 0.02546,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Assign scores to each bin based on the bin's rest capacity divided by the bin number, the natural logarithm of the ratio between the item size and the rest capacity, and the product of the square of the inverse of the bin number and the inverse of the item size, prioritizing bins with higher rest capacity, lower bin numbers, and lower item sizes.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    bin_numbers = np.arange(1, len(bins) + 1)\n    rest_capacities = bins - item\n    \n    score1 = rest_capacities / bin_numbers\n    score2 = np.log(item / rest_capacities)\n    score3 = (1 / (bin_numbers**2)) * (1 / item)\n    \n    scores = score1 + score2 + score3\n    \n    return scores",
          "objective": 0.03099,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm will assign scores to bins based on their rest capacity, bin number, and a custom function that considers rest capacity, bin number, and item size, in order to prioritize bins with higher rest capacities, higher bin numbers, and lower item-size-to-rest-capacity ratios, and then assign the item to the bin with the maximum score while ensuring that bins with maximum capacity are not used.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    bin_nums = np.arange(len(bins))\n    ratios = item / (bins - item)\n    scores = bins + bin_nums + ratios\n    scores[bins == np.max(bins)] = np.min(scores)\n    return scores",
          "objective": 0.032,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm assigns scores to each bin based on the logarithm of the ratio between the bin's rest capacity and the square root of the bin number, multiplied by the inverse of the item size, aiming to prioritize bins with higher rest capacity and lower bin numbers while minimizing the number of used bins.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    bin_numbers = np.arange(1, len(bins)+1)\n    rest_capacities = bins.astype(float)\n    rest_capacities[rest_capacities == item] = np.inf\n    \n    scores = np.log(rest_capacities / np.sqrt(bin_numbers)) * (1.0 / item)\n    \n    return scores",
          "objective": 0.0323,
          "other_inf": null
     },
     {
          "algorithm": "Modified algorithm: The score function will calculate the scores for each bin based on the bin's rest capacity divided by the square root of the bin number, the ratio between the item size and the rest capacity squared, and the exponential of the negative reciprocal of the ratio between the bin capacity and the item size cubed, prioritizing bins with higher rest capacity, lower bin numbers, and lower item sizes, excluding bins with maximum capacity, to minimize the number of used bins.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    bin_nums = np.arange(1, len(bins) + 1)  # Calculate bin numbers\n    rest_capacities = bins - item  # Calculate rest capacities of bins\n    \n    # Calculate scores for each bin\n    scores = rest_capacities / np.sqrt(bin_nums)  # Rest capacity divided by square root of bin number\n    scores *= (item / rest_capacities**2)  # Ratio between item size and rest capacity squared\n    scores *= np.exp(-1 / (bins / item**3))  # Exponential of negative reciprocal of ratio between bin capacity and item size cubed\n    \n    # Set scores of bins with maximum capacity to zero\n    max_capacity = np.max(bins)\n    scores[bins == max_capacity] = 0\n    \n    return scores",
          "objective": 0.03401,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Assign scores to each bin based on the bin's rest capacity multiplied by the square root of the bin number, divided by the logarithm of the ratio between the item size and the rest capacity, prioritizing smaller rest capacity, higher bin numbers, and larger item sizes.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = (bins*np.sqrt(np.arange(1,len(bins)+1))) / np.log(item/bins)\n    return scores",
          "objective": 0.03411,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm assigns scores to each bin based on the cosine of the bin's rest capacity divided by the square root of the bin number, multiplied by the inverse of the sum of the item size and the rest capacity, to prioritize bins with higher rest capacity and lower bin numbers while considering the item size.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    rest_capacity = bins - item\n    bin_numbers = np.arange(1, len(bins)+1)\n    scores = np.cos(rest_capacity / np.sqrt(bin_numbers)) * (1 / (item + rest_capacity))\n    return scores",
          "objective": 0.03481,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: The score function will calculate the scores for each bin based on a combination of the bin's rest capacity, bin number, and a custom function that takes into account the item size and the number of items already assigned to the bin, prioritizing bins with higher rest capacities, lower bin numbers, and a lower ratio of already assigned items to rest capacity, and returning a Numpy array of scores for assignment.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    bin_numbers = np.arange(len(bins))\n    rest_capacities = bins\n    num_items_assigned = np.maximum(0, bins - item)\n    \n    ratio_assigned_to_capacity = num_items_assigned / (rest_capacities - item)\n    scores = rest_capacities * bin_numbers + ratio_assigned_to_capacity\n    \n    # Set scores of unused bins to a negative infinity value\n    scores[rest_capacities == np.max(bins)] = -np.inf\n    \n    return scores",
          "objective": 0.03723,
          "other_inf": null
     },
     {
          "algorithm": "\nThe new algorithm assigns scores to each bin based on the sum of the bin's rest capacity divided by the square root of the bin number, the natural logarithm of the ratio between the rest capacity and the item size, and the product of the bin number and the square root of the ratio between the bin capacity and the item size, excluding bins with maximum capacity, in order to minimize the number of used bins.\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    if len(bins) == 0:\n        return np.array([])\n    \n    bin_numbers = np.arange(1, len(bins) + 1)\n    bin_capacity_ratios = bins / item\n    bin_rest_capacity_ratios = bins / (bins - item)\n    \n    scores = (bins - item) / np.sqrt(bin_numbers) + np.log(bin_rest_capacity_ratios) + bin_numbers * np.sqrt(bin_capacity_ratios)\n    scores[bins == bins.max()] = -np.inf\n    \n    return scores",
          "objective": 0.03783,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm assigns scores to each bin based on the sum of the bin's rest capacity divided by the square root of the bin number, the natural logarithm of the inverse of the ratio between the rest capacity and the item size, and the product of the bin number and the square root of the ratio between the bin capacity and the item size, excluding bins with maximum capacity, in order to minimize the number of used bins.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.zeros(len(bins))\n    max_capacity = np.max(bins)\n    \n    for i, capacity in enumerate(bins):\n        if capacity == max_capacity:\n            continue\n        \n        rest_capacity = capacity - item\n        bin_number = i + 1\n        \n        score1 = rest_capacity / np.sqrt(bin_number)\n        score2 = np.log(1/(rest_capacity/item))\n        score3 = bin_number * np.sqrt(capacity/item)\n        \n        scores[i] = score1 + score2 + score3\n    \n    return scores",
          "objective": 0.03803,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm assigns scores to each bin based on the sum of the bin's rest capacity divided by the cube root of the bin number, the natural logarithm of the ratio between the rest capacity and the item size, and the product of the bin number and the cube root of the ratio between the bin capacity and the item size, excluding bins with maximum capacity, in order to minimize the number of used bins.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.zeros_like(bins, dtype=float)\n    \n    max_capacity = np.max(bins)\n    \n    for i in range(len(bins)):\n        if bins[i] == max_capacity:\n            continue\n        \n        rest_capacity = bins[i]\n        bin_number = i + 1\n        \n        score = (rest_capacity ** (1/3)) / (np.log(rest_capacity / item)) * (bin_number * (bins[i] / item) ** (1/3))\n        \n        scores[i] = score\n    \n    return scores",
          "objective": 0.03823,
          "other_inf": null
     }
]