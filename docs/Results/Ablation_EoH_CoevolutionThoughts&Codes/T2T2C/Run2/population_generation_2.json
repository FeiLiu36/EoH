[
     {
          "algorithm": "\nNew algorithm: Assign scores to bins based on the ratio of the bin index multiplied by the inverse of the item size to the rest capacity, subtracting the square of the item size from the scores for assignment.\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    bin_indices = np.where(bins > item)[0]\n    scores = np.zeros_like(bins)\n    if len(bin_indices) == 0:\n        return scores\n    \n    bin_sizes = bins[bin_indices]\n    ratios = (bin_indices * (1/item)) / bin_sizes\n    scores[bin_indices] = ratios - np.square(item)\n    return scores",
          "objective": 0.02133,
          "other_inf": null
     },
     {
          "algorithm": "Backbone idea: Calculate scores based on item size and rest capacity of bins to assign item to bin with maximum score.}\n\n{New algorithm: Assign scores to bins based on the product of the item size and the inverted rest capacity, returning the scores for assignment.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = item / (bins+1)\n    return scores",
          "objective": 0.03984,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm will calculate the score for each bin based on the rest capacity, using a weighted average of the rest capacity and the inverse of the square root of the bin number, then return the scores for each bin for assignment.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    weights = np.arange(1, len(bins)+1)**(-0.5)\n    scores = bins * weights\n    scores[bins == np.max(bins)] = 0\n    return scores",
          "objective": 0.04045,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Assign scores to bins based on the ratio of the item size to the rest capacity, subtracting the bin index multiplied by the inverse of the item size from the scores for assignment.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = (item / bins) - (np.arange(len(bins)) * (1/item))\n    return scores",
          "objective": 0.04085,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Divide the difference between the maximum capacity and the rest capacity of a bin by the sum of the item size and the bin index to calculate the score for each bin for assignment.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = (bins.max() - bins) / (item + np.arange(len(bins)))\n    return scores",
          "objective": 0.04105,
          "other_inf": null
     },
     {
          "algorithm": "The common backbone idea in the provided algorithms is to calculate a score for each bin based on its rest capacity and assign the item to the bin with the highest score.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.zeros_like(bins)\n    max_capacity = max(bins)\n    \n    for i, capacity in enumerate(bins):\n        if capacity != max_capacity:\n            scores[i] = (max_capacity - capacity) / capacity\n    \n    return scores",
          "objective": 0.04125,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Calculate the scores for each bin by dividing the inverse of the bin index by the rest capacity multiplied by a constant factor, returning the scores for assignment.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.zeros_like(bins, dtype=float)\n    max_capacity = np.max(bins)\n    \n    for i, capacity in enumerate(bins):\n        if capacity == max_capacity:\n            scores[i] = 0\n        else:\n            scores[i] = (1 / (i + 1)) / ((max_capacity - capacity) * 0.5)\n            \n    return scores",
          "objective": 0.04196,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: The score function will calculate the scores for each bin by subtracting the product of the bin index and the rest capacity from the item size and return the scores for assignment.",
          "code": "import numpy as np\n\n\ndef score(item, bins):\n    scores = item - np.arange(len(bins)) * bins\n    return scores",
          "objective": 0.04226,
          "other_inf": null
     },
     {
          "algorithm": "Modified algorithm: Divide the difference between the maximum capacity and the rest capacity of a bin by the sum of the square root of the item size and the bin index to calculate the score for each bin for assignment.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = (bins.max() - bins) / (np.sqrt(item) + np.arange(len(bins)))\n    return scores",
          "objective": 0.04236,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Calculate the scores for each bin by dividing the inverse of the item size by the product of the rest capacity and the bin index, returning the scores for assignment.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = 1.0 / (item * bins * np.arange(1, len(bins) + 1))\n    return scores",
          "objective": 0.04256,
          "other_inf": null
     },
     {
          "algorithm": "Common backbone idea: Calculate scores for each bin based on the rest capacity and other parameters to determine the optimal bin for item assignment.\n\nNew algorithm: Assign scores to bins based on the square of the inverted rest capacity divided by the product of the item size and the bin index, returning the scores for assignment.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    capacity_ratio = bins.astype(float) / item\n    scores = np.square(1 / capacity_ratio) / np.arange(1, len(bins) + 1)\n    return scores",
          "objective": 0.04276,
          "other_inf": null
     },
     {
          "algorithm": "Common backbone idea: Calculate scores based on item size and rest capacity of bins to assign item to bin with maximum score.}\n\n{New algorithm: Assign scores to bins based on the sum of the rest capacity and the square of the product of the item size and the bin index, returning the scores for assignment.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = ((bins + item) ** 2) / np.arange(1, len(bins) + 1)\n    return scores",
          "objective": 0.04306,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Calculate the scores for each bin by taking the minimum between the rest capacity divided by the square of the bin index and the product of the item size and the rest capacity, returning the scores for assignment.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    indices = np.arange(len(bins))\n    rest_capacity = bins - item\n    \n    scores = np.minimum(rest_capacity / np.square(indices), item * rest_capacity)\n    \n    return scores",
          "objective": 0.04367,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Calculate the scores for each bin by dividing the rest capacity by the product of the item size and the bin index, returning the scores for assignment.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = bins / (item * np.arange(1, len(bins)+1))\n    return scores",
          "objective": 0.04407,
          "other_inf": null
     },
     {
          "algorithm": "Common backbone idea: The algorithms all calculate scores for each bin based on the rest capacity and other parameters to determine the optimal bin for item assignment.}\n\n{New algorithm: The new algorithm calculates the score for each bin by taking the maximum between the square root of the rest capacity and the ratio of item size to bin index, returning the scores for assignment.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.maximum(np.sqrt(bins), item / np.arange(1, len(bins)+1))\n    return scores",
          "objective": 0.04507,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Calculate scores for each bin based on their rest capacities squared divided by the item size multiplied by the bin index.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = (bins**2) / (item * np.arange(1, len(bins)+1))\n    return scores",
          "objective": 0.04588,
          "other_inf": null
     },
     {
          "algorithm": "N",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.zeros_like(bins)\n    mask = bins != bins.max()\n    scores[mask] = item / (bins[mask] - item)\n    return scores",
          "objective": 0.0498,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm calculates the scores for each bin by taking the inverse of the rest capacity, assigns the item to the bin with the minimum score, and returns the scores for the bins for assignment.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = 1 / bins\n    scores = np.where(bins == item, 0, scores)\n    return scores",
          "objective": 0.05071,
          "other_inf": null
     },
     {
          "algorithm": "The score function will calculate the scores for each bin by multiplying the rest capacity with the inverse of the bin index and return the scores for assignment.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = bins * (1 / np.arange(1, len(bins) + 1))\n    scores[bins == item] = 0\n    return scores",
          "objective": 0.05322,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: Calculate the scores for each bin by taking the minimum between the rest capacity of the bin and the size of the item, set the rest capacities of bins that are not used to a negative value, and return the 'scores' array.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.minimum(bins, item)\n    scores[bins == item] = -1\n    return scores",
          "objective": 0.05383,
          "other_inf": null
     }
]