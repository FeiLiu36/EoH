[
     {
          "algorithm": "\nThis algorithm calculates a score for a given item based on its comparison with a list of bins by first determining the maximum capacity of the bins, then computing a score using a formula involving the bins and the item, adjusting the scores for bins greater than the item, updating the scores based on differences between consecutive elements, and finally returning the resulting scores.\n",
          "code": "import numpy as np\ndef score(item, bins):\n    max_bin_cap = max(bins)\n    score = (bins - max_bin_cap)**2 / item + bins**2 / (item**2)\n    score += bins**2 / item**3\n    score[bins > item] = -score[bins > item]\n    score[1:] -= score[:-1]\n    return score",
          "objective": 0.0068,
          "other_inf": null
     },
     {
          "algorithm": "\nNew algorithm: \n1. Calculate the ratio of item size to each bin's rest capacity.\n2. Calculate the score for each bin based on the ratio and the condition of the rest capacity.\n3. Return the scores for the bins for assignment. \n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = item / bins\n    return scores",
          "objective": 0.03984,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm assigns a score to each bin based on the product of the remaining capacity and a factor that increases exponentially with the index of the bin, with a penalty term for bins close to the item size, to encourage the usage of larger bins and spread the items across different bins.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    num_bins = len(bins)\n    weights = np.exp(np.arange(num_bins, 0, -1))  # Exponential weights based on bin index\n    remaining_capacity = bins - item\n    scores = remaining_capacity * weights\n    return scores",
          "objective": 0.04095,
          "other_inf": null
     },
     {
          "algorithm": "\nNew algorithm: The score function will calculate the scores for each bin based on the remaining capacity, with a penalty for bins with maximum capacity to minimize the number of used bins.\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    scores = (max_capacity - bins) + (bins == max_capacity) * item\n    return scores",
          "objective": 0.04105,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: The score function will calculate the scores for each bin based on the ratio of each bin's rest capacity to the item size, but prioritize bins with a higher rest capacity and a lower index, by subtracting a weighted value from the scores. The final scores will be multiplied by an exponential decay factor to penalize bins with maximum capacity.\n\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    ratios = bins / item\n    weights = 2 * np.arange(len(bins))\n    decay_factor = 0.9\n    \n    scores = ratios - weights\n    scores *= decay_factor ** (bins == bins.max())\n\n    return scores",
          "objective": 0.04155,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: The score function will calculate the scores for each bin based on the ratio of each bin's rest capacity to the item size. Bins with a higher rest capacity and a lower index will be prioritized by subtracting a weighted value from the scores. The final scores will be multiplied by a decay factor raised to the power of the ratio of each bin's rest capacity to the maximum capacity, to penalize bins with maximum capacity and promote utilization of bins with lower rest capacities.\n\nCode:\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    ratios = bins / item\n    weights = 2 * np.arange(len(bins))\n    decay_factor = 0.9\n    \n    scores = ratios - weights\n    scores *= decay_factor ** (bins / bins.max())\n\n    return scores",
          "objective": 0.04175,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: The score function will calculate the scores for each bin based on the ratio of each bin's rest capacity to the item size, but limit the scores for bins with a higher rest capacity and a lower index to promote using bins with higher rest capacity and lower index.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    ratios = bins / item\n    \n    # Limit the scores for bins with higher rest capacity and lower index\n    scores = ratios - (2 * np.arange(len(bins)))\n    \n    return scores",
          "objective": 0.04206,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm calculates the scores for each bin based on the remaining capacity of the bin, a penalty for bins with maximum capacity, and the ratio between bin capacity and the item size, while also considering a constant factor.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = (np.max(bins) - bins) + (bins == np.max(bins)) * item + (bins / item) * 0.5\n    return scores",
          "objective": 0.04216,
          "other_inf": null
     },
     {
          "algorithm": "The common backbone idea in the provided algorithms is calculating the ratio between the item size and each bin's rest capacity.\n\nNew algorithm:\n1. Calculate the sum of the item size and each bin's rest capacity.\n2. Calculate the ratio of the item size to the sum for each bin.\n3. Calculate the score for each bin based on the ratio, the condition of the rest capacity, and the bin's index.\n4. Return the scores for the bins for assignment.\n\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    sizes = item + bins\n    ratios = item / sizes\n    scores = ratios + np.arange(len(bins))\n    return scores",
          "objective": 0.04226,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm calculates the scores for each bin based on the ratio of the item size to each bin's rest capacity, but prioritizes bins with a higher index, and returns a Numpy array of scores for assignment.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.zeros_like(bins, dtype=float)\n    for i in range(len(bins)):\n        ratios = item / bins[i]\n        scores[i] = ratios * (1 / (len(bins) - i))\n    return scores",
          "objective": 0.04256,
          "other_inf": null
     },
     {
          "algorithm": "Common Backbone Idea: All of the provided algorithms calculate scores for each bin based on the rest capacity of the bin compared to the size of the current item.\n\nNew Algorithm: The score function will calculate the scores for each bin based on the remaining capacity, with a penalty for bins with maximum capacity to minimize the number of used bins while also considering the ratio between bin capacity and the item size, and applying randomization to promote performance.\n\nCode:\n\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    random_nums = np.random.rand(bins.shape[0])\n    ratios = bins / item\n    scores = (max_capacity - bins) + (bins == max_capacity) * item + ratios * random_nums\n    return scores",
          "objective": 0.04276,
          "other_inf": null
     },
     {
          "algorithm": "\nDescription: \nThe algorithm calculates the scores for each bin based on their rest capacities and assigns the item to the bin with the maximum score, minimizing the number of used bins.\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = bins / np.maximum((bins - item), 1)\n    scores[bins == bins.max()] = 0\n    return scores",
          "objective": 0.04306,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm will calculate the scores for each bin based on a combination of the rest capacity, the index, and the cumulative sum of the rest capacities, with higher scores assigned to bins with higher rest capacity, lower index, and larger cumulative sum.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = bins * (bins == np.max(bins)) + (2 * np.arange(len(bins))) - np.cumsum(bins)\n    return scores",
          "objective": 0.04336,
          "other_inf": null
     },
     {
          "algorithm": "Common backbone idea: All of the provided algorithms calculate scores for each bin based on the remaining capacity of the bin compared to the size of the current item.\n\nNew algorithm: The new algorithm calculates the scores for each bin based on a combination of the remaining capacity, a penalty for bins with maximum capacity, and a random component, while also considering the ratio between bin capacity and the item size.\n\nCode:\n\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    ratios = bins / item\n    random_nums = np.random.rand(bins.shape[0])\n    scores = (max_capacity - bins) + (bins == max_capacity) * item + ratios * random_nums\n    return scores",
          "objective": 0.04357,
          "other_inf": null
     },
     {
          "algorithm": "Common backbone idea: The provided algorithms calculate scores for each bin based on the ratio of each bin's rest capacity to the item size, and then apply additional modifications based on bin characteristics such as index, maximum capacity, or cumulative sum.\n\nNew algorithm: The score function will calculate the scores for each bin based on the square root of the ratio of each bin's rest capacity to the item size, multiplied by a factor that is inversely proportional to the index of the bin.\n\nCode:\n\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    ratios = bins / item\n    weights = 1 / np.sqrt(np.arange(len(bins)) + 1)\n    \n    scores = np.sqrt(ratios) * weights\n\n    return scores",
          "objective": 0.04407,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: The score function will calculate the scores for each bin based on the ratio of each bin's rest capacity to the item size, but prioritize bins with a higher index, and return a Numpy array of scores for assignment.\n\nCode:\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.zeros_like(bins, dtype=float)\n    num_bins = len(bins)\n    for i in range(num_bins-1, -1, -1):\n        ratios = bins[i] / item\n        scores[i] = ratios * (1 / (num_bins - i))\n    return scores",
          "objective": 0.04417,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm will calculate the scores for each bin based on a combination of the rest capacity, the index, and the cumulative sum of the rest capacities, with higher scores assigned to bins with higher rest capacity, higher index, and larger cumulative sum.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = 3 * bins * (bins == np.max(bins)) + (4 * np.arange(len(bins))) + 2 * np.cumsum(bins)\n    return scores",
          "objective": 0.04487,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm: \n1. Calculate the cumulative sum of the rest capacities of the bins.\n2. Calculate the difference between the cumulative sum and the maximum capacity of the bins.\n3. Calculate the score for each bin based on the ratio of the rest capacity to the item size, the difference calculated in step 2, and the condition that the rest capacity is not equal to the maximum capacity of the bins.\n4. Return the scores for the bins for assignment.\n\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    cum_sum = np.cumsum(bins)\n    max_cap_diff = cum_sum[-1] - bins\n    scores = bins / item + max_cap_diff / item\n    scores[bins == bins.max()] = 0\n    return scores",
          "objective": 0.04618,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: The score function will calculate the scores for each bin based on a combination of the ratio of each bin's rest capacity to the item size and the difference between the rest capacity and the item size, but prioritize bins with a higher rest capacity and a lower index, by adding a weighted value to the scores. The final scores will be multiplied by an exponential decay factor to penalize bins with maximum capacity.\n\nCode:\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    ratios = bins / item\n    differences = bins - item\n    weights = 2 * np.arange(len(bins))\n    decay_factor = 0.9\n    \n    scores = ratios + differences + weights\n    scores *= decay_factor ** (bins == bins.max())\n\n    return scores",
          "objective": 0.04759,
          "other_inf": null
     },
     {
          "algorithm": "\nNew algorithm: \n1. Calculate the ratio of item size to each bin's rest capacity.\n2. Calculate the score for each bin based on the ratio and the condition of the rest capacity.\n3. Return the scores for the bins for assignment. \n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.zeros_like(bins, dtype=float)\n    for i in range(len(bins)):\n        if bins[i] == item:\n            scores[i] = -1\n        elif bins[i] > item:\n            scores[i] = item / bins[i]\n    return scores",
          "objective": 0.05071,
          "other_inf": null
     }
]