[
     {
          "algorithm": "The new algorithm utilizes a dynamic adjustment of the scoring function based on the item size and the remaining capacity of the bins to minimize the number of used bins and optimize item distribution.",
          "code": "import numpy as np\n def score(item, bins):\n remaining_capacity = bins - item\n utilization_ratio = 1 - remaining_capacity / bins\n simulated_annealing_factor = np.exp(-np.abs(bins - item))\n dynamic_adjustment = np.where(remaining_capacity > (item * 2), (utilization_ratio * np.sqrt(bins - item + 1)) + 0.8, (utilization_ratio * np.sqrt(bins - item + 1)) + 0.6)\n scores = (bins *1.1) / (np.exp(bins - item) + 0.1)  * simulated_annealing_factor + dynamic_adjustment\n return scores",
          "objective": 0.0073,
          "other_inf": null
     },
     {
          "algorithm": "\nThe new algorithm aims to optimize item distribution by incorporating the remaining capacity of the bins, and item size to minimize the number of used bins. The scoring function will be based on a combination of the utilization ratio, dynamic adjustment, and an exponentially decaying factor to assign scores to each bin, ultimately facilitating the selection of the bin with the maximum score for item assignment.\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    utilization_ratio = 1 - (bins - item) / bins\n    dynamic_adjustment = np.where((bins - item) > (item * 2), (utilization_ratio * np.sqrt(bins - item + 1)) + 0.8, (utilization_ratio * np.sqrt(bins - item + 1)) + 0.6)\n    scores = (bins * 1.1) / (np.exp(bins - item) + 0.1) * np.exp(-np.abs(bins - item)) + dynamic_adjustment\n    return scores",
          "objective": 0.00734,
          "other_inf": null
     },
     {
          "algorithm": "\nNew algorithm: The new algorithm aims to optimize item distribution by incorporating item size, remaining capacity of the bins, and a modified scoring function based on the utilization ratio and dynamic adjustment to minimize the number of used bins.\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    remaining_capacity = bins - item\n    utilization_ratio = 1 - remaining_capacity / bins\n    dynamic_adjustment = np.where(remaining_capacity > (item * 2), (utilization_ratio * np.sqrt(bins - item + 1)) + 0.5, (utilization_ratio * np.sqrt(bins - item + 1)) + 0.3)\n    scores = (bins * 1.2) / (np.exp(bins - item) + 0.4) * np.exp(-np.abs(bins - item)) + dynamic_adjustment\n    return scores",
          "objective": 0.00745,
          "other_inf": null
     },
     {
          "algorithm": "\nNew algorithm: The new algorithm aims to optimize item distribution by incorporating the remaining capacity of the bins and item size to minimize the number of used bins. It uses a scoring function based on the utilization ratio, dynamic adjustment, and an exponentially decaying factor with different parameter settings to assign scores to each bin, ultimately facilitating the selection of the bin with the maximum score for item assignment.\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    adjust = np.where((bins - item) > (item * 2), (1 - (bins - item) / bins) * np.sqrt(bins - item + 2) + 0.8, (1 - (bins - item) / bins) * np.sqrt(bins - item + 1) + 0.6)\n    scores = (bins * 1.2) / (np.exp(bins - item) + 0.2) * np.exp(-np.abs(bins - item)) + adjust\n    return scores",
          "objective": 0.00755,
          "other_inf": null
     },
     {
          "algorithm": "\nNew algorithm: The new algorithm aims to optimize item distribution by incorporating the remaining capacity of the bins and item size to minimize the number of used bins. It uses a scoring function based on the utilization ratio, dynamic adjustment, and a modified decay factor to assign scores to each bin, ultimately facilitating the selection of the bin with the maximum score for item assignment.\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    remaining_capacity = bins - item\n    utilization_ratio = 1 - remaining_capacity / bins\n    dynamic_adjustment = np.where(remaining_capacity > (item * 2), (utilization_ratio * np.sqrt(bins - item + 1)) + 0.8, (utilization_ratio * np.sqrt(bins - item + 1)) + 0.6)\n    scores = (2 * bins) / (np.log(bins + 1) * (bins - item + 1)) * np.exp(-np.abs(bins - item)) + dynamic_adjustment\n    return scores",
          "objective": 0.00765,
          "other_inf": null
     },
     {
          "algorithm": "\nThe new algorithm aims to optimize item distribution by incorporating the remaining capacity of the bins, and item size to minimize the number of used bins. The scoring function will be based on a combination of the utilization ratio, dynamic adjustment, and an exponentially decaying factor to assign scores to each bin, ultimately facilitating the selection of the bin with the maximum score for item assignment.\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    utilization_ratio = 1 - (bins - item) / bins\n    dynamic_adjustment = np.where((bins - item) > (item * 2), (utilization_ratio * np.sqrt(bins - item + 1)) + 0.7, (utilization_ratio * np.sqrt(bins - item + 1)) + 0.5)\n    scores = (bins) / (np.exp(bins - item) + 0.1) * np.exp(-np.abs(bins - item)) + dynamic_adjustment\n    return scores",
          "objective": 0.00775,
          "other_inf": null
     },
     {
          "algorithm": "\nNew algorithm: The new algorithm aims to optimize item distribution by incorporating the remaining capacity of the bins, and item size to minimize the number of used bins. It uses a modified scoring function based on the utilization ratio, dynamic adjustment, and an exponentially decaying factor with different parameter settings to assign scores to each bin, ultimately facilitating the selection of the bin with the maximum score for item assignment.\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    utilization_ratio = 1 - (bins - item) / bins\n    adjust = np.where((bins - item) > (item * 2), (utilization_ratio * np.sqrt(bins - item + 2)) + 0.8, (utilization_ratio * np.sqrt(bins - item + 1)) + 0.6)\n    scores = (bins * 1.1) / (np.exp(bins - item) + 0.2) * np.exp(-np.abs(bins - item)) + adjust\n    return scores",
          "objective": 0.00785,
          "other_inf": null
     },
     {
          "algorithm": "\nNew algorithm: The new algorithm utilizes a different scoring function based on the utilization ratio, dynamic adjustment, and a linearly decaying factor with distinct parameter settings to assign scores to each bin, thus facilitating the selection of the bin with the maximum score for item assignment.\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    utilization_ratio = 1 - (bins - item) / bins\n    adjust = np.where((bins - item) > (item * 2), (utilization_ratio * np.sqrt(bins - item + 2)) + 0.5, (utilization_ratio * np.sqrt(bins - item + 1)) + 0.3)\n    scores = (bins * 1.5) / (np.exp(bins - item) + 0.5) * np.exp(-np.abs(bins - item)) + adjust\n    return scores",
          "objective": 0.00795,
          "other_inf": null
     },
     {
          "algorithm": "\nNew algorithm: The new algorithm aims to optimize item distribution by incorporating the item size, remaining capacity of the bins, and a combination of dynamic adjustment and an exponentially decaying factor to assign scores to each bin to minimize the number of used bins.\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    remaining_capacity = bins - item\n    utilization_ratio = 1 - remaining_capacity / bins\n    dynamic_adjustment = np.where(remaining_capacity > (item * 2), (utilization_ratio * np.sqrt(bins - item + 1)) + 0.6, (utilization_ratio * np.sqrt(bins - item + 1)) + 0.4)\n    scores = (bins * 1.2) / (np.exp(bins - item) + 0.1) * np.exp(-np.abs(bins - item)) + dynamic_adjustment\n    return scores",
          "objective": 0.00805,
          "other_inf": null
     },
     {
          "algorithm": "\nNew algorithm: The new algorithm aims to optimize item distribution by incorporating a novel combination of the utilization ratio, dynamic adjustment, and a non-linear decaying factor to assign scores to each bin, ultimately facilitating the selection of the bin with the maximum score for item assignment.\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    utilization_ratio = 1 - (bins - item) / bins\n    dynamic_adjustment = np.where((bins - item) > (item * 2), (utilization_ratio * np.sqrt(bins - item + 3)) + 0.9, (utilization_ratio * np.sqrt(bins - item + 1)) + 0.7)\n    scores = (bins * 1.3) / (np.exp(bins - item) + 0.4) * np.exp(-np.abs(bins - item)) + dynamic_adjustment\n    return scores",
          "objective": 0.00825,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: The new algorithm aims to assign scores to each bin based on a combination of the weighing of the utilization ratio, dynamic adjustment, and an exponentially decaying factor with a unique weighting factor, ultimately facilitating the selection of the bin with the maximum score for item assignment.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    utilization_ratio = 1 - (bins - item) / bins\n    dynamic_adjustment = np.where((bins - item) > (item * 2), (utilization_ratio * np.sqrt(bins - item)) + 0.7, (utilization_ratio * np.sqrt(bins - item + 1)) + 0.5)\n    scores = (bins * 1.4) / (np.exp(bins - item) + 0.3) * np.exp(-np.abs(bins - item)) + dynamic_adjustment\n    return scores",
          "objective": 0.00855,
          "other_inf": null
     },
     {
          "algorithm": "\nThe new algorithm aims to optimize item distribution by incorporating the remaining capacity of the bins, and item size to minimize the number of used bins. The scoring function will be based on a combination of the utilization ratio, dynamic adjustment, and an exponentially decaying factor to assign scores to each bin, ultimately facilitating the selection of the bin with the maximum score for item assignment.\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    utilization_ratio = 1 - (bins - item) / bins\n    dynamic_adjustment = np.where((bins - item) > (item * 2), (utilization_ratio * np.sqrt(bins - item + 1)) + 0.6, (utilization_ratio * np.sqrt(bins - item + 1)) + 0.5)\n    scores = (bins) / (np.exp(bins - item) + 0.1) * np.exp(-np.abs(bins - item)) + dynamic_adjustment\n    return scores",
          "objective": 0.00895,
          "other_inf": null
     },
     {
          "algorithm": "\nThe new algorithm aims to optimize item distribution by incorporating the remaining capacity of the bins, and item size to minimize the number of used bins. The scoring function will be based on a combination of the utilization ratio, dynamic adjustment, and an exponentially decaying factor to assign scores to each bin, ultimately facilitating the selection of the bin with the maximum score for item assignment.\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    utilization_ratio = 1 - (bins - item) / bins\n    dynamic_adjustment = (utilization_ratio * np.sqrt(bins - item + 1)) + 0.6\n    scores = (bins) / (np.exp(bins - item) + 0.1) * np.exp(-np.abs(bins - item)) + dynamic_adjustment\n    return scores",
          "objective": 0.00906,
          "other_inf": null
     },
     {
          "algorithm": "\nNew algorithm: The new algorithm aims to optimize item distribution by incorporating the utilization ratio, dynamic adjustment, and an exponentially decaying factor while also considering the logarithm of the item size and exponential of the remaining capacity of the bins, ultimately facilitating the selection of the bin with the maximum score for item assignment by using a modified scoring function.\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    remaining_capacity = bins - item\n    utilization_ratio = 1 - remaining_capacity / bins\n    dynamic_adjustment = np.where(remaining_capacity > (item * 2), (utilization_ratio * np.sqrt(bins - item + 1)) + 0.3, (utilization_ratio * np.sqrt(bins - item + 1)) + 0.2)\n    scores = (bins * 1.2) / (np.exp(bins - item) + 0.1) * np.exp(-np.abs(bins - item)) + dynamic_adjustment\n    return scores",
          "objective": 0.00926,
          "other_inf": null
     },
     {
          "algorithm": "\nNew algorithm: The new algorithm aims to optimize item distribution by incorporating the remaining capacity of the bins, and item size to minimize the number of used bins. It uses a modified scoring function based on the utilization ratio, dynamic adjustment, and an exponentially decaying factor to assign scores to each bin, ultimately facilitating the selection of the bin with the maximum score for item assignment.\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    remaining_capacity = bins - item\n    utilization_ratio = 1 - remaining_capacity / bins\n    dynamic_adjustment = np.where(remaining_capacity > (item * 3), (utilization_ratio * np.sqrt(bins - item + 1)) + 0.7, (utilization_ratio * np.sqrt(bins - item + 1)) + 0.5)\n    scores = (bins * 1.05) / (np.exp(bins - item) + 0.15) * np.exp(-np.abs(bins - item)) + dynamic_adjustment\n    return scores",
          "objective": 0.00936,
          "other_inf": null
     },
     {
          "algorithm": "\nNew algorithm: The new algorithm aims to optimize item distribution by incorporating the remaining capacity of the bins, item size, and utilization ratio to minimize the number of used bins. It uses a modified scoring function based on the utilization ratio, dynamic adjustment, and an exponentially decaying factor to assign scores to each bin, ultimately facilitating the selection of the bin with the maximum score for item assignment.\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    remaining_capacity = bins - item\n    dynamic_adjustment = np.where(remaining_capacity > (item * 2.5), (1 - remaining_capacity / bins) * np.sqrt(bins - item + 1) + 0.6, (1 - remaining_capacity / bins) * np.sqrt(bins - item + 1) + 0.4)\n    scores = (bins * 1.1) / (np.exp(bins - item) + 0.2) * np.exp(-np.abs(bins - item)) + dynamic_adjustment\n    return scores",
          "objective": 0.00946,
          "other_inf": null
     },
     {
          "algorithm": "\nThe new algorithm aims to optimize item distribution by incorporating the remaining capacity of the bins, and item size to minimize the number of used bins. The scoring function will be based on a combination of the utilization ratio, dynamic adjustment, and an exponentially decaying factor to assign scores to each bin, ultimately facilitating the selection of the bin with the maximum score for item assignment.\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    utilization_ratio = 1 - (bins - item) / bins\n    dynamic_adjustment = np.where((bins - item) > (item * 2), (utilization_ratio * np.sqrt(bins - item + 1)) + 0.7, (utilization_ratio * np.sqrt(bins - item + 1)) + 0.6)\n    scores = (bins * 1.1) / (np.exp(bins - item) + 0.1) * np.exp(-np.abs(bins - item)) + dynamic_adjustment\n    return scores",
          "objective": 0.00956,
          "other_inf": null
     },
     {
          "algorithm": "\nNew algorithm description: The new algorithm aims to optimize item distribution by leveraging the utilization ratio, dynamic adjustment, and an exponentially decaying factor to assign scores to each bin, ultimately facilitating the selection of the bin with the maximum score for item assignment.\n\nCode:\nimport numpy as np\n\ndef score(item, bins):\n    remaining_capacity = bins - item\n    utilization_ratio = 1 - remaining_capacity / bins\n    dynamic_adjustment = np.where(remaining_capacity > (item * 2), (utilization_ratio * np.sqrt(bins - item + 1)) + 0.15, (utilization_ratio * np.sqrt(bins - item + 1)) + 0.2)\n    scores = (bins * 1.1) / (np.exp(bins - item) + 0.2) * np.exp(-np.abs(bins - item)) + dynamic_adjustment\n    return scores\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    utilization_ratio = 1 - (bins - item) / bins\n    dynamic_adjustment = np.where((bins - item) > (item * 2), (utilization_ratio * np.sqrt(bins - item + 1)) + 0.15, (utilization_ratio * np.sqrt(bins - item + 1)) + 0.2)\n    scores = (bins * 1.1) / (np.exp(bins - item) + 0.2) * np.exp(-np.abs(bins - item)) + dynamic_adjustment\n    return scores",
          "objective": 0.00966,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: The new algorithm uses a combination of utilization ratio, sigmoid function, and a modified logarithmic factor based on item size and remaining capacity of the bins to assign scores to each bin for item assignment.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    utilization_ratio = 1 - (bins - item) / bins\n    sigmoid_function = 1 / (1 + np.exp(bins - item))\n    scores = (bins * 1.2) / (np.log(item + 1) + 0.5) * sigmoid_function + (utilization_ratio * np.sqrt(bins - item + 1)) + 0.7\n    return scores",
          "objective": 0.00976,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: The new algorithm aims to optimize item distribution by incorporating the square root of the remaining capacity of the bins and the item size to minimize the number of used bins. It uses a modified scoring function based on the square root of the utilization ratio and a dynamic adjustment factor to assign scores to each bin, ultimately facilitating the selection of the bin with the maximum score for item assignment.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    remaining_capacity = bins - item\n    utilization_ratio = 1 - remaining_capacity / bins\n    dynamic_adjustment = utilization_ratio * np.sqrt(bins - item) + 0.5\n    scores = (2 * bins) / (np.sqrt(bins + 1) * (bins - item + 1)) * np.exp(-np.abs(bins - item)) + dynamic_adjustment\n    return scores",
          "objective": 0.00986,
          "other_inf": null
     }
]