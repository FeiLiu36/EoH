[
     {
          "algorithm": "The new algorithm utilizes a dynamic adjustment of the scoring function based on the item size and the remaining capacity of the bins to minimize the number of used bins and optimize item distribution.",
          "code": "import numpy as np\n def score(item, bins):\n remaining_capacity = bins - item\n utilization_ratio = 1 - remaining_capacity / bins\n simulated_annealing_factor = np.exp(-np.abs(bins - item))\n dynamic_adjustment = np.where(remaining_capacity > (item * 2), (utilization_ratio * np.sqrt(bins - item + 1)) + 0.8, (utilization_ratio * np.sqrt(bins - item + 1)) + 0.6)\n scores = (bins *1.1) / (np.exp(bins - item) + 0.1)  * simulated_annealing_factor + dynamic_adjustment\n return scores",
          "objective": 0.00730,
          "other_inf": null
     },
     {
          "algorithm": "The score function will calculate the scores for each bin based on the cubic root of the item size to the remaining capacity of the bin, and then penalize the bins which are close to full capacity, ensuring self-consistency and avoiding randomness.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    utilization_ratio = np.cbrt(item) / (bins - item)\n    penalty = (bins - item) < 0.3 * bins.max()  # Penalize bins close to full capacity\n    scores = utilization_ratio - penalty\n    return scores",
          "objective": 0.01167,
          "other_inf": null
     },
     {
          "algorithm": "\nNew algorithm: The score function will calculate the scores for each bin based on the logarithm of the squared item size to the remaining capacity of the bin, with an adjustment for the bins close to full capacity, ensuring self-consistency without introducing randomness.\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    penalty = 0.3 * np.max(bins)\n    scores = np.log(item**2 + 1) / (bins - item + 1) - (bins - item < penalty) * 1.5\n    return scores",
          "objective": 0.01207,
          "other_inf": null
     },
     {
          "algorithm": "\nNew algorithm: The score function will calculate the scores for each bin based on the logarithm of the item size to the remaining capacity of the bin, with a penalty for bins close to full capacity, ensuring self-consistency without introducing randomness.\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    threshold_penalty = 0.3 * max(bins)\n    penalty = (bins - item) < threshold_penalty\n    scores = np.log(item) / (bins - item) - penalty\n    return scores",
          "objective": 0.01288,
          "other_inf": null
     },
     {
          "algorithm": "\nNew algorithm: The score function will calculate the scores for each bin based on the logarithm of the item size to the remaining capacity of the bin, and then adjust the scores to penalize bins close to full capacity, ensuring self-consistency and avoiding randomness.\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    utilization_ratio = np.log(item) / (bins - item)\n    penalty = (bins - item) < 0.4 * bins.max()  # Penalize bins close to full capacity\n    scores = utilization_ratio - penalty\n    return scores",
          "objective": 0.0157,
          "other_inf": null
     },
     {
          "algorithm": "\nNew algorithm: The score function will calculate the scores for each bin based on the logarithm of the squared item size to the remaining capacity of the bin, with an adjustment for the bins close to full capacity, ensuring self-consistency without introducing randomness.\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    penalty = 0.3 * max(bins)\n    scores = np.log(item**2) / (bins - item) - (bins - item < penalty) * 1.5\n    return scores",
          "objective": 0.0159,
          "other_inf": null
     },
     {
          "algorithm": "The score function will calculate the scores for each bin based on the cubic root of the item size to the remaining capacity of the bin, and then penalize the bins which are close to full capacity, ensuring self-consistency and avoiding randomness.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    utilization_ratio = np.cbrt(item) / (bins - item)\n    penalty = (bins - item) < 0.4 * bins.max()  # Penalize bins close to full capacity\n    scores = utilization_ratio - penalty\n    return scores",
          "objective": 0.01751,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: The score function will calculate the scores for each bin based on the square root of the item size to the remaining capacity of the bin, and then adjust the scores non-linearly with an additional penalty for bins close to full capacity, ensuring self-consistency and avoiding randomness.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    utilization_ratio = np.sqrt(item) / (bins - item)\n    penalty = (bins - item) < 0.2 * bins.max()  # Penalize bins close to full capacity\n    scores = utilization_ratio - penalty\n    return scores",
          "objective": 0.01982,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: The score function will calculate the scores for each bin based on the square root of the item size to the remaining capacity of the bin, with a penalty for bins close to full capacity, ensuring self-consistency without introducing randomness.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    threshold_penalty = 0.25 * max(bins)\n    penalty = (bins - item) < threshold_penalty\n    scores = np.sqrt(item) / (bins - item) - penalty\n    return scores",
          "objective": 0.02022,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: The score function will calculate the scores for each bin based on the logarithm of the item size to the remaining capacity of the bin, squared, with an additional non-linear adjustment for the scores, ensuring self-consistency and avoiding randomness.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    utilization_ratio = np.log(item**2) / (bins - item)\n    penalty = (bins - item) < 0.3 * bins.max()  # Penalize bins close to full capacity\n    scores = utilization_ratio - penalty\n    return scores",
          "objective": 0.02435,
          "other_inf": null
     },
     {
          "algorithm": "\nNew algorithm: The score function will calculate the scores for each bin based on the logarithm of the item size to the remaining capacity of the bin, with a penalty for bins close to full capacity, ensuring self-consistency without introducing randomness.\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    threshold_penalty = 0.2 * max(bins)\n    penalty = (bins - item) < threshold_penalty\n    scores = np.log(item) / (bins - item) - penalty\n    return scores",
          "objective": 0.02475,
          "other_inf": null
     },
     {
          "algorithm": "\nNew algorithm: The score function will calculate the scores for each bin based on a mixture of the square root and the natural logarithm of the item size to the remaining capacity of the bin, with an additional penalty for bins close to full capacity, ensuring a unique and consistent scoring system without introducing randomness.\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_bins = bins.max()\n    threshold_penalty = 0.2 * max_bins\n    penalty = (bins - item) < threshold_penalty\n    scores = (np.sqrt(item) + np.log(item)) / (bins - item) - penalty\n    return scores",
          "objective": 0.02847,
          "other_inf": null
     },
     {
          "algorithm": "\nNew algorithm: The score function will calculate the scores for each bin based on the inverse of the remaining capacity, with a penalty for bins close to full capacity, ensuring self-consistency and avoiding the random component, and minimizing the number of used bins by prioritizing bins with higher remaining capacity.\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    penalty = (bins - item) < 0.2 * bins.max()  # Penalty for bins close to full capacity\n    scores = 1 / (bins - item) - penalty\n    scores[bins == bins.max()] = -np.inf\n    return scores",
          "objective": 0.02918,
          "other_inf": null
     },
     {
          "algorithm": "\nNew algorithm description:\nThe new algorithm will calculate the score function by taking the reciprocal of the priority of the bin with remaining capacity, with a penalty for bins close to full capacity, to minimize the number of used bins.\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    priority = np.arange(len(bins)) + 1\n    reciprocal_priority = 1 / priority\n    penalty = (bins - item) < 0.2 * bins.max()\n    scores = reciprocal_priority / (bins - item) - penalty\n    scores[bins == bins.max()] = -np.inf\n    return scores",
          "objective": 0.02938,
          "other_inf": null
     },
     {
          "algorithm": "\nNew algorithm: The score function will calculate the scores for each bin based on the remaining capacity of the bin, penalizing the bins with larger capacities, and also considering the absolute difference between the bin capacity and the item size, with a smaller penalty for the deviation from the average capacity of all bins.\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    avg_capacity = np.mean(bins)\n    penalty = np.abs(bins - avg_capacity) * 0.5 # Smaller penalty for deviation from average capacity\n    scores = bins / (bins - item) - penalty\n    max_capacity_bins = np.where(bins == bins.max())[0]\n    scores[max_capacity_bins] = -np.inf\n    return scores",
          "objective": 0.02958,
          "other_inf": null
     },
     {
          "algorithm": "\nNew algorithm: The score function will calculate the scores for each bin using a non-linear function of the remaining capacity of the bin, with a penalty for capacities close to full and a unique adjustment factor based on the position, resulting in an efficient and modified scoring system to minimize the number of used bins.\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_bins = bins.max()\n    penalty = 0.2 * max_bins \n    bin_indexes = np.arange(len(bins))\n    scores = 1 / (bins - item) - (bins - item < penalty) * 2\n    scores = scores / np.sqrt(bin_indexes + 5)\n    max_capacity_bins = np.where(bins == max_bins)[0]\n    for idx in max_capacity_bins:\n        scores[idx] = -np.inf\n    return scores",
          "objective": 0.02988,
          "other_inf": null
     },
     {
          "algorithm": "\n\nNew algorithm: The score function will calculate the scores for each bin based on an exponential function of the remaining capacity of the bin, with a penalty for capacities close to full and a unique adjustment factor based on the position of the bin, ensuring self-consistency and a different form from the given algorithms.\n\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    penalty = 0.2 * np.max(bins) \n    bin_indexes = np.arange(len(bins))\n    scores = np.exp(1 / (bins - item)) - (bins - item < penalty) * 2\n    scores = scores / np.sqrt(bin_indexes + 2)\n    max_capacity_bins = np.where(bins == np.max(bins))[0]\n    for idx in max_capacity_bins:\n        scores[idx] = -np.inf\n    return scores",
          "objective": 0.03008,
          "other_inf": null
     },
     {
          "algorithm": "\nNew algorithm: The score function will calculate the scores for each bin using a linear function of the remaining capacity of the bin, with a penalty for capacities close to full and a unique adjustment factor based on the position, resulting in an efficient and modified scoring system to minimize the number of used bins.\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_bins = np.max(bins)\n    penalty = 0.2 * max_bins\n    bin_indexes = np.arange(len(bins))\n    adjusted_item = bins - item\n    \n    scores = (1 / adjusted_item) - (adjusted_item < penalty) * 2\n    scores = scores / np.sqrt(bin_indexes + 3)\n    \n    max_capacity_bins = np.where(bins == max_bins)[0]\n    for idx in max_capacity_bins:\n        scores[idx] = -np.inf\n    \n    return scores",
          "objective": 0.03049,
          "other_inf": null
     },
     {
          "algorithm": "\n\nNew algorithm: The score function will calculate the scores for each bin using a non-linear function of the remaining capacity of the bin, incorporating a penalty for the bins with capacities close to full, and also considering a unique adjustment factor for each bin based on its position, resulting in a novel and efficient scoring system.\n\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_bins = bins.max()\n    penalty = 0.2 * max_bins \n    bin_indexes = np.arange(len(bins))\n    scores = 1 / (bins - item) - (bins - item < penalty) * 2\n    scores = scores / np.sqrt(bin_indexes + 2)\n    max_capacity_bins = np.where(bins == max_bins)[0]\n    for idx in max_capacity_bins:\n        scores[idx] = -np.inf\n    return scores",
          "objective": 0.03069,
          "other_inf": null
     },
     {
          "algorithm": "\nThe new algorithm will be based on the concept of geometric priority, where the score function will be calculated by taking the geometric mean of the priority of the bin with the remaining capacity, with a penalty for bins close to full capacity, ensuring self-consistency and minimizing the number of used bins. \n\nimport numpy as np\n\ndef score(item, bins):\n    priority = np.arange(len(bins)) + 1\n    geometric_mean = np.prod(priority) ** (1 / len(priority))\n    penalty = (bins - item) < 0.2 * bins.max()\n    scores = geometric_mean / (bins - item) - penalty\n    scores[bins == bins.max()] = -np.inf\n    return scores\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    priority = np.arange(len(bins)) + 1\n    geometric_mean = np.prod(priority) ** (1 / len(priority))\n    penalty = (bins - item) < 0.2 * bins.max()\n    scores = geometric_mean / (bins - item) - penalty\n    scores[bins == bins.max()] = -np.inf\n    return scores",
          "objective": 0.03079,
          "other_inf": null
     }
]