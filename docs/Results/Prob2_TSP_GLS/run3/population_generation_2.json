[
     {
          "algorithm": "New Algorithm: The new algorithm updates the edge distance matrix by penalizing the distances of edges that have been frequently used in the local optimal tour, with a penalty factor determined by the square of the difference between the maximum number of edge uses and the actual number of edge uses, but with a higher penalty factor of 1.\n\n```",
          "code": "import numpy as np\n\ndef update_edge_distance(edge_distance, local_opt_tour, edge_n_used):\n    updated_edge_distance = np.copy(edge_distance)\n    max_n_used = np.max(edge_n_used)\n    penalty_factor = 1 * (max_n_used - edge_n_used) ** 2\n    \n    for i in range(len(local_opt_tour)-1):\n        edge_i = local_opt_tour[i]\n        edge_j = local_opt_tour[i+1]\n        \n        updated_edge_distance[edge_i][edge_j] += penalty_factor[edge_i][edge_j]\n        updated_edge_distance[edge_j][edge_i] = updated_edge_distance[edge_i][edge_j]  # symmetrical matrix\n        \n    return updated_edge_distance",
          "objective": 0.01424,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm updates the edge distance matrix by penalizing the distances of edges that have been frequently used in the local optimal tour, with a penalty factor increased by a higher power of the difference between the maximum number of edge uses and the actual number of edge uses.",
          "code": "import numpy as np\n\ndef update_edge_distance(edge_distance, local_opt_tour, edge_n_used):\n    updated_edge_distance = np.copy(edge_distance)\n    max_n_used = np.max(edge_n_used)\n    penalty_factor = 0.5 * np.power((max_n_used - edge_n_used), 1.5)\n    \n    for i in range(len(local_opt_tour)-1):\n        edge_i = local_opt_tour[i]\n        edge_j = local_opt_tour[i+1]\n        \n        updated_edge_distance[edge_i][edge_j] += penalty_factor[edge_i][edge_j]\n        updated_edge_distance[edge_j][edge_i] = updated_edge_distance[edge_i][edge_j] # symmetrical matrix\n        \n    return updated_edge_distance",
          "objective": 0.01655,
          "other_inf": null
     },
     {
          "algorithm": "New Algorithm Description: The new algorithm updates the edge distance matrix by adding a penalty to the distances of edges that have been frequently used in the local optimal tour, with a penalty factor increased by the logarithm of the difference between the maximum number of edge uses and the actual number of edge uses, but with a higher penalty factor of 0.8.\n\nCode:\n\n```",
          "code": "import numpy as np\n\ndef update_edge_distance(edge_distance, local_opt_tour, edge_n_used):\n    updated_edge_distance = np.copy(edge_distance)\n    max_n_used = np.max(edge_n_used)\n    penalty_factor = 0.8 * np.log(max_n_used - edge_n_used + 1)\n    \n    for i in range(len(local_opt_tour)-1):\n        edge_i = local_opt_tour[i]\n        edge_j = local_opt_tour[i+1]\n        \n        updated_edge_distance[edge_i][edge_j] += penalty_factor[edge_i][edge_j]\n        updated_edge_distance[edge_j][edge_i] = updated_edge_distance[edge_i][edge_j] # symmetrical matrix\n        \n    return updated_edge_distance",
          "objective": 0.0178,
          "other_inf": null
     },
     {
          "algorithm": "New Algorithm: The new algorithm updates the edge distance matrix by penalizing the distances of edges that have been frequently used in the local optimal tour, with a penalty factor determined by the square root of the difference between the maximum number of edge uses and the actual number of edge uses, but with a higher penalty factor of 0.5.\n\nCode:\n\n``` ",
          "code": "import numpy as np\n\ndef update_edge_distance(edge_distance, local_opt_tour, edge_n_used):\n    updated_edge_distance = np.copy(edge_distance)\n    max_n_used = np.max(edge_n_used)\n    penalty_factor = 0.5 * np.sqrt((max_n_used - edge_n_used))\n    \n    for i in range(len(local_opt_tour)-1):\n        edge_i = local_opt_tour[i]\n        edge_j = local_opt_tour[i+1]\n        \n        updated_edge_distance[edge_i][edge_j] += penalty_factor[edge_i][edge_j]\n        updated_edge_distance[edge_j][edge_i] = updated_edge_distance[edge_i][edge_j]  # symmetrical matrix\n        \n    return updated_edge_distance",
          "objective": 0.02088,
          "other_inf": null
     },
     {
          "algorithm": "New Algorithm Description: The new algorithm updates the edge distance matrix by penalizing the distances of edges that have been frequently used in the local optimal tour, with a penalty factor increased by a higher power of the difference between the maximum number of edge uses and the actual number of edge uses. However, it uses a different penalty factor of 0.75 * (max_n_used - edge_n_used) instead of 0.5 * (max_n_used - edge_n_used) raised to the power of 1.5.\n\nCode:\n\n",
          "code": "import numpy as np\n\ndef update_edge_distance(edge_distance, local_opt_tour, edge_n_used):\n    updated_edge_distance = np.copy(edge_distance)\n    max_n_used = np.max(edge_n_used)\n    penalty_factor = 0.75 * (max_n_used - edge_n_used)\n    \n    for i in range(len(local_opt_tour)-1):\n        edge_i = local_opt_tour[i]\n        edge_j = local_opt_tour[i+1]\n        \n        updated_edge_distance[edge_i][edge_j] += penalty_factor[edge_i][edge_j]\n        updated_edge_distance[edge_j][edge_i] = updated_edge_distance[edge_i][edge_j] # symmetrical matrix\n        \n    return updated_edge_distance",
          "objective": 0.02127,
          "other_inf": null
     },
     {
          "algorithm": "New Algorithm Description: The new algorithm updates the edge distance matrix by adding a penalty to the distances of edges that have been frequently used in the local optimal tour, with a penalty factor increased by a higher power of the difference between the maximum number of edge uses and the actual number of edge uses, but with a reduced penalty factor of 0.2.\n\nCode:\n\n``` ",
          "code": "import numpy as np\n\ndef update_edge_distance(edge_distance, local_opt_tour, edge_n_used):\n    updated_edge_distance = np.copy(edge_distance)\n    max_n_used = np.max(edge_n_used)\n    penalty_factor = 0.2 * np.power((max_n_used - edge_n_used), 3)\n    \n    for i in range(len(local_opt_tour)-1):\n        edge_i = local_opt_tour[i]\n        edge_j = local_opt_tour[i+1]\n        \n        updated_edge_distance[edge_i][edge_j] += penalty_factor[edge_i][edge_j]\n        updated_edge_distance[edge_j][edge_i] = updated_edge_distance[edge_i][edge_j] # symmetrical matrix\n        \n    return updated_edge_distance",
          "objective": 0.02143,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm description: The new algorithm updates the edge distance matrix by adding a penalty to the distances of edges that have been frequently used in the local optimal tour based on a logarithmically decreasing function of the number of times each edge has been used.\n\n```",
          "code": "import numpy as np\n\ndef update_edge_distance(edge_distance, local_opt_tour, edge_n_used):\n    updated_edge_distance = np.copy(edge_distance)\n    max_n_used = np.max(edge_n_used)\n    \n    for i in range(len(local_opt_tour)-1):\n        edge_i = local_opt_tour[i]\n        edge_j = local_opt_tour[i+1]\n        \n        penalty = np.log(2 + max_n_used - edge_n_used[edge_i][edge_j]) # new parameter setting\n        \n        updated_edge_distance[edge_i][edge_j] += penalty\n        updated_edge_distance[edge_j][edge_i] = updated_edge_distance[edge_i][edge_j] # symmetrical matrix\n        \n    return updated_edge_distance",
          "objective": 0.02184,
          "other_inf": null
     },
     {
          "algorithm": "New Algorithm Description: The new algorithm updates the edge distance matrix by adding a penalty to the distances of edges that have been frequently used in the local optimal tour, with a penalty factor increased by a higher power of the difference between the maximum number of edge uses and the actual number of edge uses, but with a higher penalty factor of 0.6.\n\nCode:\n\n```\n",
          "code": "import numpy as np\n\ndef update_edge_distance(edge_distance, local_opt_tour, edge_n_used):\n    updated_edge_distance = np.copy(edge_distance)\n    max_n_used = np.max(edge_n_used)\n    penalty_factor = 0.6 * np.power((max_n_used - edge_n_used), 3)\n    \n    for i in range(len(local_opt_tour)-1):\n        edge_i = local_opt_tour[i]\n        edge_j = local_opt_tour[i+1]\n        \n        updated_edge_distance[edge_i][edge_j] += penalty_factor[edge_i][edge_j]\n        updated_edge_distance[edge_j][edge_i] = updated_edge_distance[edge_i][edge_j] # symmetrical matrix\n        \n    return updated_edge_distance",
          "objective": 0.02206,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm description:\nThe new algorithm updates the edge distance matrix by penalizing the distances of edges that have been frequently used in the local optimal tour, with a penalty factor increased by a higher power of the difference between the maximum number of edge uses and the actual number of edge uses.\n\n\nNew algorithm code:\n\n```",
          "code": "import numpy as np\n\ndef update_edge_distance(edge_distance, local_opt_tour, edge_n_used):\n    updated_edge_distance = np.copy(edge_distance)\n    max_n_used = np.max(edge_n_used)\n    penalty_factor = 0.7 * np.power((max_n_used - edge_n_used), 1.5)\n    \n    for i in range(len(local_opt_tour)-1):\n        edge_i = local_opt_tour[i]\n        edge_j = local_opt_tour[i+1]\n        \n        updated_edge_distance[edge_i][edge_j] += penalty_factor[edge_i][edge_j]\n        updated_edge_distance[edge_j][edge_i] = updated_edge_distance[edge_i][edge_j] # symmetrical matrix\n        \n    return updated_edge_distance",
          "objective": 0.02247,
          "other_inf": null
     },
     {
          "algorithm": "New Algorithm Description (with different parameter settings): The new algorithm updates the edge distance matrix by adding a penalty to the distances of edges that have been frequently used in the local optimal tour, with a penalty factor increased by the square of the difference between the maximum number of edge uses and the actual number of edge uses, but with a higher penalty factor of 0.75.\n\nCode:\n\n```",
          "code": "import numpy as np\n\ndef update_edge_distance(edge_distance, local_opt_tour, edge_n_used):\n    updated_edge_distance = np.copy(edge_distance)\n    max_n_used = np.max(edge_n_used)\n    penalty_factor = 0.75 * np.square((max_n_used - edge_n_used))\n    \n    for i in range(len(local_opt_tour)-1):\n        edge_i = local_opt_tour[i]\n        edge_j = local_opt_tour[i+1]\n        \n        updated_edge_distance[edge_i][edge_j] += penalty_factor[edge_i][edge_j]\n        updated_edge_distance[edge_j][edge_i] = updated_edge_distance[edge_i][edge_j] # symmetrical matrix\n        \n    return updated_edge_distance",
          "objective": 0.0233,
          "other_inf": null
     },
     {
          "algorithm": "New Algorithm Description: The new algorithm updates the edge distance matrix by adding a penalty to the distances of edges that have been frequently used in the local optimal tour, with a penalty factor increased by a higher power of the difference between the maximum number of edge uses and the actual number of edge uses, but with a higher penalty factor of 0.8.\n\nCode:\n\n```",
          "code": "import numpy as np\n\ndef update_edge_distance(edge_distance, local_opt_tour, edge_n_used):\n    updated_edge_distance = np.copy(edge_distance)\n    max_n_used = np.max(edge_n_used)\n    penalty_factor = 0.8 * np.power((max_n_used - edge_n_used), 4)\n    \n    for i in range(len(local_opt_tour)-1):\n        edge_i = local_opt_tour[i]\n        edge_j = local_opt_tour[i+1]\n        \n        updated_edge_distance[edge_i][edge_j] += penalty_factor[edge_i][edge_j]\n        updated_edge_distance[edge_j][edge_i] = updated_edge_distance[edge_i][edge_j] # symmetrical matrix\n        \n    return updated_edge_distance",
          "objective": 0.02332,
          "other_inf": null
     },
     {
          "algorithm": "New Algorithm Description: The new algorithm updates the edge distance matrix by adding a penalty to the distances of edges that have been frequently used in the local optimal tour, with a penalty factor increased by a higher power of the difference between the maximum number of edge uses and the actual number of edge uses.\n\n```",
          "code": "import numpy as np\n\ndef update_edge_distance(edge_distance, local_opt_tour, edge_n_used):\n    updated_edge_distance = np.copy(edge_distance)\n    max_n_used = np.max(edge_n_used)\n    penalty_factor = 0.1 * np.power((max_n_used - edge_n_used), 2)\n    \n    for i in range(len(local_opt_tour)-1):\n        edge_i = local_opt_tour[i]\n        edge_j = local_opt_tour[i+1]\n        \n        updated_edge_distance[edge_i][edge_j] += penalty_factor[edge_i][edge_j]\n        updated_edge_distance[edge_j][edge_i] = updated_edge_distance[edge_i][edge_j] # symmetrical matrix\n        \n    return updated_edge_distance",
          "objective": 0.02561,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm description: The new algorithm updates the edge distance matrix by penalizing the distances of edges that have been frequently used in the local optimal tour, with a penalty factor based on the square root of the difference between the maximum number of edge uses and the actual number of edge uses.\n\nNew algorithm implementation:\n\n```",
          "code": "import numpy as np\n\ndef update_edge_distance(edge_distance, local_opt_tour, edge_n_used):\n    updated_edge_distance = np.copy(edge_distance)\n    max_n_used = np.max(edge_n_used)\n    penalty_factor = np.sqrt(max_n_used - edge_n_used)\n    \n    for i in range(len(local_opt_tour)-1):\n        edge_i = local_opt_tour[i]\n        edge_j = local_opt_tour[i+1]\n        \n        updated_edge_distance[edge_i][edge_j] += penalty_factor[edge_i][edge_j]\n        updated_edge_distance[edge_j][edge_i] = updated_edge_distance[edge_i][edge_j] # symmetrical matrix\n        \n    return updated_edge_distance",
          "objective": 0.02571,
          "other_inf": null
     },
     {
          "algorithm": "New Algorithm Description: The new algorithm updates the edge distance matrix by adding a penalty to the distances of edges that have been frequently used in the local optimal tour, with a penalty factor increased by a higher power of the difference between the maximum number of edge uses and the actual number of edge uses, using a different penalty factor calculation.\n\nCode:\n```",
          "code": "import numpy as np\n\ndef update_edge_distance(edge_distance, local_opt_tour, edge_n_used):\n    updated_edge_distance = np.copy(edge_distance)\n    max_n_used = np.max(edge_n_used)\n    penalty_factor = 0.5 * np.exp(2*(max_n_used - edge_n_used))\n    \n    for i in range(len(local_opt_tour)-1):\n        edge_i = local_opt_tour[i]\n        edge_j = local_opt_tour[i+1]\n        \n        updated_edge_distance[edge_i][edge_j] += penalty_factor[edge_i][edge_j]\n        updated_edge_distance[edge_j][edge_i] = updated_edge_distance[edge_i][edge_j] # symmetrical matrix\n        \n    return updated_edge_distance",
          "objective": 0.02656,
          "other_inf": null
     },
     {
          "algorithm": "New Algorithm Description: The new algorithm updates the edge distance matrix by adding a penalty to the distances of edges that have been frequently used in the local optimal tour, with a penalty factor increased by a higher power of the difference between the maximum number of edge uses and the actual number of edge uses, but with a reduced penalty factor of 0.1.\n\nCode:\n\n```",
          "code": "import numpy as np\n\ndef update_edge_distance(edge_distance, local_opt_tour, edge_n_used):\n    updated_edge_distance = np.copy(edge_distance)\n    max_n_used = np.max(edge_n_used)\n    penalty_factor = 0.1 * np.power((max_n_used - edge_n_used), 3)\n    \n    for i in range(len(local_opt_tour)-1):\n        edge_i = local_opt_tour[i]\n        edge_j = local_opt_tour[i+1]\n        \n        updated_edge_distance[edge_i][edge_j] += penalty_factor[edge_i][edge_j]\n        updated_edge_distance[edge_j][edge_i] = updated_edge_distance[edge_i][edge_j] # symmetrical matrix\n        \n    return updated_edge_distance",
          "objective": 0.02676,
          "other_inf": null
     },
     {
          "algorithm": "New Algorithm Description: The new algorithm updates the edge distance matrix by penalizing the distances of edges that have been frequently used in the local optimal tour, with a penalty factor increased by a higher power of the difference between the maximum number of edge uses and the actual number of edge uses. However, it uses a different penalty factor of 0.6 * (max_n_used - edge_n_used) instead of 0.75 * (max_n_used - edge_n_used) raised to the power of 1.5.\n\nCode:\n\n```",
          "code": "import numpy as np\n\ndef update_edge_distance(edge_distance, local_opt_tour, edge_n_used):\n    updated_edge_distance = np.copy(edge_distance)\n    max_n_used = np.max(edge_n_used)\n    penalty_factor = 0.6 * (max_n_used - edge_n_used)\n    \n    for i in range(len(local_opt_tour)-1):\n        edge_i = local_opt_tour[i]\n        edge_j = local_opt_tour[i+1]\n        \n        updated_edge_distance[edge_i][edge_j] += penalty_factor[edge_i][edge_j]\n        updated_edge_distance[edge_j][edge_i] = updated_edge_distance[edge_i][edge_j] # symmetrical matrix\n        \n    return updated_edge_distance",
          "objective": 0.02781,
          "other_inf": null
     },
     {
          "algorithm": "New Algorithm Description: The new algorithm updates the edge distance matrix by adding a penalty to the distances of edges that have been frequently used in the local optimal tour, with a penalty factor increased by a higher power of the difference between the maximum number of edge uses and the actual number of edge uses, but with a higher penalty factor of 0.3.\n\nCode:\n\n```",
          "code": "import numpy as np\n\ndef update_edge_distance(edge_distance, local_opt_tour, edge_n_used):\n    updated_edge_distance = np.copy(edge_distance)\n    max_n_used = np.max(edge_n_used)\n    penalty_factor = 0.3 * np.power((max_n_used - edge_n_used), 3)\n    \n    for i in range(len(local_opt_tour)-1):\n        edge_i = local_opt_tour[i]\n        edge_j = local_opt_tour[i+1]\n        \n        updated_edge_distance[edge_i][edge_j] += penalty_factor[edge_i][edge_j]\n        updated_edge_distance[edge_j][edge_i] = updated_edge_distance[edge_i][edge_j] # symmetrical matrix\n        \n    return updated_edge_distance",
          "objective": 0.02846,
          "other_inf": null
     },
     {
          "algorithm": "New Algorithm Description: The new algorithm updates the edge distance matrix by adding a penalty to the distances of edges that have been frequently used in the local optimal tour, with a penalty factor increased by a higher power of the difference between the maximum number of edge uses and the actual number of edge uses, but with a reduced penalty factor of 0.05.\n\nCode:\n\n",
          "code": "import numpy as np\n\ndef update_edge_distance(edge_distance, local_opt_tour, edge_n_used):\n    updated_edge_distance = np.copy(edge_distance)\n    max_n_used = np.max(edge_n_used)\n    penalty_factor = 0.05 * np.power((max_n_used - edge_n_used), 2)\n    \n    for i in range(len(local_opt_tour)-1):\n        edge_i = local_opt_tour[i]\n        edge_j = local_opt_tour[i+1]\n        \n        updated_edge_distance[edge_i][edge_j] += penalty_factor[edge_i][edge_j]\n        updated_edge_distance[edge_j][edge_i] = updated_edge_distance[edge_i][edge_j] # symmetrical matrix\n        \n    return updated_edge_distance",
          "objective": 0.03122,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm description: The new algorithm updates the edge distance matrix by adding a penalty to the distances of edges that have been frequently used in the local optimal tour, with a penalty factor increased by a higher power of the difference between the maximum number of edge uses and the actual number of edge uses, but with a lower penalty factor of 0.4.\n\nCode:\n\n```",
          "code": "import numpy as np\n\ndef update_edge_distance(edge_distance, local_opt_tour, edge_n_used):\n    updated_edge_distance = np.copy(edge_distance)\n    max_n_used = np.max(edge_n_used)\n    penalty_factor = 0.4 * np.power((max_n_used - edge_n_used), 3)\n    \n    for i in range(len(local_opt_tour)-1):\n        edge_i = local_opt_tour[i]\n        edge_j = local_opt_tour[i+1]\n        \n        updated_edge_distance[edge_i][edge_j] += penalty_factor[edge_i][edge_j]\n        updated_edge_distance[edge_j][edge_i] = updated_edge_distance[edge_i][edge_j] # symmetrical matrix\n        \n    return updated_edge_distance",
          "objective": 0.03163,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm description: The new algorithm updates the edge distance matrix by adding a penalty to the distances of edges that have been frequently used in the local optimal tour based on a square root function of the number of times each edge has been used.\n\nCode:\n```",
          "code": "import numpy as np\n\ndef update_edge_distance(edge_distance, local_opt_tour, edge_n_used):\n    updated_edge_distance = np.copy(edge_distance)\n    max_n_used = np.max(edge_n_used)\n    \n    for i in range(len(local_opt_tour)-1):\n        edge_i = local_opt_tour[i]\n        edge_j = local_opt_tour[i+1]\n        \n        penalty = np.sqrt(max_n_used + 1 - edge_n_used[edge_i][edge_j]) # new parameter setting\n        \n        updated_edge_distance[edge_i][edge_j] += penalty\n        updated_edge_distance[edge_j][edge_i] = updated_edge_distance[edge_i][edge_j] # symmetrical matrix\n        \n    return updated_edge_distance",
          "objective": 0.03201,
          "other_inf": null
     }
]