[
     {
          "algorithm": "Backbone idea: The common backbone idea in the provided algorithms is to assign scores to bins based on their remaining capacity and adjust the scores based on various factors such as the item size and the position of the bin in the list.\n\nNew algorithm: The new algorithm assigns a score to each bin based on the ratio of the item size to the product of the remaining capacity of the bin and its index, with a higher penalty applied to bins with smaller capacities, in order to minimize the number of used bins.\n\nPython implementation:\n\n```",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = item / ((bins - item) * range(1, len(bins) + 1))\n    return scores",
          "objective": 0.03884,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm description: The new algorithm assigns a score to each bin based on the square of the item size divided by the absolute difference between the item size and the rest capacity of the bin, divided by the index plus one, the bin capacity, and the square root of the bin capacity, with a higher penalty applied to bins with smaller capacities, in order to efficiently utilize bins with larger capacities.\n\nPython implementation:\n\n``` ",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the absolute difference between item size and rest capacities of bins\n    diff = np.abs(item - bins)\n\n    # Calculate the scores for each bin\n    scores = (item**2 / diff) / ((np.arange(1, len(bins) + 1) + 1) * bins * np.sqrt(bins))\n\n    return scores",
          "objective": 0.03914,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm assigns a score to each bin based on the ratio of the item size to the absolute difference between the item size and the rest capacity of the bin, divided by the index plus one and the bin capacity, with a higher penalty applied to bins with smaller capacities, in order to efficiently utilize bins with larger capacities.\n\nPython implementation:\n\n```",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the absolute difference between item size and rest capacities of bins\n    diff = np.abs(item - bins)\n\n    # Calculate the scores for each bin\n    scores = (item / diff) / ((np.arange(1, len(bins) + 1) + 1) * bins)\n    \n    return scores",
          "objective": 0.03954,
          "other_inf": null
     },
     {
          "algorithm": "Backbone idea: The common backbone idea in the provided algorithms is to assign scores to bins based on their remaining capacity and adjust the scores based on various factors such as the item size and the position of the bin in the list.\n\nNew algorithm: The new algorithm assigns a score to each bin based on the ratio of the item size to the product of the remaining capacity of the bin and its index, with a higher penalty applied to bins with smaller capacities, in order to minimize the number of used bins.\n\nPython implementation:\n\n```",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = item / ((bins - item) * 10)\n    return scores",
          "objective": 0.03984,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm assigns a score to each bin based on the ratio of the item size to the rest capacity of the bin multiplied by a penalty factor determined by the bin index and the maximum capacity, with a higher penalty applied to bins with larger capacities. The penalty factor is calculated using a power function with a base of 2 and an exponent of the bin index minus 1 divided by the maximum capacity minus 1, to ensure that smaller bins have a higher penalty and larger bins have a lower penalty, in order to optimize the bin assignment and minimize the number of used bins.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    ratios = item / bins\n    penalties = np.power(2, (np.arange(1, len(bins) + 1) - 1) / (max_capacity - 1))\n    scores = ratios * penalties\n    return scores",
          "objective": 0.03994,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm assigns a score to each bin based on the product of the ratio of the item size to the rest capacity of the bin and a penalty factor determined by the bin index and the maximum capacity, with a higher penalty applied to bins with larger capacities, in order to optimize the bin assignment and minimize the number of used bins.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    ratios = item / bins\n    penalties = np.exp(-np.arange(1, len(bins) + 1) / max_capacity)\n    scores = ratios * penalties\n    return scores",
          "objective": 0.04025,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm assigns a score to each bin based on the product of its remaining capacity and a penalty factor, with a larger penalty applied to bins with higher remaining capacity, in order to encourage the assignment of items to bins with less remaining capacity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    penalty = np.exp(bins / max_capacity) - 1\n    scores = bins * penalty\n    scores = scores / np.arange(1, len(bins) + 1)\n    scores[bins == max_capacity] -= item\n    return scores",
          "objective": 0.04055,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: The new algorithm assigns a score to each bin based on the ratio of the item size to the difference of the remaining capacity of the bin and the item size, with a higher penalty applied to bins with larger indices, in order to minimize the number of used bins.\n\nPython implementation:\n```\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = item / (np.maximum(bins - item, 1) * np.arange(1, len(bins) + 1))\n    return scores",
          "objective": 0.04075,
          "other_inf": null
     },
     {
          "algorithm": "\nThe new algorithm assigns a score to each bin based on the remaining capacity of the bin, with a penalty factor applied based on a function of the ratio between the remaining capacity and the maximum capacity, in order to encourage the assignment of items to bins with less remaining capacity. The score is further adjusted based on the position of the bin in the list, with earlier bins having higher scores. Bins with the maximum capacity have their scores reduced by the size of the item.\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    ratios = bins / max_capacity\n    scores = bins * (1 - np.exp(-ratios)**2)\n    scores = scores / np.arange(1, len(bins) + 1)\n    scores[bins == max_capacity] -= item\n    return scores",
          "objective": 0.04085,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm assigns a score to each bin based on the remaining capacity of the bin, with a penalty factor applied based on a function of the ratio between the remaining capacity and the maximum capacity, in order to encourage the assignment of items to bins with less remaining capacity. The score is further adjusted based on the position of the bin in the list, with earlier bins having higher scores. Bins with the maximum capacity have their scores reduced by the size of the item, and an additional penalty factor is applied based on the ratio between the item size and the remaining capacity of the bin.\n\nCode:\n```",
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    ratios = bins / max_capacity\n    scores = bins * (1 - np.exp(-ratios)**2)\n    scores = scores / np.arange(1, len(bins) + 1)\n    scores[bins == max_capacity] -= item\n    scores -= item / bins\n    return scores",
          "objective": 0.04095,
          "other_inf": null
     }
]