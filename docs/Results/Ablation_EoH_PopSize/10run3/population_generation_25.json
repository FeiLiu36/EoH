[
     {
          "algorithm": "The new algorithm modifies the scoring function by introducing a penalty term based on the inverse of the remaining capacity of each bin, with a scaling factor applied to prioritize bins with smaller remaining capacities, in order to minimize the number of used bins.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    num_bins = len(bins)\n    bin_weights = 1 / num_bins\n    bonus_penalties = 1\n    penalties = (1 / bins) ** (np.arange(1, num_bins + 1))\n    mean_bin_capacity = np.mean(bins)\n    std_bin_capacity = np.std(bins)\n    scaling_factor = ((mean_bin_capacity + std_bin_capacity) / mean_bin_capacity) ** 2\n    scaled_penalties = penalties * scaling_factor\n    scores = item / ((bins - item) * scaled_penalties) * bin_weights * bonus_penalties\n    return scores",
          "objective": 0.00634,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm assigns a score to each bin based on the ratio of the item size to the product of the remaining capacity of the bin raised to the power determined by its index, with a balanced penalty applied to bins with smaller capacities and a bonus for bins with larger capacities, in order to minimize the number of used bins. The algorithm also takes into consideration the total remaining capacity of all bins.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    num_bins = len(bins)\n    bin_weights = np.ones(num_bins)\n    penalties = (1 / bins) ** (np.arange(1, num_bins + 1))\n    bin_indices = np.arange(num_bins) + 1\n    scores = (item / ((bins - item) * penalties)) * (bin_indices ** 2) * bin_weights\n    return scores",
          "objective": 0.00654,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm assigns a score to each bin based on the ratio of the item size to the product of the remaining capacity of the bin raised to the power determined by its index, with a balanced penalty applied to bins with smaller capacities and a bonus for bins with larger capacities, in order to minimize the number of used bins. The algorithm also takes into consideration the total remaining capacity of all bins. The scoring function is further modified by multiplying the penalties with the logarithm of the item size and the maximum bin capacity, aiming to prioritize bins with larger capacity and penalize for larger item sizes. ",
          "code": "import numpy as np\n\ndef score(item, bins):\n    num_bins = len(bins)\n    bin_index = np.arange(1, num_bins + 1)\n    max_bin_capacity = np.max(bins)\n    total_remaining_capacity = np.sum(bins)\n    bin_weights = (1 - bins / total_remaining_capacity)\n    penalties = (1 / bins) ** bin_index * np.log(item) * np.log(max_bin_capacity)\n    scores = item / ((bins - item) * penalties) * bin_weights\n    return scores",
          "objective": 0.00664,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm assigns a score to each bin based on the ratio of the item size to the product of the remaining capacity of the bin raised to the power determined by its index, with a balanced penalty applied to bins with smaller capacities and a bonus for bins with larger capacities, in order to minimize the number of used bins. The algorithm also takes into consideration the total remaining capacity of all bins.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    num_bins = len(bins)\n    bin_weights = np.ones(num_bins)\n    penalties = (1 / bins) ** (np.arange(1, num_bins + 1))\n    scores = item / ((bins - item) * penalties) * bin_weights\n    return scores",
          "objective": 0.00674,
          "other_inf": null
     },
     {
          "algorithm": "Common Backbone Idea: The existing algorithms assign scores to bins based on the ratio of the item size to the product of the remaining capacity of the bin raised to a certain power, with penalties and bonuses applied to different bins based on their capacities.\n\nNew Algorithm Description: The new algorithm assigns scores to bins based on the ratio of the item size to the product of the remaining capacity of the bin raised to the power determined by its index, with a scaling factor applied to prioritize bins with smaller remaining capacities, in order to minimize the number of used bins.\n\nNew Algorithm Implementation:\n\n```",
          "code": "import numpy as np\n\ndef score(item, bins):\n    num_bins = len(bins)\n    bin_weights = 1 / num_bins\n    bonus_penalties = 1\n    penalties = (1 / bins) ** (np.arange(1, num_bins + 1))\n    mean_bin_capacity = np.mean(bins)\n    std_bin_capacity = np.std(bins)\n    scaling_factor = ((mean_bin_capacity - std_bin_capacity) / mean_bin_capacity) ** 2\n    scaled_penalties = penalties * scaling_factor\n    scores = item / ((bins - item) * scaled_penalties) * bin_weights * bonus_penalties\n    scores = np.where(np.isnan(scores), 0, scores)\n    return scores",
          "objective": 0.00694,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm assigns a score to each bin based on the ratio of the item size to the product of the remaining capacity of the bin raised to the power determined by its index, with a balanced penalty applied to bins with smaller capacities and a bonus for bins with larger capacities, in order to minimize the number of used bins. The algorithm also takes into consideration the total remaining capacity of all bins. The scoring function is modified by adding a scaling factor to the penalties calculated based on the ratio of the total remaining capacity to the maximum bin capacity, aiming to prioritize bins with larger remaining capacities. \n\nHere is the implementation of the new score function in Python:\n\n```",
          "code": "import numpy as np\n\ndef score(item, bins):\n    num_bins = len(bins)\n    bin_weights = 1 / num_bins\n    bonus_penalties = 1\n    penalties = (1 / bins) ** (np.arange(1, num_bins + 1))\n    total_remaining_capacity = np.sum(bins)\n    max_bin_capacity = np.max(bins)\n    scaling_factor = total_remaining_capacity / max_bin_capacity\n    scaled_penalties = penalties * scaling_factor\n    scores = item / ((bins - item) * scaled_penalties) * bin_weights * bonus_penalties\n    return scores",
          "objective": 0.00704,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm assigns a score to each bin based on the ratio of the item size to the product of the remaining capacity of the bin raised to the power determined by its index, with a balanced penalty applied to bins with smaller capacities and a bonus for bins with larger capacities, in order to minimize the number of used bins. The algorithm also takes into consideration the total remaining capacity of all bins. The scoring function is modified by adding a scaling factor to the penalties calculated based on the ratio of the total remaining capacity to the maximum bin capacity, aiming to prioritize bins with larger remaining capacities.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    num_bins = len(bins)\n    bin_weights = 1 / num_bins\n    bonus_penalties = 1\n    penalties = (1 / bins) ** (np.arange(1, num_bins + 1))\n    total_remaining_capacity = np.sum(bins)\n    max_bin_capacity = np.max(bins)\n    scaling_factor = (total_remaining_capacity / max_bin_capacity) ** 2\n    scaled_penalties = penalties * scaling_factor\n    scores = item / ((bins - item) * scaled_penalties) * bin_weights * bonus_penalties\n    return scores",
          "objective": 0.00714,
          "other_inf": null
     },
     {
          "algorithm": "New Algorithm Description: The new algorithm modifies the scoring function by introducing a penalty term based on the logarithm of the remaining capacity of each bin, with a scaling factor applied to prioritize bins with larger remaining capacities, in order to minimize the number of used bins.\n\nNew Algorithm Implementation:\n\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    num_bins = len(bins)\n    bin_weights = 1 / num_bins\n    bonus_penalties = 1\n    penalties = (1 / (np.log(bins)+1)) ** (np.arange(1, num_bins + 1))\n    total_remaining_capacity = np.sum(bins)\n    max_bin_capacity = np.max(bins)\n    scaling_factor = (total_remaining_capacity / max_bin_capacity) ** 2\n    scaled_penalties = penalties * scaling_factor\n    scores = item / ((bins - item) * scaled_penalties) * bin_weights * bonus_penalties\n    return scores",
          "objective": 0.00775,
          "other_inf": null
     },
     {
          "algorithm": "New Algorithm Description: The new algorithm modifies the scoring function by introducing a penalty term based on the logarithm of the remaining capacity of each bin, with a scaling factor applied to prioritize bins with larger remaining capacities, in order to minimize the number of used bins.\n\nNew Algorithm Implementation:\n\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    num_bins = len(bins)\n    bin_weights = 1 / num_bins\n    bonus_penalties = 1\n    penalties = (1 / (np.log(bins)+1)) ** (np.arange(1, num_bins + 1))\n    mean_bin_capacity = np.mean(bins)\n    std_bin_capacity = np.std(bins)\n    scaling_factor = ((mean_bin_capacity + std_bin_capacity) / mean_bin_capacity) ** 2\n    scaled_penalties = penalties * scaling_factor\n    scores = item / ((bins - item) * scaled_penalties) * bin_weights * bonus_penalties\n    return scores",
          "objective": 0.00785,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm assigns a score to each bin based on the ratio of the item size to the product of the remaining capacity of the bin raised to the power determined by its index, with a balanced penalty applied to bins with smaller capacities and a bonus for bins with larger capacities, in order to minimize the number of used bins. The algorithm also takes into consideration the total remaining capacity of all bins. The scoring function is further modified by multiplying the penalties with the square root of the item size and the maximum bin capacity, aiming to prioritize bins with larger capacity and penalize for larger item sizes.\n\nHere is the implementation of the new algorithm in a function named \"score\":\n\n```",
          "code": "import numpy as np\n\ndef score(item, bins):\n    num_bins = len(bins)\n    bin_index = np.arange(1, num_bins + 1)\n    max_bin_capacity = np.max(bins)\n    bin_weights = (1 - bins / np.sum(bins))\n    penalties = (1 / bins) ** bin_index * np.sqrt(item) * np.sqrt(max_bin_capacity)\n    scores = item / ((bins - item) * penalties) * bin_weights\n    return scores",
          "objective": 0.00825,
          "other_inf": null
     }
]