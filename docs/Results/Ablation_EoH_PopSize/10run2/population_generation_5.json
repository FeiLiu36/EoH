[
     {
          "algorithm": "The new algorithm assigns items to bins based on a score function that combines the residual capacity of the bin, the logarithm of the index of the bin, and the cube root of the absolute difference between the residual capacity and the item size, while minimizing the number of used bins.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    residual_capacity = bins - item\n    weights = (1 / np.arange(1, len(bins)+1)) * (1 / np.cbrt(np.abs(residual_capacity)))\n    scores = residual_capacity * np.log(np.arange(1, len(bins)+1)) * weights\n    return scores",
          "objective": 0.00714,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm assigns items to bins based on a score function that combines the residual capacity of the bin, the square root of the index of the bin, and the fourth root of the absolute difference between the residual capacity and the item size, while minimizing the number of used bins.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    residual_capacity = bins - item\n    weights = (residual_capacity / np.arange(1, len(bins)+1)) * (1 / np.sqrt(np.abs(residual_capacity)))**(1/4)\n    scores = residual_capacity * weights\n    return scores",
          "objective": 0.00906,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm assigns items to bins based on a score function that combines the residual capacity of the bin, the square root of the index of the bin, and the absolute difference between the residual capacity and the item size, while minimizing the number of used bins.\n\n```\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    residual_capacity = bins - item\n    weights = (residual_capacity / np.sqrt(np.arange(1, len(bins)+1))) * (1 / np.abs(residual_capacity))\n    scores = residual_capacity * weights\n    return scores",
          "objective": 0.00956,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm assigns items to bins based on a score function that combines the residual capacity of the bin, the logarithm of the index of the bin, and the cube root of the absolute difference between the residual capacity and the item size, while minimizing the number of used bins.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    residual_capacity = bins - item\n    weights = (residual_capacity / np.arange(1, len(bins)+1)) * (1 / np.cbrt(np.abs(residual_capacity)))\n    scores = residual_capacity * weights\n    return scores",
          "objective": 0.00966,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm assigns items to bins based on a score function that combines the residual capacity of the bin, the index of the bin, and the square root of the absolute difference between the residual capacity and the item size, while minimizing the number of used bins.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    residual_capacity = bins - item\n    weights = (residual_capacity / np.arange(1, len(bins)+1)) * (1 / np.sqrt(np.abs(residual_capacity)))\n    scores = residual_capacity * weights\n    return scores",
          "objective": 0.01127,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm is a modified version of the provided algorithm. It assigns items to bins based on a score function that combines the residual capacity of the bin, the index of the bin, and the logarithm of the absolute difference between the residual capacity and the item size, while minimizing the number of used bins.\n\nUpdated code:\n\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    residual_capacity = bins - item\n    weights = (residual_capacity / np.arange(1, len(bins)+1)) * np.log(np.abs(residual_capacity))\n    scores = residual_capacity * weights\n    return scores",
          "objective": 0.01248,
          "other_inf": null
     },
     {
          "algorithm": "\nNew algorithm: The new algorithm assigns items to bins based on a score function that combines the logarithmic function of the bin index, the inverse of the residual capacity, and the exponential function of the absolute difference between the residual capacity and the item size, while minimizing the number of used bins.\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    residual_capacity = bins - item\n    scores = np.log(np.arange(1, len(bins)+1)) * (1 / residual_capacity) * np.exp(-np.abs(residual_capacity - item))\n    return scores",
          "objective": 0.0157,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm description: The new algorithm assigns items to bins based on a score function that combines the sum of the logarithm of the bin index, the inverse of the residual capacity raised to the power of 3, and the inverse of the absolute difference between the residual capacity and the item size squared, while minimizing the number of used bins.\n\nPython implementation:\n\n```",
          "code": "import numpy as np\n\ndef score(item, bins):\n    bin_index = np.arange(len(bins))\n    residual_capacity = bins - item\n    scores = np.log(bin_index + 1) + (1 / (residual_capacity + 1e-6))**3 + (1 / np.abs(residual_capacity - item + 1e-6)**2)\n    return scores",
          "objective": 0.0163,
          "other_inf": null
     },
     {
          "algorithm": "Algorithm: The new algorithm assigns items to bins based on a score function that combines the residual capacity of the bin, the logarithm of the index of the bin, and the square root of the absolute difference between the residual capacity and the item size, while minimizing the number of used bins.\n\nCode:\n\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    residual_capacity = bins - item\n    weights = (residual_capacity / np.arange(1, len(bins)+1)) * (1 / np.sqrt(np.abs(residual_capacity)))\n    scores = residual_capacity * np.log(np.arange(1, len(bins)+1)) * weights\n    return scores",
          "objective": 0.01761,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm: The new algorithm assigns items to bins based on a score function that combines the residual capacity of the bin, the index of the bin, and the logarithm of the absolute difference between the residual capacity and the item size, while minimizing the number of used bins.\n\nCode:\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    residual_capacity = bins - item\n    weights = (residual_capacity / np.arange(1, len(bins)+1)) * (1 / np.log(np.abs(residual_capacity))) # changed cube root to logarithm\n    scores = residual_capacity * weights\n    return scores",
          "objective": 0.02163,
          "other_inf": null
     }
]