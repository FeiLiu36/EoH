[
     {
          "algorithm": "\nThe algorithm assigns an item to the bin with the maximum score and updates the rest capacity of the bin accordingly, until all items are assigned. The score for each bin is calculated as the bin's current capacity divided by the difference between the bin's capacity and the item size, plus the number of times the bin has been used.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = bins / (bins - item) + np.arange(len(bins))\n    return scores",
          "objective": 0.03843,
          "other_inf": null
     },
     {
          "algorithm": "\nThe algorithm assigns an item to the bin with the maximum score, considering the rest capacity of each bin, in order to minimize the number of used bins. \n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.zeros_like(bins)\n    scores[bins != bins.max()] = item / (bins[bins != bins.max()] - item + 1)\n    return scores",
          "objective": 0.03914,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm assigns items to bins based on a score function, where each bin is assigned the item with the maximum score, and empty bins with maximum capacity are not used; the score for each bin is calculated as the square root of the bin's current capacity divided by the difference between the bin's capacity and the item size, plus the number of times the bin has been used.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.sqrt(bins) / (bins - item) + np.arange(len(bins))\n    return scores",
          "objective": 0.03944,
          "other_inf": null
     },
     {
          "algorithm": "The common backbone idea in the provided algorithms is to calculate scores for each bin based on their rest capacity and the item size. \n\nBased on this backbone idea, the new algorithm assigns an item to the bin with the maximum score and updates the rest capacity of the bin accordingly, until all items are assigned. The score for each bin is calculated as the bin's current capacity multiplied by the item size divided by the difference between the bin's capacity and the item size, plus the number of times the bin has been used.\n\n```",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = (bins * item) / (bins - item + 1) + np.arange(len(bins))\n    return scores",
          "objective": 0.03974,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm assigns items to bins based on a score function, where each bin is assigned the item with the maximum score, and empty bins with maximum capacity are not used; the goal is to minimize the number of used bins.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = item / bins\n    return scores",
          "objective": 0.03984,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm assigns items to bins based on a score function, where each bin is assigned the item with the maximum score, and empty bins with maximum capacity are not used; the goal is to minimize the number of used bins.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.zeros_like(bins)\n    max_capacity = np.max(bins)\n    scores[bins != max_capacity] = item / bins[bins != max_capacity]\n    return scores",
          "objective": 0.04095,
          "other_inf": null
     },
     {
          "algorithm": "\nThe new algorithm calculates the scores for the bins based on the ratio of their remaining capacity to the size of the current item, their relative positions, and a penalty factor for larger bins, with higher scores given to bins with smaller ratios, higher positions, and smaller penalty factors.\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.zeros_like(bins)\n    remaining_capacity = bins - item\n\n    # Calculate ratio of remaining capacity to item size\n    ratio = remaining_capacity / item\n\n    # Calculate penalty factors for larger bins\n    penalty_factor = np.exp(-bins)\n\n    # Assign scores based on ratio, bin position, and penalty factor\n    scores = ratio + np.arange(len(bins)) + penalty_factor\n\n    return scores",
          "objective": 0.04145,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm assigns an item to the bin with the maximum score and updates the rest capacity of the bin accordingly, until all items are assigned. The score for each bin is calculated as the bin's current capacity divided by the difference between the bin's capacity and the item size, plus the number of times the bin has been used, squared.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = bins / (bins - item + 1) + np.arange(len(bins))**2\n    return scores",
          "objective": 0.04226,
          "other_inf": null
     },
     {
          "algorithm": "Algorithm description: The new algorithm assigns an item to a bin with the maximum score, taking into account the rest capacity of the bins, and returns the scores for each bin. The scores are calculated by dividing the rest capacity of each bin by the item size, and then multiplying it with a decreasing factor.\n\nCode:\n\n```",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the ratios of rest capacity of each bin to the item size\n    ratios = bins.astype(float) / item\n    \n    # Set the score for bins with equal rest capacity to the maximum capacity as 0\n    ratios[bins == max(bins)] = 0\n    \n    # Calculate the scores for each bin by dividing the ratios by an increasing factor\n    scores = ratios / np.arange(1, len(bins)+1)\n    \n    return scores",
          "objective": 0.04246,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm assigns an item to a bin with the maximum score, taking into account the rest capacity of the bins, and returns the scores for each bin. The scores are calculated by dividing the rest capacity of each bin by the item size, and then multiplying it with a decreasing factor. In addition, the algorithm considers the number of already used bins in the score calculation to promote minimizing the number of used bins.\n\nCode:\n\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the ratios of rest capacity of each bin to the item size\n    ratios = bins / item\n    \n    # Set the score for bins with equal rest capacity to the maximum capacity as 0\n    ratios[bins == max(bins)] = 0\n    \n    # Calculate the scores for each bin by dividing the ratios by an increasing factor\n    scores = ratios / np.arange(1, len(bins)+1)\n    \n    # Adjust scores by considering the number of already used bins\n    scores *= np.exp(-0.1 * np.arange(0, len(bins)))\n    \n    return scores",
          "objective": 0.04286,
          "other_inf": null
     },
     {
          "algorithm": "First, we calculate the remaining capacities of each bin after assigning the current item by subtracting the item size from the bin capacities. Then, we create a mask to identify the bins that still have remaining capacity and set their scores to an initial value of 1. Next, we divide the scores by the remaining capacities of the respective bins to adjust the scores based on the amount of remaining capacity. Finally, we return the scores as a numpy array.\n\nCode:\n\n```",
          "code": "import numpy as np\n\ndef score(item, bins):\n    remaining_capacities = bins\n    mask = remaining_capacities > item\n    scores = np.zeros_like(bins, dtype=np.float64)\n    scores[mask] = 1 / remaining_capacities[mask]\n    return scores",
          "objective": 0.05071,
          "other_inf": null
     },
     {
          "algorithm": "New algorithm description: \nThe new algorithm assigns items to bins based on a score function that takes into account both the difference between the current item and the rest capacities of bins and the number of times each bin has been used. The score for each bin is calculated by multiplying the square root of the absolute difference between the current item and the rest capacity of the bin by a factor of 0.5 and then adding the number of times the bin has been used.\n\nPython implementation:\n```\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    remaining_capacities = bins - item\n    used_counts = np.arange(len(bins))\n    scores = np.sqrt(np.abs(remaining_capacities)) * 0.5 + used_counts\n    return scores",
          "objective": 0.05473,
          "other_inf": null
     },
     {
          "algorithm": "Algorithm: \n1. Initialize an empty array named scores with the same size as bins.\n2. For each bin capacity in bins:\n    a. If the bin capacity equals the maximum capacity, set its score to 0.\n    b. Otherwise, calculate the score of the bin by dividing the bin capacity by the item size.\n       Note: If the division results in a floating-point value, round it down to the nearest integer.\n    c. Assign the calculated score to the corresponding index in scores array.\n3. Return the scores array.\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.zeros(len(bins))\n    max_capacity = np.max(bins)\n\n    for i in range(len(bins)):\n        if bins[i] == max_capacity:\n            scores[i] = 0\n        else:\n            scores[i] = int(bins[i] / item)\n\n    return scores",
          "objective": 0.05987,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm assigns items to bins based on a score function that takes into account the ratio between the remaining capacity of each bin and the item size, the logarithm base 2 of the bin capacity, and the number of times each bin has been used, with higher scores given to bins with smaller ratios, larger logarithmic capacity, and smaller usage count.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    remaining_capacities = bins - item\n    used_counts = np.arange(len(bins))\n    scores = remaining_capacities / item + np.log2(bins * 2) + used_counts * (-0.2)\n    return scores",
          "objective": 0.06359,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm assigns items to bins based on a score function that takes into account the difference between the current item and the rest capacities of bins and the number of times each bin has been used. The score for each bin is calculated by raising the difference between the current item and the rest capacity of the bin to the power of 2.5, multiplying it by a factor of 0.3, and then adding the number of times the bin has been used.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    remaining_capacities = bins - item\n    used_counts = np.arange(len(bins))\n    scores = (remaining_capacities - item) ** 2.5 * 0.3 + used_counts\n    return scores",
          "objective": 0.0651,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm assigns items to bins based on the score function, where the score for each bin is calculated by taking the logarithm base 2 of the sum of the square root of the difference between the rest capacity of the bin and the item size and the product of the bin capacity and a factor of 0.5, then subtracting the number of times the bin has been used multiplied by a factor of 0.1.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    used_counts = np.arange(len(bins))\n    scores = np.log2(np.sqrt(bins - item) + (bins * 0.5)) - used_counts * 0.1\n    return scores",
          "objective": 0.08019,
          "other_inf": null
     },
     {
          "algorithm": "Common backbone idea: All the algorithms calculate scores for each bin based on some criteria such as remaining capacity, difference in capacity, or number of times the bin has been used.\n\nNew algorithm description: \n\nThe new algorithm assigns items to bins based on a score function that takes into account the difference between the current item and the rest capacities of bins, the number of times each bin has been used, and the inverse of the bin capacity.\n\nPython implementation:\n\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    remaining_capacities = bins - item\n    used_counts = np.arange(len(bins))\n    inverse_capacities = 1 / bins\n    scores = np.sqrt(np.abs(remaining_capacities)) + used_counts * 0.5 + inverse_capacities\n    return scores",
          "objective": 0.08049,
          "other_inf": null
     },
     {
          "algorithm": "Common backbone idea: All the algorithms calculate scores for each bin based on some criteria such as remaining capacity, difference in capacity, or number of times the bin has been used.\n\nNew algorithm description: \n\nThe new algorithm assigns items to bins based on a score function that takes into account the difference between the current item and the rest capacities of bins, and the number of times each bin has been used. The score for each bin is calculated by adding the square root of the difference between the current item and the rest capacity of the bin, and the number of times the bin has been used, multiplied by a factor of 0.5.\n\nPython implementation:\n\n",
          "code": "import numpy as np\n\ndef score(item, bins):\n    remaining_capacities = bins - item\n    used_counts = np.arange(len(bins))\n    scores = np.sqrt(np.abs(remaining_capacities)) + used_counts * 0.5\n    return scores",
          "objective": 0.0822,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm scores the bins based on a combination of their remaining capacity and their positions in the list, with higher scores given to bins with larger capacities and lower positions in the list.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    scores = np.zeros_like(bins)\n    remaining_capacity = bins - item\n\n    # Assign scores based on remaining capacity and bin position\n    scores = remaining_capacity + (len(bins)-1) - np.arange(len(bins))\n\n    return scores",
          "objective": 0.10102,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm assigns items to bins based on the score function, where the score for each bin is calculated by multiplying the square root of the difference between the rest capacity of the bin and the item size by a factor of 0.5, and then subtracting the number of times the bin has been used multiplied by 0.1, and finally multiplying it with the item size divided by the maximum capacity of the bins.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    used_counts = np.arange(len(bins))\n    scores = np.sqrt(bins - item) * 0.5 - used_counts * 0.1\n    scores *= item / np.max(bins)\n    return scores",
          "objective": 0.10655,
          "other_inf": null
     }
]